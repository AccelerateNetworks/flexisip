// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#include <odb/pre.hxx>

#include "eventlogsdb-odb.hxx"

#include <cassert>
#include <cstring>  // std::memcpy
#include <typeinfo>

#include <odb/polymorphic-map.hxx>
#include <odb/schema-catalog-impl.hxx>

#include <odb/mysql/traits.hxx>
#include <odb/mysql/database.hxx>
#include <odb/mysql/transaction.hxx>
#include <odb/mysql/connection.hxx>
#include <odb/mysql/statement.hxx>
#include <odb/mysql/statement-cache.hxx>
#include <odb/mysql/polymorphic-object-statements.hxx>
#include <odb/mysql/container-statements.hxx>
#include <odb/mysql/exceptions.hxx>
#include <odb/mysql/polymorphic-object-result.hxx>
#include <odb/mysql/enum.hxx>

namespace odb
{
  // EventLogDb
  //

  struct access::object_traits_impl< ::EventLogDb, id_mysql >::extra_statement_cache_type
  {
    extra_statement_cache_type (
      mysql::connection&,
      image_type&,
      mysql::binding&,
      mysql::binding&)
    {
    }
  };

  access::object_traits_impl< ::EventLogDb, id_mysql >::id_type
  access::object_traits_impl< ::EventLogDb, id_mysql >::
  id (const image_type& i)
  {
    mysql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      mysql::value_traits<
          long unsigned int,
          mysql::id_ulonglong >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  access::object_traits_impl< ::EventLogDb, id_mysql >::discriminator_type
  access::object_traits_impl< ::EventLogDb, id_mysql >::
  discriminator (const image_type& i)
  {
    mysql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    discriminator_type d;
    {
      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_value (
        d,
        i.typeid_value,
        i.typeid_size,
        i.typeid_null);
    }

    return d;
  }

  bool access::object_traits_impl< ::EventLogDb, id_mysql >::
  grow (image_type& i,
        my_bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // from
    //
    if (t[0UL])
    {
      i.from_value.capacity (i.from_size);
      grew = true;
    }

    // to
    //
    if (t[1UL])
    {
      i.to_value.capacity (i.to_size);
      grew = true;
    }

    // userAgent
    //
    if (t[2UL])
    {
      i.userAgent_value.capacity (i.userAgent_size);
      grew = true;
    }

    // date
    //
    t[3UL] = 0;

    // statusCode
    //
    t[4UL] = 0;

    // reason
    //
    if (t[5UL])
    {
      i.reason_value.capacity (i.reason_size);
      grew = true;
    }

    // completed
    //
    t[6UL] = 0;

    // id_
    //
    t[7UL] = 0;

    // typeid_
    //
    if (t[8UL])
    {
      i.typeid_value.capacity (i.typeid_size);
      grew = true;
    }

    return grew;
  }

  void access::object_traits_impl< ::EventLogDb, id_mysql >::
  bind (MYSQL_BIND* b,
        image_type& i,
        mysql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mysql;

    std::size_t n (0);

    // from
    //
    b[n].buffer_type = MYSQL_TYPE_STRING;
    b[n].buffer = i.from_value.data ();
    b[n].buffer_length = static_cast<unsigned long> (
      i.from_value.capacity ());
    b[n].length = &i.from_size;
    b[n].is_null = &i.from_null;
    n++;

    // to
    //
    b[n].buffer_type = MYSQL_TYPE_STRING;
    b[n].buffer = i.to_value.data ();
    b[n].buffer_length = static_cast<unsigned long> (
      i.to_value.capacity ());
    b[n].length = &i.to_size;
    b[n].is_null = &i.to_null;
    n++;

    // userAgent
    //
    b[n].buffer_type = MYSQL_TYPE_STRING;
    b[n].buffer = i.userAgent_value.data ();
    b[n].buffer_length = static_cast<unsigned long> (
      i.userAgent_value.capacity ());
    b[n].length = &i.userAgent_size;
    b[n].is_null = &i.userAgent_null;
    n++;

    // date
    //
    b[n].buffer_type = MYSQL_TYPE_LONGLONG;
    b[n].is_unsigned = 0;
    b[n].buffer = &i.date_value;
    b[n].is_null = &i.date_null;
    n++;

    // statusCode
    //
    b[n].buffer_type = MYSQL_TYPE_LONG;
    b[n].is_unsigned = 0;
    b[n].buffer = &i.statusCode_value;
    b[n].is_null = &i.statusCode_null;
    n++;

    // reason
    //
    b[n].buffer_type = MYSQL_TYPE_STRING;
    b[n].buffer = i.reason_value.data ();
    b[n].buffer_length = static_cast<unsigned long> (
      i.reason_value.capacity ());
    b[n].length = &i.reason_size;
    b[n].is_null = &i.reason_null;
    n++;

    // completed
    //
    b[n].buffer_type = MYSQL_TYPE_TINY;
    b[n].is_unsigned = 0;
    b[n].buffer = &i.completed_value;
    b[n].is_null = &i.completed_null;
    n++;

    // id_
    //
    if (sk != statement_update)
    {
      b[n].buffer_type = MYSQL_TYPE_LONGLONG;
      b[n].is_unsigned = 1;
      b[n].buffer = &i.id_value;
      b[n].is_null = &i.id_null;
      n++;
    }

    // typeid_
    //
    if (sk != statement_update)
    {
      b[n].buffer_type = MYSQL_TYPE_STRING;
      b[n].buffer = i.typeid_value.data ();
      b[n].buffer_length = static_cast<unsigned long> (
        i.typeid_value.capacity ());
      b[n].length = &i.typeid_size;
      b[n].is_null = &i.typeid_null;
      n++;
    }
  }

  void access::object_traits_impl< ::EventLogDb, id_mysql >::
  bind (MYSQL_BIND* b, id_image_type& i)
  {
    std::size_t n (0);
    b[n].buffer_type = MYSQL_TYPE_LONGLONG;
    b[n].is_unsigned = 1;
    b[n].buffer = &i.id_value;
    b[n].is_null = &i.id_null;
  }

  bool access::object_traits_impl< ::EventLogDb, id_mysql >::
  init (image_type& i,
        const object_type& o,
        mysql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mysql;

    bool grew (false);

    // from
    //
    {
      ::std::string const& v =
        o.from;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.from_value.capacity ());
      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_image (
        i.from_value,
        size,
        is_null,
        v);
      i.from_null = is_null;
      i.from_size = static_cast<unsigned long> (size);
      grew = grew || (cap != i.from_value.capacity ());
    }

    // to
    //
    {
      ::std::string const& v =
        o.to;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.to_value.capacity ());
      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_image (
        i.to_value,
        size,
        is_null,
        v);
      i.to_null = is_null;
      i.to_size = static_cast<unsigned long> (size);
      grew = grew || (cap != i.to_value.capacity ());
    }

    // userAgent
    //
    {
      ::std::string const& v =
        o.userAgent;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.userAgent_value.capacity ());
      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_image (
        i.userAgent_value,
        size,
        is_null,
        v);
      i.userAgent_null = is_null;
      i.userAgent_size = static_cast<unsigned long> (size);
      grew = grew || (cap != i.userAgent_value.capacity ());
    }

    // date
    //
    {
      ::time_t const& v =
        o.date;

      bool is_null (false);
      mysql::value_traits<
          ::time_t,
          mysql::id_longlong >::set_image (
        i.date_value, is_null, v);
      i.date_null = is_null;
    }

    // statusCode
    //
    {
      int const& v =
        o.statusCode;

      bool is_null (false);
      mysql::value_traits<
          int,
          mysql::id_long >::set_image (
        i.statusCode_value, is_null, v);
      i.statusCode_null = is_null;
    }

    // reason
    //
    {
      ::std::string const& v =
        o.reason;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.reason_value.capacity ());
      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_image (
        i.reason_value,
        size,
        is_null,
        v);
      i.reason_null = is_null;
      i.reason_size = static_cast<unsigned long> (size);
      grew = grew || (cap != i.reason_value.capacity ());
    }

    // completed
    //
    {
      bool const& v =
        o.completed;

      bool is_null (false);
      mysql::value_traits<
          bool,
          mysql::id_tiny >::set_image (
        i.completed_value, is_null, v);
      i.completed_null = is_null;
    }

    // id_
    //
    if (sk == statement_insert)
    {
      long unsigned int const& v =
        o.id_;

      bool is_null (false);
      mysql::value_traits<
          long unsigned int,
          mysql::id_ulonglong >::set_image (
        i.id_value, is_null, v);
      i.id_null = is_null;
    }

    // typeid_
    //
    if (sk == statement_insert)
    {
      const info_type& di (map->find (typeid (o)));

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.typeid_value.capacity ());
      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_image (
        i.typeid_value,
        size,
        is_null,
        di.discriminator);
      i.typeid_null = is_null;
      i.typeid_size = static_cast<unsigned long> (size);
      grew = grew || (cap != i.typeid_value.capacity ());
    }

    return grew;
  }

  void access::object_traits_impl< ::EventLogDb, id_mysql >::
  init (object_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // from
    //
    {
      ::std::string& v =
        o.from;

      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_value (
        v,
        i.from_value,
        i.from_size,
        i.from_null);
    }

    // to
    //
    {
      ::std::string& v =
        o.to;

      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_value (
        v,
        i.to_value,
        i.to_size,
        i.to_null);
    }

    // userAgent
    //
    {
      ::std::string& v =
        o.userAgent;

      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_value (
        v,
        i.userAgent_value,
        i.userAgent_size,
        i.userAgent_null);
    }

    // date
    //
    {
      ::time_t& v =
        o.date;

      mysql::value_traits<
          ::time_t,
          mysql::id_longlong >::set_value (
        v,
        i.date_value,
        i.date_null);
    }

    // statusCode
    //
    {
      int& v =
        o.statusCode;

      mysql::value_traits<
          int,
          mysql::id_long >::set_value (
        v,
        i.statusCode_value,
        i.statusCode_null);
    }

    // reason
    //
    {
      ::std::string& v =
        o.reason;

      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_value (
        v,
        i.reason_value,
        i.reason_size,
        i.reason_null);
    }

    // completed
    //
    {
      bool& v =
        o.completed;

      mysql::value_traits<
          bool,
          mysql::id_tiny >::set_value (
        v,
        i.completed_value,
        i.completed_null);
    }

    // id_
    //
    {
      long unsigned int& v =
        o.id_;

      mysql::value_traits<
          long unsigned int,
          mysql::id_ulonglong >::set_value (
        v,
        i.id_value,
        i.id_null);
    }
  }

  void access::object_traits_impl< ::EventLogDb, id_mysql >::
  init (id_image_type& i, const id_type& id)
  {
    {
      bool is_null (false);
      mysql::value_traits<
          long unsigned int,
          mysql::id_ulonglong >::set_image (
        i.id_value, is_null, id);
      i.id_null = is_null;
    }
  }

  access::object_traits_impl< ::EventLogDb, id_mysql >::map_type*
  access::object_traits_impl< ::EventLogDb, id_mysql >::map;

  const access::object_traits_impl< ::EventLogDb, id_mysql >::info_type
  access::object_traits_impl< ::EventLogDb, id_mysql >::info (
    typeid (::EventLogDb),
    0,
    0,
    "EventLogDb",
    &odb::create_impl< ::EventLogDb >,
    &odb::dispatch_impl< ::EventLogDb, id_mysql >,
    0);

  static const access::object_traits_impl< ::EventLogDb, id_mysql >::entry_type
  polymorphic_entry_for_EventLogDb;

  const char access::object_traits_impl< ::EventLogDb, id_mysql >::persist_statement[] =
  "INSERT INTO `EventLog` "
  "(`from`, "
  "`to`, "
  "`userAgent`, "
  "`date`, "
  "`statusCode`, "
  "`reason`, "
  "`completed`, "
  "`id`, "
  "`typeid`) "
  "VALUES "
  "(?, ?, ?, ?, ?, ?, ?, ?, ?)";

  const char access::object_traits_impl< ::EventLogDb, id_mysql >::find_statement[] =
  "SELECT "
  "`EventLog`.`from`, "
  "`EventLog`.`to`, "
  "`EventLog`.`userAgent`, "
  "`EventLog`.`date`, "
  "`EventLog`.`statusCode`, "
  "`EventLog`.`reason`, "
  "`EventLog`.`completed`, "
  "`EventLog`.`id`, "
  "`EventLog`.`typeid` "
  "FROM `EventLog` "
  "WHERE `EventLog`.`id`=?";

  const char access::object_traits_impl< ::EventLogDb, id_mysql >::
  find_discriminator_statement[] =
  "SELECT "
  "`EventLog`.`typeid` "
  "FROM `EventLog` "
  "WHERE `EventLog`.`id`=?";

  const char access::object_traits_impl< ::EventLogDb, id_mysql >::update_statement[] =
  "UPDATE `EventLog` "
  "SET "
  "`from`=?, "
  "`to`=?, "
  "`userAgent`=?, "
  "`date`=?, "
  "`statusCode`=?, "
  "`reason`=?, "
  "`completed`=? "
  "WHERE `id`=?";

  const char access::object_traits_impl< ::EventLogDb, id_mysql >::erase_statement[] =
  "DELETE FROM `EventLog` "
  "WHERE `id`=?";

  const char access::object_traits_impl< ::EventLogDb, id_mysql >::query_statement[] =
  "SELECT "
  "`EventLog`.`from`, "
  "`EventLog`.`to`, "
  "`EventLog`.`userAgent`, "
  "`EventLog`.`date`, "
  "`EventLog`.`statusCode`, "
  "`EventLog`.`reason`, "
  "`EventLog`.`completed`, "
  "`EventLog`.`id`, "
  "`EventLog`.`typeid` "
  "FROM `EventLog`";

  const char access::object_traits_impl< ::EventLogDb, id_mysql >::erase_query_statement[] =
  "DELETE FROM `EventLog`";

  const char access::object_traits_impl< ::EventLogDb, id_mysql >::table_name[] =
  "`EventLog`";

  void access::object_traits_impl< ::EventLogDb, id_mysql >::
  persist (database& db, object_type& obj, bool top, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (top);

    using namespace mysql;

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        pi.dispatch (info_type::call_persist, db, &obj, 0);
        return;
      }
    }

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    if (top)
      callback (db,
                static_cast<const object_type&> (obj),
                callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    im.id_value = 0;

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    obj.id_ = static_cast< id_type > (st.id ());

    if (!top)
    {
      id_image_type& i (sts.id_image ());
      init (i, obj.id_);

      binding& idb (sts.id_image_binding ());
      if (i.version != sts.id_image_version () || idb.version == 0)
      {
        bind (idb.bind, i);
        sts.id_image_version (i.version);
        idb.version++;
      }
    }

    if (top)
      callback (db,
                static_cast<const object_type&> (obj),
                callback_event::post_persist);
  }

  void access::object_traits_impl< ::EventLogDb, id_mysql >::
  update (database& db, const object_type& obj, bool top, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (top);

    using namespace mysql;
    using mysql::update_statement;

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        pi.dispatch (info_type::call_update, db, &obj, 0);
        return;
      }
    }

    if (top)
      callback (db, obj, callback_event::pre_update);

    mysql::transaction& tr (mysql::transaction::current ());
    mysql::connection& conn (tr.connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    const id_type& id (
      obj.id_);
    id_image_type& idi (sts.id_image ());
    init (idi, id);

    image_type& im (sts.image ());
    if (init (im, obj, statement_update))
      im.version++;

    bool u (false);
    binding& imb (sts.update_image_binding ());
    if (im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_update);
      sts.update_image_version (im.version);
      imb.version++;
      u = true;
    }

    binding& idb (sts.id_image_binding ());
    if (idi.version != sts.update_id_image_version () ||
        idb.version == 0)
    {
      if (idi.version != sts.id_image_version () ||
          idb.version == 0)
      {
        bind (idb.bind, idi);
        sts.id_image_version (idi.version);
        idb.version++;
      }

      sts.update_id_image_version (idi.version);

      if (!u)
        imb.version++;
    }

    update_statement& st (sts.update_statement ());
    if (st.execute () == 0)
      throw object_not_persistent ();

    if (top)
    {
      callback (db, obj, callback_event::post_update);
      pointer_cache_traits::update (db, obj);
    }
  }

  void access::object_traits_impl< ::EventLogDb, id_mysql >::
  erase (database& db, const id_type& id, bool top, bool dyn)
  {
    using namespace mysql;

    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (top);

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    if (dyn)
    {
      discriminator_type d;
      root_traits::discriminator_ (sts.root_statements (), id, &d);

      if (d != info.discriminator)
      {
        const info_type& pi (root_traits::map->find (d));

        if (!pi.derived (info))
          throw object_not_persistent ();

        pi.dispatch (info_type::call_erase, db, 0, &id);
        return;
      }
    }

    if (top)
    {
      id_image_type& i (sts.id_image ());
      init (i, id);

      binding& idb (sts.id_image_binding ());
      if (i.version != sts.id_image_version () || idb.version == 0)
      {
        bind (idb.bind, i);
        sts.id_image_version (i.version);
        idb.version++;
      }
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    if (top)
      pointer_cache_traits::erase (db, id);
  }

  void access::object_traits_impl< ::EventLogDb, id_mysql >::
  erase (database& db, const object_type& obj, bool top, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (top);

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        pi.dispatch (info_type::call_erase, db, &obj, 0);
        return;
      }
    }

    callback (db, obj, callback_event::pre_erase);
    erase (db, id (obj), true, false);
    callback (db, obj, callback_event::post_erase);
  }

  access::object_traits_impl< ::EventLogDb, id_mysql >::pointer_type
  access::object_traits_impl< ::EventLogDb, id_mysql >::
  find (database& db, const id_type& id)
  {
    using namespace mysql;

    {
      pointer_type p (pointer_cache_traits::find (db, id));

      if (!pointer_traits::null_ptr (p))
        return p;
    }

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);
    root_traits::discriminator_type d;

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
      d = root_traits::discriminator (sts.image ());
    }
    else
      root_traits::discriminator_ (sts, id, &d);

    const info_type& pi (
      d == info.discriminator ? info : root_traits::map->find (d));

    pointer_type p (pi.create ());
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, p));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement ());
      ODB_POTENTIALLY_UNUSED (st);

      callback_event ce (callback_event::pre_load);
      pi.dispatch (info_type::call_callback, db, &obj, &ce);
      init (obj, sts.image (), &db);
      load_ (sts, obj, false);

      if (&pi != &info)
      {
        std::size_t d (depth);
        pi.dispatch (info_type::call_load, db, &obj, &d);
      }

      sts.load_delayed (0);
      l.unlock ();
      ce = callback_event::post_load;
      pi.dispatch (info_type::call_callback, db, &obj, &ce);
      pointer_cache_traits::load (ig.position ());
    }
    else
      sts.delay_load (id, obj, ig.position (), pi.delayed_loader);

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::EventLogDb, id_mysql >::
  find (database& db, const id_type& id, object_type& obj, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (dyn);

    using namespace mysql;

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        return pi.dispatch (info_type::call_find, db, &obj, &id);
      }
    }

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, false);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::EventLogDb, id_mysql >::
  reload (database& db, object_type& obj, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (dyn);

    using namespace mysql;

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        return pi.dispatch (info_type::call_reload, db, &obj, 0);
      }
    }

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    const id_type& id  (
      obj.id_);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, true);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::EventLogDb, id_mysql >::
  find_ (statements_type& sts,
         const id_type* id)
  {
    using namespace mysql;

    id_image_type& i (sts.id_image ());
    init (i, *id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    select_statement& st (sts.find_statement ());

    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      if (grow (im, sts.select_image_truncated ()))
        im.version++;

      if (im.version != sts.select_image_version ())
      {
        bind (imb.bind, im, statement_select);
        sts.select_image_version (im.version);
        imb.version++;
        st.refetch ();
      }
    }

    return r != select_statement::no_data;
  }

  void access::object_traits_impl< ::EventLogDb, id_mysql >::
  discriminator_ (statements_type& sts,
                  const id_type& id,
                  discriminator_type* pd)
  {
    using namespace mysql;

    id_image_type& idi (sts.discriminator_id_image ());
    init (idi, id);

    binding& idb (sts.discriminator_id_image_binding ());
    if (idi.version != sts.discriminator_id_image_version () ||
        idb.version == 0)
    {
      bind (idb.bind, idi);
      sts.discriminator_id_image_version (idi.version);
      idb.version++;
    }

    discriminator_image_type& i (sts.discriminator_image ());
    binding& imb (sts.discriminator_image_binding ());

    if (i.version != sts.discriminator_image_version () ||
        imb.version == 0)
    {
      MYSQL_BIND* b (imb.bind);
      std::size_t n (0);
      {
        b[n].buffer_type = MYSQL_TYPE_STRING;
        b[n].buffer = i.discriminator_value.data ();
        b[n].buffer_length = static_cast<unsigned long> (
          i.discriminator_value.capacity ());
        b[n].length = &i.discriminator_size;
        b[n].is_null = &i.discriminator_null;
      }

      sts.discriminator_image_version (i.version);
      imb.version++;
    }

    {
      select_statement& st (sts.find_discriminator_statement ());
      st.execute ();
      auto_result ar (st);
      select_statement::result r (st.fetch ());

      if (r == select_statement::no_data)
      {
        throw object_not_persistent ();
      }
      else if (r == select_statement::truncated)
      {
        bool grew (false);
        my_bool* t (sts.discriminator_image_truncated ());

        if (t[0UL])
        {
          i.discriminator_value.capacity (i.discriminator_size);
          grew = true;
        }

        if (grew)
          i.version++;

        if (i.version != sts.discriminator_image_version ())
        {
          MYSQL_BIND* b (imb.bind);
          std::size_t n (0);
          {
            b[n].buffer_type = MYSQL_TYPE_STRING;
            b[n].buffer = i.discriminator_value.data ();
            b[n].buffer_length = static_cast<unsigned long> (
              i.discriminator_value.capacity ());
            b[n].length = &i.discriminator_size;
            b[n].is_null = &i.discriminator_null;
          }

          sts.discriminator_image_version (i.version);
          imb.version++;
          st.refetch ();
        }
      }
    }

    if (pd != 0)
    {
      discriminator_type& d (*pd);
      {
        mysql::value_traits<
            ::std::string,
            mysql::id_string >::set_value (
          d,
          i.discriminator_value,
          i.discriminator_size,
          i.discriminator_null);
      }
    }
  }

  result< access::object_traits_impl< ::EventLogDb, id_mysql >::object_type >
  access::object_traits_impl< ::EventLogDb, id_mysql >::
  query (database&, const query_base_type& q)
  {
    using namespace mysql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += " ";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        text,
        false,
        true,
        q.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::polymorphic_object_result_impl<object_type> > r (
      new (shared) mysql::polymorphic_object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::EventLogDb, id_mysql >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace mysql;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      text,
      q.parameters_binding ());

    return st.execute ();
  }

  // RegistrationLogDb
  //

  struct access::object_traits_impl< ::RegistrationLogDb, id_mysql >::extra_statement_cache_type
  {
    extra_statement_cache_type (
      mysql::connection&,
      image_type&,
      mysql::binding&,
      mysql::binding&)
    {
    }
  };

  bool access::object_traits_impl< ::RegistrationLogDb, id_mysql >::
  grow (image_type& i,
        my_bool* t,
        std::size_t d)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // EventLogDb base
    //
    if (--d != 0)
    {
      if (base_traits::grow (*i.base, t + 3UL))
        i.base->version++;
    }

    // type
    //
    if (t[0UL])
    {
      if (mysql::enum_traits::grow (i.type_value, i.type_size))
        grew = true;
      else
        t[0UL] = 0;
    }

    // contacts
    //
    if (t[1UL])
    {
      i.contacts_value.capacity (i.contacts_size);
      grew = true;
    }

    // instanceId
    //
    if (t[2UL])
    {
      i.instanceId_value.capacity (i.instanceId_size);
      grew = true;
    }

    return grew;
  }

  void access::object_traits_impl< ::RegistrationLogDb, id_mysql >::
  bind (MYSQL_BIND* b,
        const MYSQL_BIND* id,
        std::size_t id_size,
        image_type& i,
        mysql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mysql;

    std::size_t n (0);

    // id_
    //
    if (sk == statement_insert)
    {
      if (id != 0)
        std::memcpy (&b[n], id, id_size * sizeof (id[0]));
      n += id_size;
    }

    // type
    //
    mysql::enum_traits::bind (b[n],
                              i.type_value,
                              i.type_size,
                              &i.type_null);
    n++;

    // contacts
    //
    b[n].buffer_type = MYSQL_TYPE_STRING;
    b[n].buffer = i.contacts_value.data ();
    b[n].buffer_length = static_cast<unsigned long> (
      i.contacts_value.capacity ());
    b[n].length = &i.contacts_size;
    b[n].is_null = &i.contacts_null;
    n++;

    // instanceId
    //
    b[n].buffer_type = MYSQL_TYPE_STRING;
    b[n].buffer = i.instanceId_value.data ();
    b[n].buffer_length = static_cast<unsigned long> (
      i.instanceId_value.capacity ());
    b[n].length = &i.instanceId_size;
    b[n].is_null = &i.instanceId_null;
    n++;

    // id_
    //
    if (sk == statement_update)
    {
      if (id != 0)
        std::memcpy (&b[n], id, id_size * sizeof (id[0]));
      n += id_size;
    }

    // EventLogDb base
    //
    if (sk == statement_select)
      base_traits::bind (b + n, *i.base, sk);
  }

  bool access::object_traits_impl< ::RegistrationLogDb, id_mysql >::
  init (image_type& i,
        const object_type& o,
        mysql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mysql;

    bool grew (false);

    // type
    //
    {
      ::RegistrationLogDb::Type const& v =
        o.type;

      bool is_null (false);
      if (mysql::enum_traits::set_image (
            i.type_value,
            i.type_size,
            is_null,
            v))
        grew = true;

      i.type_null = is_null;
    }

    // contacts
    //
    {
      ::std::string const& v =
        o.contacts;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.contacts_value.capacity ());
      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_image (
        i.contacts_value,
        size,
        is_null,
        v);
      i.contacts_null = is_null;
      i.contacts_size = static_cast<unsigned long> (size);
      grew = grew || (cap != i.contacts_value.capacity ());
    }

    // instanceId
    //
    {
      ::std::string const& v =
        o.instanceId;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.instanceId_value.capacity ());
      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_image (
        i.instanceId_value,
        size,
        is_null,
        v);
      i.instanceId_null = is_null;
      i.instanceId_size = static_cast<unsigned long> (size);
      grew = grew || (cap != i.instanceId_value.capacity ());
    }

    return grew;
  }

  void access::object_traits_impl< ::RegistrationLogDb, id_mysql >::
  init (object_type& o,
        const image_type& i,
        database* db,
        std::size_t d)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // EventLogDb base
    //
    if (--d != 0)
      base_traits::init (o, *i.base, db);

    // type
    //
    {
      ::RegistrationLogDb::Type& v =
        o.type;

      mysql::enum_traits::set_value (
        v,
        i.type_value,
        i.type_size,
        i.type_null);
    }

    // contacts
    //
    {
      ::std::string& v =
        o.contacts;

      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_value (
        v,
        i.contacts_value,
        i.contacts_size,
        i.contacts_null);
    }

    // instanceId
    //
    {
      ::std::string& v =
        o.instanceId;

      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_value (
        v,
        i.instanceId_value,
        i.instanceId_size,
        i.instanceId_null);
    }
  }

  const access::object_traits_impl< ::RegistrationLogDb, id_mysql >::info_type
  access::object_traits_impl< ::RegistrationLogDb, id_mysql >::info (
    typeid (::RegistrationLogDb),
    &object_traits_impl< ::EventLogDb, id_mysql >::info,
    0,
    "RegistrationLogDb",
    &odb::create_impl< ::RegistrationLogDb >,
    &odb::dispatch_impl< ::RegistrationLogDb, id_mysql >,
    &statements_type::delayed_loader);

  static const access::object_traits_impl< ::RegistrationLogDb, id_mysql >::entry_type
  polymorphic_entry_for_RegistrationLogDb;

  const char access::object_traits_impl< ::RegistrationLogDb, id_mysql >::persist_statement[] =
  "INSERT INTO `RegistrationLog` "
  "(`id`, "
  "`type`, "
  "`contacts`, "
  "`instanceId`) "
  "VALUES "
  "(?, ?, ?, ?)";

  const char* const access::object_traits_impl< ::RegistrationLogDb, id_mysql >::find_statements[] =
  {
    "SELECT "
    "CONCAT(`RegistrationLog`.`type`+0,' ',`RegistrationLog`.`type`), "
    "`RegistrationLog`.`contacts`, "
    "`RegistrationLog`.`instanceId`, "
    "`EventLog`.`from`, "
    "`EventLog`.`to`, "
    "`EventLog`.`userAgent`, "
    "`EventLog`.`date`, "
    "`EventLog`.`statusCode`, "
    "`EventLog`.`reason`, "
    "`EventLog`.`completed`, "
    "`EventLog`.`id`, "
    "`EventLog`.`typeid` "
    "FROM `RegistrationLog` "
    "LEFT JOIN `EventLog` ON `EventLog`.`id`=`RegistrationLog`.`id` "
    "WHERE `RegistrationLog`.`id`=?",

    "SELECT "
    "CONCAT(`RegistrationLog`.`type`+0,' ',`RegistrationLog`.`type`), "
    "`RegistrationLog`.`contacts`, "
    "`RegistrationLog`.`instanceId` "
    "FROM `RegistrationLog` "
    "WHERE `RegistrationLog`.`id`=?"
  };

  const std::size_t access::object_traits_impl< ::RegistrationLogDb, id_mysql >::find_column_counts[] =
  {
    12UL,
    3UL
  };

  const char access::object_traits_impl< ::RegistrationLogDb, id_mysql >::update_statement[] =
  "UPDATE `RegistrationLog` "
  "SET "
  "`type`=?, "
  "`contacts`=?, "
  "`instanceId`=? "
  "WHERE `id`=?";

  const char access::object_traits_impl< ::RegistrationLogDb, id_mysql >::erase_statement[] =
  "DELETE FROM `RegistrationLog` "
  "WHERE `id`=?";

  const char access::object_traits_impl< ::RegistrationLogDb, id_mysql >::query_statement[] =
  "SELECT\n"
  "CONCAT(`RegistrationLog`.`type`+0,' ',`RegistrationLog`.`type`),\n"
  "`RegistrationLog`.`contacts`,\n"
  "`RegistrationLog`.`instanceId`,\n"
  "`EventLog`.`from`,\n"
  "`EventLog`.`to`,\n"
  "`EventLog`.`userAgent`,\n"
  "`EventLog`.`date`,\n"
  "`EventLog`.`statusCode`,\n"
  "`EventLog`.`reason`,\n"
  "`EventLog`.`completed`,\n"
  "`EventLog`.`id`,\n"
  "`EventLog`.`typeid`\n"
  "FROM `RegistrationLog`\n"
  "LEFT JOIN `EventLog` ON `EventLog`.`id`=`RegistrationLog`.`id`";

  const char access::object_traits_impl< ::RegistrationLogDb, id_mysql >::erase_query_statement[] =
  "DELETE FROM `RegistrationLog`";

  const char access::object_traits_impl< ::RegistrationLogDb, id_mysql >::table_name[] =
  "`RegistrationLog`";

  void access::object_traits_impl< ::RegistrationLogDb, id_mysql >::
  persist (database& db, object_type& obj, bool top, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (top);

    using namespace mysql;

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        pi.dispatch (info_type::call_persist, db, &obj, 0);
        return;
      }
    }

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    if (top)
      callback (db,
                static_cast<const object_type&> (obj),
                callback_event::pre_persist);

    base_traits::persist (db, obj, false, false);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());
    const binding& idb (sts.id_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    if (idb.version != sts.insert_id_binding_version () ||
        im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, idb.bind, idb.count, im, statement_insert);
      sts.insert_id_binding_version (idb.version);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    if (top)
      callback (db,
                static_cast<const object_type&> (obj),
                callback_event::post_persist);
  }

  void access::object_traits_impl< ::RegistrationLogDb, id_mysql >::
  update (database& db, const object_type& obj, bool top, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (top);

    using namespace mysql;
    using mysql::update_statement;

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        pi.dispatch (info_type::call_update, db, &obj, 0);
        return;
      }
    }

    if (top)
      callback (db, obj, callback_event::pre_update);

    mysql::transaction& tr (mysql::transaction::current ());
    mysql::connection& conn (tr.connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    base_traits::update (db, obj, false, false);

    image_type& im (sts.image ());
    if (init (im, obj, statement_update))
      im.version++;

    const binding& idb (sts.id_image_binding ());
    binding& imb (sts.update_image_binding ());
    if (idb.version != sts.update_id_binding_version () ||
        im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, idb.bind, idb.count, im, statement_update);
      sts.update_id_binding_version (idb.version);
      sts.update_image_version (im.version);
      imb.version++;
    }

    update_statement& st (sts.update_statement ());
    if (st.execute () == 0)
      throw object_not_persistent ();

    if (top)
    {
      callback (db, obj, callback_event::post_update);
      pointer_cache_traits::update (db, obj);
    }
  }

  void access::object_traits_impl< ::RegistrationLogDb, id_mysql >::
  erase (database& db, const id_type& id, bool top, bool dyn)
  {
    using namespace mysql;

    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (top);

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    if (dyn)
    {
      discriminator_type d;
      root_traits::discriminator_ (sts.root_statements (), id, &d);

      if (d != info.discriminator)
      {
        const info_type& pi (root_traits::map->find (d));

        if (!pi.derived (info))
          throw object_not_persistent ();

        pi.dispatch (info_type::call_erase, db, 0, &id);
        return;
      }
    }

    if (top)
    {
      id_image_type& i (sts.id_image ());
      init (i, id);

      binding& idb (sts.id_image_binding ());
      if (i.version != sts.id_image_version () || idb.version == 0)
      {
        bind (idb.bind, i);
        sts.id_image_version (i.version);
        idb.version++;
      }
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    base_traits::erase (db, id, false, false);

    if (top)
      pointer_cache_traits::erase (db, id);
  }

  void access::object_traits_impl< ::RegistrationLogDb, id_mysql >::
  erase (database& db, const object_type& obj, bool top, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (top);

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        pi.dispatch (info_type::call_erase, db, &obj, 0);
        return;
      }
    }

    callback (db, obj, callback_event::pre_erase);
    erase (db, id (obj), true, false);
    callback (db, obj, callback_event::post_erase);
  }

  access::object_traits_impl< ::RegistrationLogDb, id_mysql >::pointer_type
  access::object_traits_impl< ::RegistrationLogDb, id_mysql >::
  find (database& db, const id_type& id)
  {
    using namespace mysql;

    {
      root_traits::pointer_type rp (pointer_cache_traits::find (db, id));

      if (!root_traits::pointer_traits::null_ptr (rp))
        return
          root_traits::pointer_traits::dynamic_pointer_cast<object_type> (rp);
    }

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());
    root_statements_type& rsts (sts.root_statements ());

    statements_type::auto_lock l (rsts);
    root_traits::discriminator_type d;

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
      d = root_traits::discriminator (rsts.image ());
    }
    else
      root_traits::discriminator_ (rsts, id, &d);

    const info_type& pi (
      d == info.discriminator ? info : root_traits::map->find (d));

    root_traits::pointer_type rp (pi.create ());
    pointer_type p (
      root_traits::pointer_traits::static_pointer_cast<object_type> (rp));
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, rp));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement (depth));
      ODB_POTENTIALLY_UNUSED (st);

      callback_event ce (callback_event::pre_load);
      pi.dispatch (info_type::call_callback, db, &obj, &ce);
      init (obj, sts.image (), &db);
      load_ (sts, obj, false);

      if (&pi != &info)
      {
        std::size_t d (depth);
        pi.dispatch (info_type::call_load, db, &obj, &d);
      }

      rsts.load_delayed (0);
      l.unlock ();
      ce = callback_event::post_load;
      pi.dispatch (info_type::call_callback, db, &obj, &ce);
      pointer_cache_traits::load (ig.position ());
    }
    else
      rsts.delay_load (id, obj, ig.position (), pi.delayed_loader);

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::RegistrationLogDb, id_mysql >::
  find (database& db, const id_type& id, object_type& obj, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (dyn);

    using namespace mysql;

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        return pi.dispatch (info_type::call_find, db, &obj, &id);
      }
    }

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());
    root_statements_type& rsts (sts.root_statements ());

    statements_type::auto_lock l (rsts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement (depth));
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, false);
    rsts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::RegistrationLogDb, id_mysql >::
  reload (database& db, object_type& obj, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (dyn);

    using namespace mysql;

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        return pi.dispatch (info_type::call_reload, db, &obj, 0);
      }
    }

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());
    root_statements_type& rsts (sts.root_statements ());

    statements_type::auto_lock l (rsts);

    const id_type& id  (
      obj.id_);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement (depth));
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, true);
    rsts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::RegistrationLogDb, id_mysql >::
  find_ (statements_type& sts,
         const id_type* id,
         std::size_t d)
  {
    using namespace mysql;

    if (d == depth)
    {
      id_image_type& i (sts.id_image ());
      init (i, *id);

      binding& idb (sts.id_image_binding ());
      if (i.version != sts.id_image_version () || idb.version == 0)
      {
        bind (idb.bind, i);
        sts.id_image_version (i.version);
        idb.version++;
      }
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding (d));

    if (imb.version == 0 ||
        check_version (sts.select_image_versions (), im))
    {
      bind (imb.bind, 0, 0, im, statement_select);
      update_version (sts.select_image_versions (),
                      im,
                      sts.select_image_bindings ());
    }

    select_statement& st (sts.find_statement (d));

    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      if (grow (im, sts.select_image_truncated (), d))
        im.version++;

      if (check_version (sts.select_image_versions (), im))
      {
        bind (imb.bind, 0, 0, im, statement_select);
        update_version (sts.select_image_versions (),
                        im,
                        sts.select_image_bindings ());
        st.refetch ();
      }
    }

    return r != select_statement::no_data;
  }

  void access::object_traits_impl< ::RegistrationLogDb, id_mysql >::
  load_ (statements_type& sts,
         object_type& obj,
         bool reload,
         std::size_t d)
  {
    ODB_POTENTIALLY_UNUSED (reload);

    if (--d != 0)
      base_traits::load_ (sts.base_statements (), obj, reload);
  }

  void access::object_traits_impl< ::RegistrationLogDb, id_mysql >::
  load_ (database& db, root_type& r, std::size_t d)
  {
    using namespace mysql;

    object_type& obj (static_cast<object_type&> (r));
    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    d = depth - d;

    if (!find_ (sts, 0, d))
      throw object_not_persistent ();

    select_statement& st (sts.find_statement (d));
    ODB_POTENTIALLY_UNUSED (st);

    init (obj, sts.image (), &db, d);
    load_ (sts, obj, false, d);
  }

  result< access::object_traits_impl< ::RegistrationLogDb, id_mysql >::object_type >
  access::object_traits_impl< ::RegistrationLogDb, id_mysql >::
  query (database&, const query_base_type& q)
  {
    using namespace mysql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding (depth));

    if (imb.version == 0 ||
        check_version (sts.select_image_versions (), im))
    {
      bind (imb.bind, 0, 0, im, statement_select);
      update_version (sts.select_image_versions (),
                      im,
                      sts.select_image_bindings ());
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += "\n";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        text,
        true,
        true,
        q.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::polymorphic_object_result_impl<object_type> > r (
      new (shared) mysql::polymorphic_object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::RegistrationLogDb, id_mysql >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace mysql;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      text,
      q.parameters_binding ());

    return st.execute ();
  }

  // CallLogDb
  //

  struct access::object_traits_impl< ::CallLogDb, id_mysql >::extra_statement_cache_type
  {
    extra_statement_cache_type (
      mysql::connection&,
      image_type&,
      mysql::binding&,
      mysql::binding&)
    {
    }
  };

  bool access::object_traits_impl< ::CallLogDb, id_mysql >::
  grow (image_type& i,
        my_bool* t,
        std::size_t d)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // EventLogDb base
    //
    if (--d != 0)
    {
      if (base_traits::grow (*i.base, t + 1UL))
        i.base->version++;
    }

    // cancelled
    //
    t[0UL] = 0;

    return grew;
  }

  void access::object_traits_impl< ::CallLogDb, id_mysql >::
  bind (MYSQL_BIND* b,
        const MYSQL_BIND* id,
        std::size_t id_size,
        image_type& i,
        mysql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mysql;

    std::size_t n (0);

    // id_
    //
    if (sk == statement_insert)
    {
      if (id != 0)
        std::memcpy (&b[n], id, id_size * sizeof (id[0]));
      n += id_size;
    }

    // cancelled
    //
    b[n].buffer_type = MYSQL_TYPE_TINY;
    b[n].is_unsigned = 0;
    b[n].buffer = &i.cancelled_value;
    b[n].is_null = &i.cancelled_null;
    n++;

    // id_
    //
    if (sk == statement_update)
    {
      if (id != 0)
        std::memcpy (&b[n], id, id_size * sizeof (id[0]));
      n += id_size;
    }

    // EventLogDb base
    //
    if (sk == statement_select)
      base_traits::bind (b + n, *i.base, sk);
  }

  bool access::object_traits_impl< ::CallLogDb, id_mysql >::
  init (image_type& i,
        const object_type& o,
        mysql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mysql;

    bool grew (false);

    // cancelled
    //
    {
      bool const& v =
        o.cancelled;

      bool is_null (false);
      mysql::value_traits<
          bool,
          mysql::id_tiny >::set_image (
        i.cancelled_value, is_null, v);
      i.cancelled_null = is_null;
    }

    return grew;
  }

  void access::object_traits_impl< ::CallLogDb, id_mysql >::
  init (object_type& o,
        const image_type& i,
        database* db,
        std::size_t d)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // EventLogDb base
    //
    if (--d != 0)
      base_traits::init (o, *i.base, db);

    // cancelled
    //
    {
      bool& v =
        o.cancelled;

      mysql::value_traits<
          bool,
          mysql::id_tiny >::set_value (
        v,
        i.cancelled_value,
        i.cancelled_null);
    }
  }

  const access::object_traits_impl< ::CallLogDb, id_mysql >::info_type
  access::object_traits_impl< ::CallLogDb, id_mysql >::info (
    typeid (::CallLogDb),
    &object_traits_impl< ::EventLogDb, id_mysql >::info,
    0,
    "CallLogDb",
    &odb::create_impl< ::CallLogDb >,
    &odb::dispatch_impl< ::CallLogDb, id_mysql >,
    &statements_type::delayed_loader);

  static const access::object_traits_impl< ::CallLogDb, id_mysql >::entry_type
  polymorphic_entry_for_CallLogDb;

  const char access::object_traits_impl< ::CallLogDb, id_mysql >::persist_statement[] =
  "INSERT INTO `CallLog` "
  "(`id`, "
  "`cancelled`) "
  "VALUES "
  "(?, ?)";

  const char* const access::object_traits_impl< ::CallLogDb, id_mysql >::find_statements[] =
  {
    "SELECT "
    "`CallLog`.`cancelled`, "
    "`EventLog`.`from`, "
    "`EventLog`.`to`, "
    "`EventLog`.`userAgent`, "
    "`EventLog`.`date`, "
    "`EventLog`.`statusCode`, "
    "`EventLog`.`reason`, "
    "`EventLog`.`completed`, "
    "`EventLog`.`id`, "
    "`EventLog`.`typeid` "
    "FROM `CallLog` "
    "LEFT JOIN `EventLog` ON `EventLog`.`id`=`CallLog`.`id` "
    "WHERE `CallLog`.`id`=?",

    "SELECT "
    "`CallLog`.`cancelled` "
    "FROM `CallLog` "
    "WHERE `CallLog`.`id`=?"
  };

  const std::size_t access::object_traits_impl< ::CallLogDb, id_mysql >::find_column_counts[] =
  {
    10UL,
    1UL
  };

  const char access::object_traits_impl< ::CallLogDb, id_mysql >::update_statement[] =
  "UPDATE `CallLog` "
  "SET "
  "`cancelled`=? "
  "WHERE `id`=?";

  const char access::object_traits_impl< ::CallLogDb, id_mysql >::erase_statement[] =
  "DELETE FROM `CallLog` "
  "WHERE `id`=?";

  const char access::object_traits_impl< ::CallLogDb, id_mysql >::query_statement[] =
  "SELECT\n"
  "`CallLog`.`cancelled`,\n"
  "`EventLog`.`from`,\n"
  "`EventLog`.`to`,\n"
  "`EventLog`.`userAgent`,\n"
  "`EventLog`.`date`,\n"
  "`EventLog`.`statusCode`,\n"
  "`EventLog`.`reason`,\n"
  "`EventLog`.`completed`,\n"
  "`EventLog`.`id`,\n"
  "`EventLog`.`typeid`\n"
  "FROM `CallLog`\n"
  "LEFT JOIN `EventLog` ON `EventLog`.`id`=`CallLog`.`id`";

  const char access::object_traits_impl< ::CallLogDb, id_mysql >::erase_query_statement[] =
  "DELETE FROM `CallLog`";

  const char access::object_traits_impl< ::CallLogDb, id_mysql >::table_name[] =
  "`CallLog`";

  void access::object_traits_impl< ::CallLogDb, id_mysql >::
  persist (database& db, object_type& obj, bool top, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (top);

    using namespace mysql;

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        pi.dispatch (info_type::call_persist, db, &obj, 0);
        return;
      }
    }

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    if (top)
      callback (db,
                static_cast<const object_type&> (obj),
                callback_event::pre_persist);

    base_traits::persist (db, obj, false, false);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());
    const binding& idb (sts.id_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    if (idb.version != sts.insert_id_binding_version () ||
        im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, idb.bind, idb.count, im, statement_insert);
      sts.insert_id_binding_version (idb.version);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    if (top)
      callback (db,
                static_cast<const object_type&> (obj),
                callback_event::post_persist);
  }

  void access::object_traits_impl< ::CallLogDb, id_mysql >::
  update (database& db, const object_type& obj, bool top, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (top);

    using namespace mysql;
    using mysql::update_statement;

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        pi.dispatch (info_type::call_update, db, &obj, 0);
        return;
      }
    }

    if (top)
      callback (db, obj, callback_event::pre_update);

    mysql::transaction& tr (mysql::transaction::current ());
    mysql::connection& conn (tr.connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    base_traits::update (db, obj, false, false);

    image_type& im (sts.image ());
    if (init (im, obj, statement_update))
      im.version++;

    const binding& idb (sts.id_image_binding ());
    binding& imb (sts.update_image_binding ());
    if (idb.version != sts.update_id_binding_version () ||
        im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, idb.bind, idb.count, im, statement_update);
      sts.update_id_binding_version (idb.version);
      sts.update_image_version (im.version);
      imb.version++;
    }

    update_statement& st (sts.update_statement ());
    if (st.execute () == 0)
      throw object_not_persistent ();

    if (top)
    {
      callback (db, obj, callback_event::post_update);
      pointer_cache_traits::update (db, obj);
    }
  }

  void access::object_traits_impl< ::CallLogDb, id_mysql >::
  erase (database& db, const id_type& id, bool top, bool dyn)
  {
    using namespace mysql;

    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (top);

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    if (dyn)
    {
      discriminator_type d;
      root_traits::discriminator_ (sts.root_statements (), id, &d);

      if (d != info.discriminator)
      {
        const info_type& pi (root_traits::map->find (d));

        if (!pi.derived (info))
          throw object_not_persistent ();

        pi.dispatch (info_type::call_erase, db, 0, &id);
        return;
      }
    }

    if (top)
    {
      id_image_type& i (sts.id_image ());
      init (i, id);

      binding& idb (sts.id_image_binding ());
      if (i.version != sts.id_image_version () || idb.version == 0)
      {
        bind (idb.bind, i);
        sts.id_image_version (i.version);
        idb.version++;
      }
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    base_traits::erase (db, id, false, false);

    if (top)
      pointer_cache_traits::erase (db, id);
  }

  void access::object_traits_impl< ::CallLogDb, id_mysql >::
  erase (database& db, const object_type& obj, bool top, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (top);

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        pi.dispatch (info_type::call_erase, db, &obj, 0);
        return;
      }
    }

    callback (db, obj, callback_event::pre_erase);
    erase (db, id (obj), true, false);
    callback (db, obj, callback_event::post_erase);
  }

  access::object_traits_impl< ::CallLogDb, id_mysql >::pointer_type
  access::object_traits_impl< ::CallLogDb, id_mysql >::
  find (database& db, const id_type& id)
  {
    using namespace mysql;

    {
      root_traits::pointer_type rp (pointer_cache_traits::find (db, id));

      if (!root_traits::pointer_traits::null_ptr (rp))
        return
          root_traits::pointer_traits::dynamic_pointer_cast<object_type> (rp);
    }

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());
    root_statements_type& rsts (sts.root_statements ());

    statements_type::auto_lock l (rsts);
    root_traits::discriminator_type d;

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
      d = root_traits::discriminator (rsts.image ());
    }
    else
      root_traits::discriminator_ (rsts, id, &d);

    const info_type& pi (
      d == info.discriminator ? info : root_traits::map->find (d));

    root_traits::pointer_type rp (pi.create ());
    pointer_type p (
      root_traits::pointer_traits::static_pointer_cast<object_type> (rp));
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, rp));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement (depth));
      ODB_POTENTIALLY_UNUSED (st);

      callback_event ce (callback_event::pre_load);
      pi.dispatch (info_type::call_callback, db, &obj, &ce);
      init (obj, sts.image (), &db);
      load_ (sts, obj, false);

      if (&pi != &info)
      {
        std::size_t d (depth);
        pi.dispatch (info_type::call_load, db, &obj, &d);
      }

      rsts.load_delayed (0);
      l.unlock ();
      ce = callback_event::post_load;
      pi.dispatch (info_type::call_callback, db, &obj, &ce);
      pointer_cache_traits::load (ig.position ());
    }
    else
      rsts.delay_load (id, obj, ig.position (), pi.delayed_loader);

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::CallLogDb, id_mysql >::
  find (database& db, const id_type& id, object_type& obj, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (dyn);

    using namespace mysql;

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        return pi.dispatch (info_type::call_find, db, &obj, &id);
      }
    }

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());
    root_statements_type& rsts (sts.root_statements ());

    statements_type::auto_lock l (rsts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement (depth));
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, false);
    rsts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::CallLogDb, id_mysql >::
  reload (database& db, object_type& obj, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (dyn);

    using namespace mysql;

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        return pi.dispatch (info_type::call_reload, db, &obj, 0);
      }
    }

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());
    root_statements_type& rsts (sts.root_statements ());

    statements_type::auto_lock l (rsts);

    const id_type& id  (
      obj.id_);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement (depth));
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, true);
    rsts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::CallLogDb, id_mysql >::
  find_ (statements_type& sts,
         const id_type* id,
         std::size_t d)
  {
    using namespace mysql;

    if (d == depth)
    {
      id_image_type& i (sts.id_image ());
      init (i, *id);

      binding& idb (sts.id_image_binding ());
      if (i.version != sts.id_image_version () || idb.version == 0)
      {
        bind (idb.bind, i);
        sts.id_image_version (i.version);
        idb.version++;
      }
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding (d));

    if (imb.version == 0 ||
        check_version (sts.select_image_versions (), im))
    {
      bind (imb.bind, 0, 0, im, statement_select);
      update_version (sts.select_image_versions (),
                      im,
                      sts.select_image_bindings ());
    }

    select_statement& st (sts.find_statement (d));

    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      if (grow (im, sts.select_image_truncated (), d))
        im.version++;

      if (check_version (sts.select_image_versions (), im))
      {
        bind (imb.bind, 0, 0, im, statement_select);
        update_version (sts.select_image_versions (),
                        im,
                        sts.select_image_bindings ());
        st.refetch ();
      }
    }

    return r != select_statement::no_data;
  }

  void access::object_traits_impl< ::CallLogDb, id_mysql >::
  load_ (statements_type& sts,
         object_type& obj,
         bool reload,
         std::size_t d)
  {
    ODB_POTENTIALLY_UNUSED (reload);

    if (--d != 0)
      base_traits::load_ (sts.base_statements (), obj, reload);
  }

  void access::object_traits_impl< ::CallLogDb, id_mysql >::
  load_ (database& db, root_type& r, std::size_t d)
  {
    using namespace mysql;

    object_type& obj (static_cast<object_type&> (r));
    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    d = depth - d;

    if (!find_ (sts, 0, d))
      throw object_not_persistent ();

    select_statement& st (sts.find_statement (d));
    ODB_POTENTIALLY_UNUSED (st);

    init (obj, sts.image (), &db, d);
    load_ (sts, obj, false, d);
  }

  result< access::object_traits_impl< ::CallLogDb, id_mysql >::object_type >
  access::object_traits_impl< ::CallLogDb, id_mysql >::
  query (database&, const query_base_type& q)
  {
    using namespace mysql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding (depth));

    if (imb.version == 0 ||
        check_version (sts.select_image_versions (), im))
    {
      bind (imb.bind, 0, 0, im, statement_select);
      update_version (sts.select_image_versions (),
                      im,
                      sts.select_image_bindings ());
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += "\n";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        text,
        true,
        true,
        q.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::polymorphic_object_result_impl<object_type> > r (
      new (shared) mysql::polymorphic_object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::CallLogDb, id_mysql >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace mysql;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      text,
      q.parameters_binding ());

    return st.execute ();
  }

  // MessageLogDb
  //

  struct access::object_traits_impl< ::MessageLogDb, id_mysql >::extra_statement_cache_type
  {
    extra_statement_cache_type (
      mysql::connection&,
      image_type&,
      mysql::binding&,
      mysql::binding&)
    {
    }
  };

  bool access::object_traits_impl< ::MessageLogDb, id_mysql >::
  grow (image_type& i,
        my_bool* t,
        std::size_t d)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // EventLogDb base
    //
    if (--d != 0)
    {
      if (base_traits::grow (*i.base, t + 3UL))
        i.base->version++;
    }

    // reportType
    //
    if (t[0UL])
    {
      if (mysql::enum_traits::grow (i.reportType_value, i.reportType_size))
        grew = true;
      else
        t[0UL] = 0;
    }

    // uri
    //
    if (t[1UL])
    {
      i.uri_value.capacity (i.uri_size);
      grew = true;
    }

    // mId
    //
    t[2UL] = 0;

    return grew;
  }

  void access::object_traits_impl< ::MessageLogDb, id_mysql >::
  bind (MYSQL_BIND* b,
        const MYSQL_BIND* id,
        std::size_t id_size,
        image_type& i,
        mysql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mysql;

    std::size_t n (0);

    // id_
    //
    if (sk == statement_insert)
    {
      if (id != 0)
        std::memcpy (&b[n], id, id_size * sizeof (id[0]));
      n += id_size;
    }

    // reportType
    //
    mysql::enum_traits::bind (b[n],
                              i.reportType_value,
                              i.reportType_size,
                              &i.reportType_null);
    n++;

    // uri
    //
    b[n].buffer_type = MYSQL_TYPE_STRING;
    b[n].buffer = i.uri_value.data ();
    b[n].buffer_length = static_cast<unsigned long> (
      i.uri_value.capacity ());
    b[n].length = &i.uri_size;
    b[n].is_null = &i.uri_null;
    n++;

    // mId
    //
    b[n].buffer_type = MYSQL_TYPE_LONGLONG;
    b[n].is_unsigned = 1;
    b[n].buffer = &i.mId_value;
    b[n].is_null = &i.mId_null;
    n++;

    // id_
    //
    if (sk == statement_update)
    {
      if (id != 0)
        std::memcpy (&b[n], id, id_size * sizeof (id[0]));
      n += id_size;
    }

    // EventLogDb base
    //
    if (sk == statement_select)
      base_traits::bind (b + n, *i.base, sk);
  }

  bool access::object_traits_impl< ::MessageLogDb, id_mysql >::
  init (image_type& i,
        const object_type& o,
        mysql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mysql;

    bool grew (false);

    // reportType
    //
    {
      ::MessageLogDb::ReportType const& v =
        o.reportType;

      bool is_null (false);
      if (mysql::enum_traits::set_image (
            i.reportType_value,
            i.reportType_size,
            is_null,
            v))
        grew = true;

      i.reportType_null = is_null;
    }

    // uri
    //
    {
      ::std::string const& v =
        o.uri;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.uri_value.capacity ());
      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_image (
        i.uri_value,
        size,
        is_null,
        v);
      i.uri_null = is_null;
      i.uri_size = static_cast<unsigned long> (size);
      grew = grew || (cap != i.uri_value.capacity ());
    }

    // mId
    //
    {
      long unsigned int const& v =
        o.mId;

      bool is_null (false);
      mysql::value_traits<
          long unsigned int,
          mysql::id_ulonglong >::set_image (
        i.mId_value, is_null, v);
      i.mId_null = is_null;
    }

    return grew;
  }

  void access::object_traits_impl< ::MessageLogDb, id_mysql >::
  init (object_type& o,
        const image_type& i,
        database* db,
        std::size_t d)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // EventLogDb base
    //
    if (--d != 0)
      base_traits::init (o, *i.base, db);

    // reportType
    //
    {
      ::MessageLogDb::ReportType& v =
        o.reportType;

      mysql::enum_traits::set_value (
        v,
        i.reportType_value,
        i.reportType_size,
        i.reportType_null);
    }

    // uri
    //
    {
      ::std::string& v =
        o.uri;

      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_value (
        v,
        i.uri_value,
        i.uri_size,
        i.uri_null);
    }

    // mId
    //
    {
      long unsigned int& v =
        o.mId;

      mysql::value_traits<
          long unsigned int,
          mysql::id_ulonglong >::set_value (
        v,
        i.mId_value,
        i.mId_null);
    }
  }

  const access::object_traits_impl< ::MessageLogDb, id_mysql >::info_type
  access::object_traits_impl< ::MessageLogDb, id_mysql >::info (
    typeid (::MessageLogDb),
    &object_traits_impl< ::EventLogDb, id_mysql >::info,
    0,
    "MessageLogDb",
    &odb::create_impl< ::MessageLogDb >,
    &odb::dispatch_impl< ::MessageLogDb, id_mysql >,
    &statements_type::delayed_loader);

  static const access::object_traits_impl< ::MessageLogDb, id_mysql >::entry_type
  polymorphic_entry_for_MessageLogDb;

  const char access::object_traits_impl< ::MessageLogDb, id_mysql >::persist_statement[] =
  "INSERT INTO `MessageLog` "
  "(`id`, "
  "`reportType`, "
  "`uri`, "
  "`mId`) "
  "VALUES "
  "(?, ?, ?, ?)";

  const char* const access::object_traits_impl< ::MessageLogDb, id_mysql >::find_statements[] =
  {
    "SELECT "
    "CONCAT(`MessageLog`.`reportType`+0,' ',`MessageLog`.`reportType`), "
    "`MessageLog`.`uri`, "
    "`MessageLog`.`mId`, "
    "`EventLog`.`from`, "
    "`EventLog`.`to`, "
    "`EventLog`.`userAgent`, "
    "`EventLog`.`date`, "
    "`EventLog`.`statusCode`, "
    "`EventLog`.`reason`, "
    "`EventLog`.`completed`, "
    "`EventLog`.`id`, "
    "`EventLog`.`typeid` "
    "FROM `MessageLog` "
    "LEFT JOIN `EventLog` ON `EventLog`.`id`=`MessageLog`.`id` "
    "WHERE `MessageLog`.`id`=?",

    "SELECT "
    "CONCAT(`MessageLog`.`reportType`+0,' ',`MessageLog`.`reportType`), "
    "`MessageLog`.`uri`, "
    "`MessageLog`.`mId` "
    "FROM `MessageLog` "
    "WHERE `MessageLog`.`id`=?"
  };

  const std::size_t access::object_traits_impl< ::MessageLogDb, id_mysql >::find_column_counts[] =
  {
    12UL,
    3UL
  };

  const char access::object_traits_impl< ::MessageLogDb, id_mysql >::update_statement[] =
  "UPDATE `MessageLog` "
  "SET "
  "`reportType`=?, "
  "`uri`=?, "
  "`mId`=? "
  "WHERE `id`=?";

  const char access::object_traits_impl< ::MessageLogDb, id_mysql >::erase_statement[] =
  "DELETE FROM `MessageLog` "
  "WHERE `id`=?";

  const char access::object_traits_impl< ::MessageLogDb, id_mysql >::query_statement[] =
  "SELECT\n"
  "CONCAT(`MessageLog`.`reportType`+0,' ',`MessageLog`.`reportType`),\n"
  "`MessageLog`.`uri`,\n"
  "`MessageLog`.`mId`,\n"
  "`EventLog`.`from`,\n"
  "`EventLog`.`to`,\n"
  "`EventLog`.`userAgent`,\n"
  "`EventLog`.`date`,\n"
  "`EventLog`.`statusCode`,\n"
  "`EventLog`.`reason`,\n"
  "`EventLog`.`completed`,\n"
  "`EventLog`.`id`,\n"
  "`EventLog`.`typeid`\n"
  "FROM `MessageLog`\n"
  "LEFT JOIN `EventLog` ON `EventLog`.`id`=`MessageLog`.`id`";

  const char access::object_traits_impl< ::MessageLogDb, id_mysql >::erase_query_statement[] =
  "DELETE FROM `MessageLog`";

  const char access::object_traits_impl< ::MessageLogDb, id_mysql >::table_name[] =
  "`MessageLog`";

  void access::object_traits_impl< ::MessageLogDb, id_mysql >::
  persist (database& db, object_type& obj, bool top, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (top);

    using namespace mysql;

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        pi.dispatch (info_type::call_persist, db, &obj, 0);
        return;
      }
    }

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    if (top)
      callback (db,
                static_cast<const object_type&> (obj),
                callback_event::pre_persist);

    base_traits::persist (db, obj, false, false);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());
    const binding& idb (sts.id_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    if (idb.version != sts.insert_id_binding_version () ||
        im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, idb.bind, idb.count, im, statement_insert);
      sts.insert_id_binding_version (idb.version);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    if (top)
      callback (db,
                static_cast<const object_type&> (obj),
                callback_event::post_persist);
  }

  void access::object_traits_impl< ::MessageLogDb, id_mysql >::
  update (database& db, const object_type& obj, bool top, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (top);

    using namespace mysql;
    using mysql::update_statement;

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        pi.dispatch (info_type::call_update, db, &obj, 0);
        return;
      }
    }

    if (top)
      callback (db, obj, callback_event::pre_update);

    mysql::transaction& tr (mysql::transaction::current ());
    mysql::connection& conn (tr.connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    base_traits::update (db, obj, false, false);

    image_type& im (sts.image ());
    if (init (im, obj, statement_update))
      im.version++;

    const binding& idb (sts.id_image_binding ());
    binding& imb (sts.update_image_binding ());
    if (idb.version != sts.update_id_binding_version () ||
        im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, idb.bind, idb.count, im, statement_update);
      sts.update_id_binding_version (idb.version);
      sts.update_image_version (im.version);
      imb.version++;
    }

    update_statement& st (sts.update_statement ());
    if (st.execute () == 0)
      throw object_not_persistent ();

    if (top)
    {
      callback (db, obj, callback_event::post_update);
      pointer_cache_traits::update (db, obj);
    }
  }

  void access::object_traits_impl< ::MessageLogDb, id_mysql >::
  erase (database& db, const id_type& id, bool top, bool dyn)
  {
    using namespace mysql;

    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (top);

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    if (dyn)
    {
      discriminator_type d;
      root_traits::discriminator_ (sts.root_statements (), id, &d);

      if (d != info.discriminator)
      {
        const info_type& pi (root_traits::map->find (d));

        if (!pi.derived (info))
          throw object_not_persistent ();

        pi.dispatch (info_type::call_erase, db, 0, &id);
        return;
      }
    }

    if (top)
    {
      id_image_type& i (sts.id_image ());
      init (i, id);

      binding& idb (sts.id_image_binding ());
      if (i.version != sts.id_image_version () || idb.version == 0)
      {
        bind (idb.bind, i);
        sts.id_image_version (i.version);
        idb.version++;
      }
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    base_traits::erase (db, id, false, false);

    if (top)
      pointer_cache_traits::erase (db, id);
  }

  void access::object_traits_impl< ::MessageLogDb, id_mysql >::
  erase (database& db, const object_type& obj, bool top, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (top);

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        pi.dispatch (info_type::call_erase, db, &obj, 0);
        return;
      }
    }

    callback (db, obj, callback_event::pre_erase);
    erase (db, id (obj), true, false);
    callback (db, obj, callback_event::post_erase);
  }

  access::object_traits_impl< ::MessageLogDb, id_mysql >::pointer_type
  access::object_traits_impl< ::MessageLogDb, id_mysql >::
  find (database& db, const id_type& id)
  {
    using namespace mysql;

    {
      root_traits::pointer_type rp (pointer_cache_traits::find (db, id));

      if (!root_traits::pointer_traits::null_ptr (rp))
        return
          root_traits::pointer_traits::dynamic_pointer_cast<object_type> (rp);
    }

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());
    root_statements_type& rsts (sts.root_statements ());

    statements_type::auto_lock l (rsts);
    root_traits::discriminator_type d;

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
      d = root_traits::discriminator (rsts.image ());
    }
    else
      root_traits::discriminator_ (rsts, id, &d);

    const info_type& pi (
      d == info.discriminator ? info : root_traits::map->find (d));

    root_traits::pointer_type rp (pi.create ());
    pointer_type p (
      root_traits::pointer_traits::static_pointer_cast<object_type> (rp));
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, rp));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement (depth));
      ODB_POTENTIALLY_UNUSED (st);

      callback_event ce (callback_event::pre_load);
      pi.dispatch (info_type::call_callback, db, &obj, &ce);
      init (obj, sts.image (), &db);
      load_ (sts, obj, false);

      if (&pi != &info)
      {
        std::size_t d (depth);
        pi.dispatch (info_type::call_load, db, &obj, &d);
      }

      rsts.load_delayed (0);
      l.unlock ();
      ce = callback_event::post_load;
      pi.dispatch (info_type::call_callback, db, &obj, &ce);
      pointer_cache_traits::load (ig.position ());
    }
    else
      rsts.delay_load (id, obj, ig.position (), pi.delayed_loader);

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::MessageLogDb, id_mysql >::
  find (database& db, const id_type& id, object_type& obj, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (dyn);

    using namespace mysql;

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        return pi.dispatch (info_type::call_find, db, &obj, &id);
      }
    }

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());
    root_statements_type& rsts (sts.root_statements ());

    statements_type::auto_lock l (rsts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement (depth));
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, false);
    rsts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::MessageLogDb, id_mysql >::
  reload (database& db, object_type& obj, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (dyn);

    using namespace mysql;

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        return pi.dispatch (info_type::call_reload, db, &obj, 0);
      }
    }

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());
    root_statements_type& rsts (sts.root_statements ());

    statements_type::auto_lock l (rsts);

    const id_type& id  (
      obj.id_);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement (depth));
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, true);
    rsts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::MessageLogDb, id_mysql >::
  find_ (statements_type& sts,
         const id_type* id,
         std::size_t d)
  {
    using namespace mysql;

    if (d == depth)
    {
      id_image_type& i (sts.id_image ());
      init (i, *id);

      binding& idb (sts.id_image_binding ());
      if (i.version != sts.id_image_version () || idb.version == 0)
      {
        bind (idb.bind, i);
        sts.id_image_version (i.version);
        idb.version++;
      }
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding (d));

    if (imb.version == 0 ||
        check_version (sts.select_image_versions (), im))
    {
      bind (imb.bind, 0, 0, im, statement_select);
      update_version (sts.select_image_versions (),
                      im,
                      sts.select_image_bindings ());
    }

    select_statement& st (sts.find_statement (d));

    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      if (grow (im, sts.select_image_truncated (), d))
        im.version++;

      if (check_version (sts.select_image_versions (), im))
      {
        bind (imb.bind, 0, 0, im, statement_select);
        update_version (sts.select_image_versions (),
                        im,
                        sts.select_image_bindings ());
        st.refetch ();
      }
    }

    return r != select_statement::no_data;
  }

  void access::object_traits_impl< ::MessageLogDb, id_mysql >::
  load_ (statements_type& sts,
         object_type& obj,
         bool reload,
         std::size_t d)
  {
    ODB_POTENTIALLY_UNUSED (reload);

    if (--d != 0)
      base_traits::load_ (sts.base_statements (), obj, reload);
  }

  void access::object_traits_impl< ::MessageLogDb, id_mysql >::
  load_ (database& db, root_type& r, std::size_t d)
  {
    using namespace mysql;

    object_type& obj (static_cast<object_type&> (r));
    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    d = depth - d;

    if (!find_ (sts, 0, d))
      throw object_not_persistent ();

    select_statement& st (sts.find_statement (d));
    ODB_POTENTIALLY_UNUSED (st);

    init (obj, sts.image (), &db, d);
    load_ (sts, obj, false, d);
  }

  result< access::object_traits_impl< ::MessageLogDb, id_mysql >::object_type >
  access::object_traits_impl< ::MessageLogDb, id_mysql >::
  query (database&, const query_base_type& q)
  {
    using namespace mysql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding (depth));

    if (imb.version == 0 ||
        check_version (sts.select_image_versions (), im))
    {
      bind (imb.bind, 0, 0, im, statement_select);
      update_version (sts.select_image_versions (),
                      im,
                      sts.select_image_bindings ());
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += "\n";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        text,
        true,
        true,
        q.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::polymorphic_object_result_impl<object_type> > r (
      new (shared) mysql::polymorphic_object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::MessageLogDb, id_mysql >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace mysql;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      text,
      q.parameters_binding ());

    return st.execute ();
  }

  // AuthLogDb
  //

  struct access::object_traits_impl< ::AuthLogDb, id_mysql >::extra_statement_cache_type
  {
    extra_statement_cache_type (
      mysql::connection&,
      image_type&,
      mysql::binding&,
      mysql::binding&)
    {
    }
  };

  bool access::object_traits_impl< ::AuthLogDb, id_mysql >::
  grow (image_type& i,
        my_bool* t,
        std::size_t d)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // EventLogDb base
    //
    if (--d != 0)
    {
      if (base_traits::grow (*i.base, t + 3UL))
        i.base->version++;
    }

    // origin
    //
    if (t[0UL])
    {
      i.origin_value.capacity (i.origin_size);
      grew = true;
    }

    // method
    //
    if (t[1UL])
    {
      i.method_value.capacity (i.method_size);
      grew = true;
    }

    // userExists
    //
    t[2UL] = 0;

    return grew;
  }

  void access::object_traits_impl< ::AuthLogDb, id_mysql >::
  bind (MYSQL_BIND* b,
        const MYSQL_BIND* id,
        std::size_t id_size,
        image_type& i,
        mysql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mysql;

    std::size_t n (0);

    // id_
    //
    if (sk == statement_insert)
    {
      if (id != 0)
        std::memcpy (&b[n], id, id_size * sizeof (id[0]));
      n += id_size;
    }

    // origin
    //
    b[n].buffer_type = MYSQL_TYPE_STRING;
    b[n].buffer = i.origin_value.data ();
    b[n].buffer_length = static_cast<unsigned long> (
      i.origin_value.capacity ());
    b[n].length = &i.origin_size;
    b[n].is_null = &i.origin_null;
    n++;

    // method
    //
    b[n].buffer_type = MYSQL_TYPE_STRING;
    b[n].buffer = i.method_value.data ();
    b[n].buffer_length = static_cast<unsigned long> (
      i.method_value.capacity ());
    b[n].length = &i.method_size;
    b[n].is_null = &i.method_null;
    n++;

    // userExists
    //
    b[n].buffer_type = MYSQL_TYPE_TINY;
    b[n].is_unsigned = 0;
    b[n].buffer = &i.userExists_value;
    b[n].is_null = &i.userExists_null;
    n++;

    // id_
    //
    if (sk == statement_update)
    {
      if (id != 0)
        std::memcpy (&b[n], id, id_size * sizeof (id[0]));
      n += id_size;
    }

    // EventLogDb base
    //
    if (sk == statement_select)
      base_traits::bind (b + n, *i.base, sk);
  }

  bool access::object_traits_impl< ::AuthLogDb, id_mysql >::
  init (image_type& i,
        const object_type& o,
        mysql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mysql;

    bool grew (false);

    // origin
    //
    {
      ::std::string const& v =
        o.origin;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.origin_value.capacity ());
      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_image (
        i.origin_value,
        size,
        is_null,
        v);
      i.origin_null = is_null;
      i.origin_size = static_cast<unsigned long> (size);
      grew = grew || (cap != i.origin_value.capacity ());
    }

    // method
    //
    {
      ::std::string const& v =
        o.method;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.method_value.capacity ());
      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_image (
        i.method_value,
        size,
        is_null,
        v);
      i.method_null = is_null;
      i.method_size = static_cast<unsigned long> (size);
      grew = grew || (cap != i.method_value.capacity ());
    }

    // userExists
    //
    {
      bool const& v =
        o.userExists;

      bool is_null (false);
      mysql::value_traits<
          bool,
          mysql::id_tiny >::set_image (
        i.userExists_value, is_null, v);
      i.userExists_null = is_null;
    }

    return grew;
  }

  void access::object_traits_impl< ::AuthLogDb, id_mysql >::
  init (object_type& o,
        const image_type& i,
        database* db,
        std::size_t d)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // EventLogDb base
    //
    if (--d != 0)
      base_traits::init (o, *i.base, db);

    // origin
    //
    {
      ::std::string& v =
        o.origin;

      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_value (
        v,
        i.origin_value,
        i.origin_size,
        i.origin_null);
    }

    // method
    //
    {
      ::std::string& v =
        o.method;

      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_value (
        v,
        i.method_value,
        i.method_size,
        i.method_null);
    }

    // userExists
    //
    {
      bool& v =
        o.userExists;

      mysql::value_traits<
          bool,
          mysql::id_tiny >::set_value (
        v,
        i.userExists_value,
        i.userExists_null);
    }
  }

  const access::object_traits_impl< ::AuthLogDb, id_mysql >::info_type
  access::object_traits_impl< ::AuthLogDb, id_mysql >::info (
    typeid (::AuthLogDb),
    &object_traits_impl< ::EventLogDb, id_mysql >::info,
    0,
    "AuthLogDb",
    &odb::create_impl< ::AuthLogDb >,
    &odb::dispatch_impl< ::AuthLogDb, id_mysql >,
    &statements_type::delayed_loader);

  static const access::object_traits_impl< ::AuthLogDb, id_mysql >::entry_type
  polymorphic_entry_for_AuthLogDb;

  const char access::object_traits_impl< ::AuthLogDb, id_mysql >::persist_statement[] =
  "INSERT INTO `AuthLog` "
  "(`id`, "
  "`origin`, "
  "`method`, "
  "`userExists`) "
  "VALUES "
  "(?, ?, ?, ?)";

  const char* const access::object_traits_impl< ::AuthLogDb, id_mysql >::find_statements[] =
  {
    "SELECT "
    "`AuthLog`.`origin`, "
    "`AuthLog`.`method`, "
    "`AuthLog`.`userExists`, "
    "`EventLog`.`from`, "
    "`EventLog`.`to`, "
    "`EventLog`.`userAgent`, "
    "`EventLog`.`date`, "
    "`EventLog`.`statusCode`, "
    "`EventLog`.`reason`, "
    "`EventLog`.`completed`, "
    "`EventLog`.`id`, "
    "`EventLog`.`typeid` "
    "FROM `AuthLog` "
    "LEFT JOIN `EventLog` ON `EventLog`.`id`=`AuthLog`.`id` "
    "WHERE `AuthLog`.`id`=?",

    "SELECT "
    "`AuthLog`.`origin`, "
    "`AuthLog`.`method`, "
    "`AuthLog`.`userExists` "
    "FROM `AuthLog` "
    "WHERE `AuthLog`.`id`=?"
  };

  const std::size_t access::object_traits_impl< ::AuthLogDb, id_mysql >::find_column_counts[] =
  {
    12UL,
    3UL
  };

  const char access::object_traits_impl< ::AuthLogDb, id_mysql >::update_statement[] =
  "UPDATE `AuthLog` "
  "SET "
  "`origin`=?, "
  "`method`=?, "
  "`userExists`=? "
  "WHERE `id`=?";

  const char access::object_traits_impl< ::AuthLogDb, id_mysql >::erase_statement[] =
  "DELETE FROM `AuthLog` "
  "WHERE `id`=?";

  const char access::object_traits_impl< ::AuthLogDb, id_mysql >::query_statement[] =
  "SELECT\n"
  "`AuthLog`.`origin`,\n"
  "`AuthLog`.`method`,\n"
  "`AuthLog`.`userExists`,\n"
  "`EventLog`.`from`,\n"
  "`EventLog`.`to`,\n"
  "`EventLog`.`userAgent`,\n"
  "`EventLog`.`date`,\n"
  "`EventLog`.`statusCode`,\n"
  "`EventLog`.`reason`,\n"
  "`EventLog`.`completed`,\n"
  "`EventLog`.`id`,\n"
  "`EventLog`.`typeid`\n"
  "FROM `AuthLog`\n"
  "LEFT JOIN `EventLog` ON `EventLog`.`id`=`AuthLog`.`id`";

  const char access::object_traits_impl< ::AuthLogDb, id_mysql >::erase_query_statement[] =
  "DELETE FROM `AuthLog`";

  const char access::object_traits_impl< ::AuthLogDb, id_mysql >::table_name[] =
  "`AuthLog`";

  void access::object_traits_impl< ::AuthLogDb, id_mysql >::
  persist (database& db, object_type& obj, bool top, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (top);

    using namespace mysql;

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        pi.dispatch (info_type::call_persist, db, &obj, 0);
        return;
      }
    }

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    if (top)
      callback (db,
                static_cast<const object_type&> (obj),
                callback_event::pre_persist);

    base_traits::persist (db, obj, false, false);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());
    const binding& idb (sts.id_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    if (idb.version != sts.insert_id_binding_version () ||
        im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, idb.bind, idb.count, im, statement_insert);
      sts.insert_id_binding_version (idb.version);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    if (top)
      callback (db,
                static_cast<const object_type&> (obj),
                callback_event::post_persist);
  }

  void access::object_traits_impl< ::AuthLogDb, id_mysql >::
  update (database& db, const object_type& obj, bool top, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (top);

    using namespace mysql;
    using mysql::update_statement;

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        pi.dispatch (info_type::call_update, db, &obj, 0);
        return;
      }
    }

    if (top)
      callback (db, obj, callback_event::pre_update);

    mysql::transaction& tr (mysql::transaction::current ());
    mysql::connection& conn (tr.connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    base_traits::update (db, obj, false, false);

    image_type& im (sts.image ());
    if (init (im, obj, statement_update))
      im.version++;

    const binding& idb (sts.id_image_binding ());
    binding& imb (sts.update_image_binding ());
    if (idb.version != sts.update_id_binding_version () ||
        im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, idb.bind, idb.count, im, statement_update);
      sts.update_id_binding_version (idb.version);
      sts.update_image_version (im.version);
      imb.version++;
    }

    update_statement& st (sts.update_statement ());
    if (st.execute () == 0)
      throw object_not_persistent ();

    if (top)
    {
      callback (db, obj, callback_event::post_update);
      pointer_cache_traits::update (db, obj);
    }
  }

  void access::object_traits_impl< ::AuthLogDb, id_mysql >::
  erase (database& db, const id_type& id, bool top, bool dyn)
  {
    using namespace mysql;

    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (top);

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    if (dyn)
    {
      discriminator_type d;
      root_traits::discriminator_ (sts.root_statements (), id, &d);

      if (d != info.discriminator)
      {
        const info_type& pi (root_traits::map->find (d));

        if (!pi.derived (info))
          throw object_not_persistent ();

        pi.dispatch (info_type::call_erase, db, 0, &id);
        return;
      }
    }

    if (top)
    {
      id_image_type& i (sts.id_image ());
      init (i, id);

      binding& idb (sts.id_image_binding ());
      if (i.version != sts.id_image_version () || idb.version == 0)
      {
        bind (idb.bind, i);
        sts.id_image_version (i.version);
        idb.version++;
      }
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    base_traits::erase (db, id, false, false);

    if (top)
      pointer_cache_traits::erase (db, id);
  }

  void access::object_traits_impl< ::AuthLogDb, id_mysql >::
  erase (database& db, const object_type& obj, bool top, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (top);

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        pi.dispatch (info_type::call_erase, db, &obj, 0);
        return;
      }
    }

    callback (db, obj, callback_event::pre_erase);
    erase (db, id (obj), true, false);
    callback (db, obj, callback_event::post_erase);
  }

  access::object_traits_impl< ::AuthLogDb, id_mysql >::pointer_type
  access::object_traits_impl< ::AuthLogDb, id_mysql >::
  find (database& db, const id_type& id)
  {
    using namespace mysql;

    {
      root_traits::pointer_type rp (pointer_cache_traits::find (db, id));

      if (!root_traits::pointer_traits::null_ptr (rp))
        return
          root_traits::pointer_traits::dynamic_pointer_cast<object_type> (rp);
    }

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());
    root_statements_type& rsts (sts.root_statements ());

    statements_type::auto_lock l (rsts);
    root_traits::discriminator_type d;

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
      d = root_traits::discriminator (rsts.image ());
    }
    else
      root_traits::discriminator_ (rsts, id, &d);

    const info_type& pi (
      d == info.discriminator ? info : root_traits::map->find (d));

    root_traits::pointer_type rp (pi.create ());
    pointer_type p (
      root_traits::pointer_traits::static_pointer_cast<object_type> (rp));
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, rp));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement (depth));
      ODB_POTENTIALLY_UNUSED (st);

      callback_event ce (callback_event::pre_load);
      pi.dispatch (info_type::call_callback, db, &obj, &ce);
      init (obj, sts.image (), &db);
      load_ (sts, obj, false);

      if (&pi != &info)
      {
        std::size_t d (depth);
        pi.dispatch (info_type::call_load, db, &obj, &d);
      }

      rsts.load_delayed (0);
      l.unlock ();
      ce = callback_event::post_load;
      pi.dispatch (info_type::call_callback, db, &obj, &ce);
      pointer_cache_traits::load (ig.position ());
    }
    else
      rsts.delay_load (id, obj, ig.position (), pi.delayed_loader);

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::AuthLogDb, id_mysql >::
  find (database& db, const id_type& id, object_type& obj, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (dyn);

    using namespace mysql;

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        return pi.dispatch (info_type::call_find, db, &obj, &id);
      }
    }

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());
    root_statements_type& rsts (sts.root_statements ());

    statements_type::auto_lock l (rsts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement (depth));
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, false);
    rsts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::AuthLogDb, id_mysql >::
  reload (database& db, object_type& obj, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (dyn);

    using namespace mysql;

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        return pi.dispatch (info_type::call_reload, db, &obj, 0);
      }
    }

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());
    root_statements_type& rsts (sts.root_statements ());

    statements_type::auto_lock l (rsts);

    const id_type& id  (
      obj.id_);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement (depth));
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, true);
    rsts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::AuthLogDb, id_mysql >::
  find_ (statements_type& sts,
         const id_type* id,
         std::size_t d)
  {
    using namespace mysql;

    if (d == depth)
    {
      id_image_type& i (sts.id_image ());
      init (i, *id);

      binding& idb (sts.id_image_binding ());
      if (i.version != sts.id_image_version () || idb.version == 0)
      {
        bind (idb.bind, i);
        sts.id_image_version (i.version);
        idb.version++;
      }
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding (d));

    if (imb.version == 0 ||
        check_version (sts.select_image_versions (), im))
    {
      bind (imb.bind, 0, 0, im, statement_select);
      update_version (sts.select_image_versions (),
                      im,
                      sts.select_image_bindings ());
    }

    select_statement& st (sts.find_statement (d));

    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      if (grow (im, sts.select_image_truncated (), d))
        im.version++;

      if (check_version (sts.select_image_versions (), im))
      {
        bind (imb.bind, 0, 0, im, statement_select);
        update_version (sts.select_image_versions (),
                        im,
                        sts.select_image_bindings ());
        st.refetch ();
      }
    }

    return r != select_statement::no_data;
  }

  void access::object_traits_impl< ::AuthLogDb, id_mysql >::
  load_ (statements_type& sts,
         object_type& obj,
         bool reload,
         std::size_t d)
  {
    ODB_POTENTIALLY_UNUSED (reload);

    if (--d != 0)
      base_traits::load_ (sts.base_statements (), obj, reload);
  }

  void access::object_traits_impl< ::AuthLogDb, id_mysql >::
  load_ (database& db, root_type& r, std::size_t d)
  {
    using namespace mysql;

    object_type& obj (static_cast<object_type&> (r));
    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    d = depth - d;

    if (!find_ (sts, 0, d))
      throw object_not_persistent ();

    select_statement& st (sts.find_statement (d));
    ODB_POTENTIALLY_UNUSED (st);

    init (obj, sts.image (), &db, d);
    load_ (sts, obj, false, d);
  }

  result< access::object_traits_impl< ::AuthLogDb, id_mysql >::object_type >
  access::object_traits_impl< ::AuthLogDb, id_mysql >::
  query (database&, const query_base_type& q)
  {
    using namespace mysql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding (depth));

    if (imb.version == 0 ||
        check_version (sts.select_image_versions (), im))
    {
      bind (imb.bind, 0, 0, im, statement_select);
      update_version (sts.select_image_versions (),
                      im,
                      sts.select_image_bindings ());
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += "\n";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        text,
        true,
        true,
        q.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::polymorphic_object_result_impl<object_type> > r (
      new (shared) mysql::polymorphic_object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::AuthLogDb, id_mysql >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace mysql;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      text,
      q.parameters_binding ());

    return st.execute ();
  }

  // reporting_addr
  //

  bool access::composite_value_traits< ::CallQualityStatisticsLogDb::reporting_addr, id_mysql >::
  grow (image_type& i,
        my_bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // id
    //
    if (t[0UL])
    {
      i.id_value.capacity (i.id_size);
      grew = true;
    }

    // ip
    //
    if (t[1UL])
    {
      i.ip_value.capacity (i.ip_size);
      grew = true;
    }

    // port
    //
    t[2UL] = 0;

    // ssrc
    //
    t[3UL] = 0;

    // group
    //
    if (t[4UL])
    {
      i.group_value.capacity (i.group_size);
      grew = true;
    }

    // mac
    //
    if (t[5UL])
    {
      i.mac_value.capacity (i.mac_size);
      grew = true;
    }

    return grew;
  }

  void access::composite_value_traits< ::CallQualityStatisticsLogDb::reporting_addr, id_mysql >::
  bind (MYSQL_BIND* b,
        image_type& i,
        mysql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (b);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mysql;

    std::size_t n (0);
    ODB_POTENTIALLY_UNUSED (n);

    // id
    //
    b[n].buffer_type = MYSQL_TYPE_STRING;
    b[n].buffer = i.id_value.data ();
    b[n].buffer_length = static_cast<unsigned long> (
      i.id_value.capacity ());
    b[n].length = &i.id_size;
    b[n].is_null = &i.id_null;
    n++;

    // ip
    //
    b[n].buffer_type = MYSQL_TYPE_STRING;
    b[n].buffer = i.ip_value.data ();
    b[n].buffer_length = static_cast<unsigned long> (
      i.ip_value.capacity ());
    b[n].length = &i.ip_size;
    b[n].is_null = &i.ip_null;
    n++;

    // port
    //
    b[n].buffer_type = MYSQL_TYPE_LONG;
    b[n].is_unsigned = 0;
    b[n].buffer = &i.port_value;
    b[n].is_null = &i.port_null;
    n++;

    // ssrc
    //
    b[n].buffer_type = MYSQL_TYPE_LONG;
    b[n].is_unsigned = 1;
    b[n].buffer = &i.ssrc_value;
    b[n].is_null = &i.ssrc_null;
    n++;

    // group
    //
    b[n].buffer_type = MYSQL_TYPE_STRING;
    b[n].buffer = i.group_value.data ();
    b[n].buffer_length = static_cast<unsigned long> (
      i.group_value.capacity ());
    b[n].length = &i.group_size;
    b[n].is_null = &i.group_null;
    n++;

    // mac
    //
    b[n].buffer_type = MYSQL_TYPE_STRING;
    b[n].buffer = i.mac_value.data ();
    b[n].buffer_length = static_cast<unsigned long> (
      i.mac_value.capacity ());
    b[n].length = &i.mac_size;
    b[n].is_null = &i.mac_null;
    n++;
  }

  bool access::composite_value_traits< ::CallQualityStatisticsLogDb::reporting_addr, id_mysql >::
  init (image_type& i,
        const value_type& o,
        mysql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mysql;

    bool grew (false);

    // id
    //
    {
      ::std::string const& v =
        o.id;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.id_value.capacity ());
      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_image (
        i.id_value,
        size,
        is_null,
        v);
      i.id_null = is_null;
      i.id_size = static_cast<unsigned long> (size);
      grew = grew || (cap != i.id_value.capacity ());
    }

    // ip
    //
    {
      ::std::string const& v =
        o.ip;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.ip_value.capacity ());
      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_image (
        i.ip_value,
        size,
        is_null,
        v);
      i.ip_null = is_null;
      i.ip_size = static_cast<unsigned long> (size);
      grew = grew || (cap != i.ip_value.capacity ());
    }

    // port
    //
    {
      int const& v =
        o.port;

      bool is_null (false);
      mysql::value_traits<
          int,
          mysql::id_long >::set_image (
        i.port_value, is_null, v);
      i.port_null = is_null;
    }

    // ssrc
    //
    {
      ::uint32_t const& v =
        o.ssrc;

      bool is_null (false);
      mysql::value_traits<
          ::uint32_t,
          mysql::id_ulong >::set_image (
        i.ssrc_value, is_null, v);
      i.ssrc_null = is_null;
    }

    // group
    //
    {
      ::std::string const& v =
        o.group;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.group_value.capacity ());
      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_image (
        i.group_value,
        size,
        is_null,
        v);
      i.group_null = is_null;
      i.group_size = static_cast<unsigned long> (size);
      grew = grew || (cap != i.group_value.capacity ());
    }

    // mac
    //
    {
      ::std::string const& v =
        o.mac;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.mac_value.capacity ());
      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_image (
        i.mac_value,
        size,
        is_null,
        v);
      i.mac_null = is_null;
      i.mac_size = static_cast<unsigned long> (size);
      grew = grew || (cap != i.mac_value.capacity ());
    }

    return grew;
  }

  void access::composite_value_traits< ::CallQualityStatisticsLogDb::reporting_addr, id_mysql >::
  init (value_type& o,
        const image_type&  i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // id
    //
    {
      ::std::string& v =
        o.id;

      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_value (
        v,
        i.id_value,
        i.id_size,
        i.id_null);
    }

    // ip
    //
    {
      ::std::string& v =
        o.ip;

      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_value (
        v,
        i.ip_value,
        i.ip_size,
        i.ip_null);
    }

    // port
    //
    {
      int& v =
        o.port;

      mysql::value_traits<
          int,
          mysql::id_long >::set_value (
        v,
        i.port_value,
        i.port_null);
    }

    // ssrc
    //
    {
      ::uint32_t& v =
        o.ssrc;

      mysql::value_traits<
          ::uint32_t,
          mysql::id_ulong >::set_value (
        v,
        i.ssrc_value,
        i.ssrc_null);
    }

    // group
    //
    {
      ::std::string& v =
        o.group;

      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_value (
        v,
        i.group_value,
        i.group_size,
        i.group_null);
    }

    // mac
    //
    {
      ::std::string& v =
        o.mac;

      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_value (
        v,
        i.mac_value,
        i.mac_size,
        i.mac_null);
    }
  }

  // reporting_content_metrics
  //

  bool access::composite_value_traits< ::CallQualityStatisticsLogDb::reporting_content_metrics, id_mysql >::
  grow (image_type& i,
        my_bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // ts_start
    //
    t[0UL] = 0;

    // ts_stop
    //
    t[1UL] = 0;

    // sd_payload_type
    //
    t[2UL] = 0;

    // sd_payload_desc
    //
    if (t[3UL])
    {
      i.sd_payload_desc_value.capacity (i.sd_payload_desc_size);
      grew = true;
    }

    // sd_sample_rate
    //
    t[4UL] = 0;

    // sd_frame_duration
    //
    t[5UL] = 0;

    // sd_fmtp
    //
    if (t[6UL])
    {
      i.sd_fmtp_value.capacity (i.sd_fmtp_size);
      grew = true;
    }

    // sd_packet_loss_concealment
    //
    t[7UL] = 0;

    // jb_adaptive
    //
    t[8UL] = 0;

    // jb_nominal
    //
    t[9UL] = 0;

    // jb_max
    //
    t[10UL] = 0;

    // jb_abs_max
    //
    t[11UL] = 0;

    // pl_network_packet_loss_rate
    //
    t[12UL] = 0;

    // pl_jitter_buffer_discard_rate
    //
    t[13UL] = 0;

    // d_round_trip_delay
    //
    t[14UL] = 0;

    // d_end_system_delay
    //
    t[15UL] = 0;

    // d_symm_one_way_delay
    //
    t[16UL] = 0;

    // d_interarrival_jitter
    //
    t[17UL] = 0;

    // d_mean_abs_jitter
    //
    t[18UL] = 0;

    // s_level
    //
    t[19UL] = 0;

    // s_noise_level
    //
    t[20UL] = 0;

    // qe_moslq
    //
    t[21UL] = 0;

    // qe_moscq
    //
    t[22UL] = 0;

    // user_agent
    //
    if (t[23UL])
    {
      i.user_agent_value.capacity (i.user_agent_size);
      grew = true;
    }

    return grew;
  }

  void access::composite_value_traits< ::CallQualityStatisticsLogDb::reporting_content_metrics, id_mysql >::
  bind (MYSQL_BIND* b,
        image_type& i,
        mysql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (b);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mysql;

    std::size_t n (0);
    ODB_POTENTIALLY_UNUSED (n);

    // ts_start
    //
    b[n].buffer_type = MYSQL_TYPE_LONGLONG;
    b[n].is_unsigned = 0;
    b[n].buffer = &i.ts_start_value;
    b[n].is_null = &i.ts_start_null;
    n++;

    // ts_stop
    //
    b[n].buffer_type = MYSQL_TYPE_LONGLONG;
    b[n].is_unsigned = 0;
    b[n].buffer = &i.ts_stop_value;
    b[n].is_null = &i.ts_stop_null;
    n++;

    // sd_payload_type
    //
    b[n].buffer_type = MYSQL_TYPE_LONG;
    b[n].is_unsigned = 0;
    b[n].buffer = &i.sd_payload_type_value;
    b[n].is_null = &i.sd_payload_type_null;
    n++;

    // sd_payload_desc
    //
    b[n].buffer_type = MYSQL_TYPE_STRING;
    b[n].buffer = i.sd_payload_desc_value.data ();
    b[n].buffer_length = static_cast<unsigned long> (
      i.sd_payload_desc_value.capacity ());
    b[n].length = &i.sd_payload_desc_size;
    b[n].is_null = &i.sd_payload_desc_null;
    n++;

    // sd_sample_rate
    //
    b[n].buffer_type = MYSQL_TYPE_LONG;
    b[n].is_unsigned = 0;
    b[n].buffer = &i.sd_sample_rate_value;
    b[n].is_null = &i.sd_sample_rate_null;
    n++;

    // sd_frame_duration
    //
    b[n].buffer_type = MYSQL_TYPE_LONG;
    b[n].is_unsigned = 0;
    b[n].buffer = &i.sd_frame_duration_value;
    b[n].is_null = &i.sd_frame_duration_null;
    n++;

    // sd_fmtp
    //
    b[n].buffer_type = MYSQL_TYPE_STRING;
    b[n].buffer = i.sd_fmtp_value.data ();
    b[n].buffer_length = static_cast<unsigned long> (
      i.sd_fmtp_value.capacity ());
    b[n].length = &i.sd_fmtp_size;
    b[n].is_null = &i.sd_fmtp_null;
    n++;

    // sd_packet_loss_concealment
    //
    b[n].buffer_type = MYSQL_TYPE_LONG;
    b[n].is_unsigned = 0;
    b[n].buffer = &i.sd_packet_loss_concealment_value;
    b[n].is_null = &i.sd_packet_loss_concealment_null;
    n++;

    // jb_adaptive
    //
    b[n].buffer_type = MYSQL_TYPE_LONG;
    b[n].is_unsigned = 0;
    b[n].buffer = &i.jb_adaptive_value;
    b[n].is_null = &i.jb_adaptive_null;
    n++;

    // jb_nominal
    //
    b[n].buffer_type = MYSQL_TYPE_LONG;
    b[n].is_unsigned = 0;
    b[n].buffer = &i.jb_nominal_value;
    b[n].is_null = &i.jb_nominal_null;
    n++;

    // jb_max
    //
    b[n].buffer_type = MYSQL_TYPE_LONG;
    b[n].is_unsigned = 0;
    b[n].buffer = &i.jb_max_value;
    b[n].is_null = &i.jb_max_null;
    n++;

    // jb_abs_max
    //
    b[n].buffer_type = MYSQL_TYPE_LONG;
    b[n].is_unsigned = 0;
    b[n].buffer = &i.jb_abs_max_value;
    b[n].is_null = &i.jb_abs_max_null;
    n++;

    // pl_network_packet_loss_rate
    //
    b[n].buffer_type = MYSQL_TYPE_FLOAT;
    b[n].buffer = &i.pl_network_packet_loss_rate_value;
    b[n].is_null = &i.pl_network_packet_loss_rate_null;
    n++;

    // pl_jitter_buffer_discard_rate
    //
    b[n].buffer_type = MYSQL_TYPE_FLOAT;
    b[n].buffer = &i.pl_jitter_buffer_discard_rate_value;
    b[n].is_null = &i.pl_jitter_buffer_discard_rate_null;
    n++;

    // d_round_trip_delay
    //
    b[n].buffer_type = MYSQL_TYPE_LONG;
    b[n].is_unsigned = 0;
    b[n].buffer = &i.d_round_trip_delay_value;
    b[n].is_null = &i.d_round_trip_delay_null;
    n++;

    // d_end_system_delay
    //
    b[n].buffer_type = MYSQL_TYPE_LONG;
    b[n].is_unsigned = 0;
    b[n].buffer = &i.d_end_system_delay_value;
    b[n].is_null = &i.d_end_system_delay_null;
    n++;

    // d_symm_one_way_delay
    //
    b[n].buffer_type = MYSQL_TYPE_LONG;
    b[n].is_unsigned = 0;
    b[n].buffer = &i.d_symm_one_way_delay_value;
    b[n].is_null = &i.d_symm_one_way_delay_null;
    n++;

    // d_interarrival_jitter
    //
    b[n].buffer_type = MYSQL_TYPE_LONG;
    b[n].is_unsigned = 0;
    b[n].buffer = &i.d_interarrival_jitter_value;
    b[n].is_null = &i.d_interarrival_jitter_null;
    n++;

    // d_mean_abs_jitter
    //
    b[n].buffer_type = MYSQL_TYPE_LONG;
    b[n].is_unsigned = 0;
    b[n].buffer = &i.d_mean_abs_jitter_value;
    b[n].is_null = &i.d_mean_abs_jitter_null;
    n++;

    // s_level
    //
    b[n].buffer_type = MYSQL_TYPE_LONG;
    b[n].is_unsigned = 0;
    b[n].buffer = &i.s_level_value;
    b[n].is_null = &i.s_level_null;
    n++;

    // s_noise_level
    //
    b[n].buffer_type = MYSQL_TYPE_LONG;
    b[n].is_unsigned = 0;
    b[n].buffer = &i.s_noise_level_value;
    b[n].is_null = &i.s_noise_level_null;
    n++;

    // qe_moslq
    //
    b[n].buffer_type = MYSQL_TYPE_FLOAT;
    b[n].buffer = &i.qe_moslq_value;
    b[n].is_null = &i.qe_moslq_null;
    n++;

    // qe_moscq
    //
    b[n].buffer_type = MYSQL_TYPE_FLOAT;
    b[n].buffer = &i.qe_moscq_value;
    b[n].is_null = &i.qe_moscq_null;
    n++;

    // user_agent
    //
    b[n].buffer_type = MYSQL_TYPE_STRING;
    b[n].buffer = i.user_agent_value.data ();
    b[n].buffer_length = static_cast<unsigned long> (
      i.user_agent_value.capacity ());
    b[n].length = &i.user_agent_size;
    b[n].is_null = &i.user_agent_null;
    n++;
  }

  bool access::composite_value_traits< ::CallQualityStatisticsLogDb::reporting_content_metrics, id_mysql >::
  init (image_type& i,
        const value_type& o,
        mysql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mysql;

    bool grew (false);

    // ts_start
    //
    {
      ::time_t const& v =
        o.ts_start;

      bool is_null (false);
      mysql::value_traits<
          ::time_t,
          mysql::id_longlong >::set_image (
        i.ts_start_value, is_null, v);
      i.ts_start_null = is_null;
    }

    // ts_stop
    //
    {
      ::time_t const& v =
        o.ts_stop;

      bool is_null (false);
      mysql::value_traits<
          ::time_t,
          mysql::id_longlong >::set_image (
        i.ts_stop_value, is_null, v);
      i.ts_stop_null = is_null;
    }

    // sd_payload_type
    //
    {
      int const& v =
        o.sd_payload_type;

      bool is_null (false);
      mysql::value_traits<
          int,
          mysql::id_long >::set_image (
        i.sd_payload_type_value, is_null, v);
      i.sd_payload_type_null = is_null;
    }

    // sd_payload_desc
    //
    {
      ::std::string const& v =
        o.sd_payload_desc;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.sd_payload_desc_value.capacity ());
      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_image (
        i.sd_payload_desc_value,
        size,
        is_null,
        v);
      i.sd_payload_desc_null = is_null;
      i.sd_payload_desc_size = static_cast<unsigned long> (size);
      grew = grew || (cap != i.sd_payload_desc_value.capacity ());
    }

    // sd_sample_rate
    //
    {
      int const& v =
        o.sd_sample_rate;

      bool is_null (false);
      mysql::value_traits<
          int,
          mysql::id_long >::set_image (
        i.sd_sample_rate_value, is_null, v);
      i.sd_sample_rate_null = is_null;
    }

    // sd_frame_duration
    //
    {
      int const& v =
        o.sd_frame_duration;

      bool is_null (false);
      mysql::value_traits<
          int,
          mysql::id_long >::set_image (
        i.sd_frame_duration_value, is_null, v);
      i.sd_frame_duration_null = is_null;
    }

    // sd_fmtp
    //
    {
      ::std::string const& v =
        o.sd_fmtp;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.sd_fmtp_value.capacity ());
      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_image (
        i.sd_fmtp_value,
        size,
        is_null,
        v);
      i.sd_fmtp_null = is_null;
      i.sd_fmtp_size = static_cast<unsigned long> (size);
      grew = grew || (cap != i.sd_fmtp_value.capacity ());
    }

    // sd_packet_loss_concealment
    //
    {
      int const& v =
        o.sd_packet_loss_concealment;

      bool is_null (false);
      mysql::value_traits<
          int,
          mysql::id_long >::set_image (
        i.sd_packet_loss_concealment_value, is_null, v);
      i.sd_packet_loss_concealment_null = is_null;
    }

    // jb_adaptive
    //
    {
      int const& v =
        o.jb_adaptive;

      bool is_null (false);
      mysql::value_traits<
          int,
          mysql::id_long >::set_image (
        i.jb_adaptive_value, is_null, v);
      i.jb_adaptive_null = is_null;
    }

    // jb_nominal
    //
    {
      int const& v =
        o.jb_nominal;

      bool is_null (false);
      mysql::value_traits<
          int,
          mysql::id_long >::set_image (
        i.jb_nominal_value, is_null, v);
      i.jb_nominal_null = is_null;
    }

    // jb_max
    //
    {
      int const& v =
        o.jb_max;

      bool is_null (false);
      mysql::value_traits<
          int,
          mysql::id_long >::set_image (
        i.jb_max_value, is_null, v);
      i.jb_max_null = is_null;
    }

    // jb_abs_max
    //
    {
      int const& v =
        o.jb_abs_max;

      bool is_null (false);
      mysql::value_traits<
          int,
          mysql::id_long >::set_image (
        i.jb_abs_max_value, is_null, v);
      i.jb_abs_max_null = is_null;
    }

    // pl_network_packet_loss_rate
    //
    {
      float const& v =
        o.pl_network_packet_loss_rate;

      bool is_null (false);
      mysql::value_traits<
          float,
          mysql::id_float >::set_image (
        i.pl_network_packet_loss_rate_value, is_null, v);
      i.pl_network_packet_loss_rate_null = is_null;
    }

    // pl_jitter_buffer_discard_rate
    //
    {
      float const& v =
        o.pl_jitter_buffer_discard_rate;

      bool is_null (false);
      mysql::value_traits<
          float,
          mysql::id_float >::set_image (
        i.pl_jitter_buffer_discard_rate_value, is_null, v);
      i.pl_jitter_buffer_discard_rate_null = is_null;
    }

    // d_round_trip_delay
    //
    {
      int const& v =
        o.d_round_trip_delay;

      bool is_null (false);
      mysql::value_traits<
          int,
          mysql::id_long >::set_image (
        i.d_round_trip_delay_value, is_null, v);
      i.d_round_trip_delay_null = is_null;
    }

    // d_end_system_delay
    //
    {
      int const& v =
        o.d_end_system_delay;

      bool is_null (false);
      mysql::value_traits<
          int,
          mysql::id_long >::set_image (
        i.d_end_system_delay_value, is_null, v);
      i.d_end_system_delay_null = is_null;
    }

    // d_symm_one_way_delay
    //
    {
      int const& v =
        o.d_symm_one_way_delay;

      bool is_null (false);
      mysql::value_traits<
          int,
          mysql::id_long >::set_image (
        i.d_symm_one_way_delay_value, is_null, v);
      i.d_symm_one_way_delay_null = is_null;
    }

    // d_interarrival_jitter
    //
    {
      int const& v =
        o.d_interarrival_jitter;

      bool is_null (false);
      mysql::value_traits<
          int,
          mysql::id_long >::set_image (
        i.d_interarrival_jitter_value, is_null, v);
      i.d_interarrival_jitter_null = is_null;
    }

    // d_mean_abs_jitter
    //
    {
      int const& v =
        o.d_mean_abs_jitter;

      bool is_null (false);
      mysql::value_traits<
          int,
          mysql::id_long >::set_image (
        i.d_mean_abs_jitter_value, is_null, v);
      i.d_mean_abs_jitter_null = is_null;
    }

    // s_level
    //
    {
      int const& v =
        o.s_level;

      bool is_null (false);
      mysql::value_traits<
          int,
          mysql::id_long >::set_image (
        i.s_level_value, is_null, v);
      i.s_level_null = is_null;
    }

    // s_noise_level
    //
    {
      int const& v =
        o.s_noise_level;

      bool is_null (false);
      mysql::value_traits<
          int,
          mysql::id_long >::set_image (
        i.s_noise_level_value, is_null, v);
      i.s_noise_level_null = is_null;
    }

    // qe_moslq
    //
    {
      float const& v =
        o.qe_moslq;

      bool is_null (false);
      mysql::value_traits<
          float,
          mysql::id_float >::set_image (
        i.qe_moslq_value, is_null, v);
      i.qe_moslq_null = is_null;
    }

    // qe_moscq
    //
    {
      float const& v =
        o.qe_moscq;

      bool is_null (false);
      mysql::value_traits<
          float,
          mysql::id_float >::set_image (
        i.qe_moscq_value, is_null, v);
      i.qe_moscq_null = is_null;
    }

    // user_agent
    //
    {
      ::std::string const& v =
        o.user_agent;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.user_agent_value.capacity ());
      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_image (
        i.user_agent_value,
        size,
        is_null,
        v);
      i.user_agent_null = is_null;
      i.user_agent_size = static_cast<unsigned long> (size);
      grew = grew || (cap != i.user_agent_value.capacity ());
    }

    return grew;
  }

  void access::composite_value_traits< ::CallQualityStatisticsLogDb::reporting_content_metrics, id_mysql >::
  init (value_type& o,
        const image_type&  i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // ts_start
    //
    {
      ::time_t& v =
        o.ts_start;

      mysql::value_traits<
          ::time_t,
          mysql::id_longlong >::set_value (
        v,
        i.ts_start_value,
        i.ts_start_null);
    }

    // ts_stop
    //
    {
      ::time_t& v =
        o.ts_stop;

      mysql::value_traits<
          ::time_t,
          mysql::id_longlong >::set_value (
        v,
        i.ts_stop_value,
        i.ts_stop_null);
    }

    // sd_payload_type
    //
    {
      int& v =
        o.sd_payload_type;

      mysql::value_traits<
          int,
          mysql::id_long >::set_value (
        v,
        i.sd_payload_type_value,
        i.sd_payload_type_null);
    }

    // sd_payload_desc
    //
    {
      ::std::string& v =
        o.sd_payload_desc;

      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_value (
        v,
        i.sd_payload_desc_value,
        i.sd_payload_desc_size,
        i.sd_payload_desc_null);
    }

    // sd_sample_rate
    //
    {
      int& v =
        o.sd_sample_rate;

      mysql::value_traits<
          int,
          mysql::id_long >::set_value (
        v,
        i.sd_sample_rate_value,
        i.sd_sample_rate_null);
    }

    // sd_frame_duration
    //
    {
      int& v =
        o.sd_frame_duration;

      mysql::value_traits<
          int,
          mysql::id_long >::set_value (
        v,
        i.sd_frame_duration_value,
        i.sd_frame_duration_null);
    }

    // sd_fmtp
    //
    {
      ::std::string& v =
        o.sd_fmtp;

      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_value (
        v,
        i.sd_fmtp_value,
        i.sd_fmtp_size,
        i.sd_fmtp_null);
    }

    // sd_packet_loss_concealment
    //
    {
      int& v =
        o.sd_packet_loss_concealment;

      mysql::value_traits<
          int,
          mysql::id_long >::set_value (
        v,
        i.sd_packet_loss_concealment_value,
        i.sd_packet_loss_concealment_null);
    }

    // jb_adaptive
    //
    {
      int& v =
        o.jb_adaptive;

      mysql::value_traits<
          int,
          mysql::id_long >::set_value (
        v,
        i.jb_adaptive_value,
        i.jb_adaptive_null);
    }

    // jb_nominal
    //
    {
      int& v =
        o.jb_nominal;

      mysql::value_traits<
          int,
          mysql::id_long >::set_value (
        v,
        i.jb_nominal_value,
        i.jb_nominal_null);
    }

    // jb_max
    //
    {
      int& v =
        o.jb_max;

      mysql::value_traits<
          int,
          mysql::id_long >::set_value (
        v,
        i.jb_max_value,
        i.jb_max_null);
    }

    // jb_abs_max
    //
    {
      int& v =
        o.jb_abs_max;

      mysql::value_traits<
          int,
          mysql::id_long >::set_value (
        v,
        i.jb_abs_max_value,
        i.jb_abs_max_null);
    }

    // pl_network_packet_loss_rate
    //
    {
      float& v =
        o.pl_network_packet_loss_rate;

      mysql::value_traits<
          float,
          mysql::id_float >::set_value (
        v,
        i.pl_network_packet_loss_rate_value,
        i.pl_network_packet_loss_rate_null);
    }

    // pl_jitter_buffer_discard_rate
    //
    {
      float& v =
        o.pl_jitter_buffer_discard_rate;

      mysql::value_traits<
          float,
          mysql::id_float >::set_value (
        v,
        i.pl_jitter_buffer_discard_rate_value,
        i.pl_jitter_buffer_discard_rate_null);
    }

    // d_round_trip_delay
    //
    {
      int& v =
        o.d_round_trip_delay;

      mysql::value_traits<
          int,
          mysql::id_long >::set_value (
        v,
        i.d_round_trip_delay_value,
        i.d_round_trip_delay_null);
    }

    // d_end_system_delay
    //
    {
      int& v =
        o.d_end_system_delay;

      mysql::value_traits<
          int,
          mysql::id_long >::set_value (
        v,
        i.d_end_system_delay_value,
        i.d_end_system_delay_null);
    }

    // d_symm_one_way_delay
    //
    {
      int& v =
        o.d_symm_one_way_delay;

      mysql::value_traits<
          int,
          mysql::id_long >::set_value (
        v,
        i.d_symm_one_way_delay_value,
        i.d_symm_one_way_delay_null);
    }

    // d_interarrival_jitter
    //
    {
      int& v =
        o.d_interarrival_jitter;

      mysql::value_traits<
          int,
          mysql::id_long >::set_value (
        v,
        i.d_interarrival_jitter_value,
        i.d_interarrival_jitter_null);
    }

    // d_mean_abs_jitter
    //
    {
      int& v =
        o.d_mean_abs_jitter;

      mysql::value_traits<
          int,
          mysql::id_long >::set_value (
        v,
        i.d_mean_abs_jitter_value,
        i.d_mean_abs_jitter_null);
    }

    // s_level
    //
    {
      int& v =
        o.s_level;

      mysql::value_traits<
          int,
          mysql::id_long >::set_value (
        v,
        i.s_level_value,
        i.s_level_null);
    }

    // s_noise_level
    //
    {
      int& v =
        o.s_noise_level;

      mysql::value_traits<
          int,
          mysql::id_long >::set_value (
        v,
        i.s_noise_level_value,
        i.s_noise_level_null);
    }

    // qe_moslq
    //
    {
      float& v =
        o.qe_moslq;

      mysql::value_traits<
          float,
          mysql::id_float >::set_value (
        v,
        i.qe_moslq_value,
        i.qe_moslq_null);
    }

    // qe_moscq
    //
    {
      float& v =
        o.qe_moscq;

      mysql::value_traits<
          float,
          mysql::id_float >::set_value (
        v,
        i.qe_moscq_value,
        i.qe_moscq_null);
    }

    // user_agent
    //
    {
      ::std::string& v =
        o.user_agent;

      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_value (
        v,
        i.user_agent_value,
        i.user_agent_size,
        i.user_agent_null);
    }
  }

  // CallQualityStatisticsLogDb
  //

  struct access::object_traits_impl< ::CallQualityStatisticsLogDb, id_mysql >::extra_statement_cache_type
  {
    extra_statement_cache_type (
      mysql::connection&,
      image_type&,
      mysql::binding&,
      mysql::binding&)
    {
    }
  };

  bool access::object_traits_impl< ::CallQualityStatisticsLogDb, id_mysql >::
  grow (image_type& i,
        my_bool* t,
        std::size_t d)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // EventLogDb base
    //
    if (--d != 0)
    {
      if (base_traits::grow (*i.base, t + 71UL))
        i.base->version++;
    }

    // report_type
    //
    if (t[0UL])
    {
      i.report_type_value.capacity (i.report_type_size);
      grew = true;
    }

    // call_term_report
    //
    t[1UL] = 0;

    // call_id
    //
    if (t[2UL])
    {
      i.call_id_value.capacity (i.call_id_size);
      grew = true;
    }

    // orig_id
    //
    if (t[3UL])
    {
      i.orig_id_value.capacity (i.orig_id_size);
      grew = true;
    }

    // local_addr
    //
    if (composite_value_traits< ::CallQualityStatisticsLogDb::reporting_addr, id_mysql >::grow (
          i.local_addr_value, t + 4UL))
      grew = true;

    // remote_addr
    //
    if (composite_value_traits< ::CallQualityStatisticsLogDb::reporting_addr, id_mysql >::grow (
          i.remote_addr_value, t + 10UL))
      grew = true;

    // local_metrics
    //
    if (composite_value_traits< ::CallQualityStatisticsLogDb::reporting_content_metrics, id_mysql >::grow (
          i.local_metrics_value, t + 16UL))
      grew = true;

    // remote_metrics
    //
    if (composite_value_traits< ::CallQualityStatisticsLogDb::reporting_content_metrics, id_mysql >::grow (
          i.remote_metrics_value, t + 40UL))
      grew = true;

    // dialog_id
    //
    if (t[64UL])
    {
      i.dialog_id_value.capacity (i.dialog_id_size);
      grew = true;
    }

    // qos_name
    //
    if (t[65UL])
    {
      i.qos_name_value.capacity (i.qos_name_size);
      grew = true;
    }

    // qos_timestamp
    //
    if (t[66UL])
    {
      i.qos_timestamp_value.capacity (i.qos_timestamp_size);
      grew = true;
    }

    // qos_input_leg
    //
    if (t[67UL])
    {
      i.qos_input_leg_value.capacity (i.qos_input_leg_size);
      grew = true;
    }

    // qos_input
    //
    if (t[68UL])
    {
      i.qos_input_value.capacity (i.qos_input_size);
      grew = true;
    }

    // qos_output_leg
    //
    if (t[69UL])
    {
      i.qos_output_leg_value.capacity (i.qos_output_leg_size);
      grew = true;
    }

    // qos_output
    //
    if (t[70UL])
    {
      i.qos_output_value.capacity (i.qos_output_size);
      grew = true;
    }

    return grew;
  }

  void access::object_traits_impl< ::CallQualityStatisticsLogDb, id_mysql >::
  bind (MYSQL_BIND* b,
        const MYSQL_BIND* id,
        std::size_t id_size,
        image_type& i,
        mysql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mysql;

    std::size_t n (0);

    // id_
    //
    if (sk == statement_insert)
    {
      if (id != 0)
        std::memcpy (&b[n], id, id_size * sizeof (id[0]));
      n += id_size;
    }

    // report_type
    //
    b[n].buffer_type = MYSQL_TYPE_STRING;
    b[n].buffer = i.report_type_value.data ();
    b[n].buffer_length = static_cast<unsigned long> (
      i.report_type_value.capacity ());
    b[n].length = &i.report_type_size;
    b[n].is_null = &i.report_type_null;
    n++;

    // call_term_report
    //
    b[n].buffer_type = MYSQL_TYPE_TINY;
    b[n].is_unsigned = 0;
    b[n].buffer = &i.call_term_report_value;
    b[n].is_null = &i.call_term_report_null;
    n++;

    // call_id
    //
    b[n].buffer_type = MYSQL_TYPE_STRING;
    b[n].buffer = i.call_id_value.data ();
    b[n].buffer_length = static_cast<unsigned long> (
      i.call_id_value.capacity ());
    b[n].length = &i.call_id_size;
    b[n].is_null = &i.call_id_null;
    n++;

    // orig_id
    //
    b[n].buffer_type = MYSQL_TYPE_STRING;
    b[n].buffer = i.orig_id_value.data ();
    b[n].buffer_length = static_cast<unsigned long> (
      i.orig_id_value.capacity ());
    b[n].length = &i.orig_id_size;
    b[n].is_null = &i.orig_id_null;
    n++;

    // local_addr
    //
    composite_value_traits< ::CallQualityStatisticsLogDb::reporting_addr, id_mysql >::bind (
      b + n, i.local_addr_value, sk);
    n += 6UL;

    // remote_addr
    //
    composite_value_traits< ::CallQualityStatisticsLogDb::reporting_addr, id_mysql >::bind (
      b + n, i.remote_addr_value, sk);
    n += 6UL;

    // local_metrics
    //
    composite_value_traits< ::CallQualityStatisticsLogDb::reporting_content_metrics, id_mysql >::bind (
      b + n, i.local_metrics_value, sk);
    n += 24UL;

    // remote_metrics
    //
    composite_value_traits< ::CallQualityStatisticsLogDb::reporting_content_metrics, id_mysql >::bind (
      b + n, i.remote_metrics_value, sk);
    n += 24UL;

    // dialog_id
    //
    b[n].buffer_type = MYSQL_TYPE_STRING;
    b[n].buffer = i.dialog_id_value.data ();
    b[n].buffer_length = static_cast<unsigned long> (
      i.dialog_id_value.capacity ());
    b[n].length = &i.dialog_id_size;
    b[n].is_null = &i.dialog_id_null;
    n++;

    // qos_name
    //
    b[n].buffer_type = MYSQL_TYPE_STRING;
    b[n].buffer = i.qos_name_value.data ();
    b[n].buffer_length = static_cast<unsigned long> (
      i.qos_name_value.capacity ());
    b[n].length = &i.qos_name_size;
    b[n].is_null = &i.qos_name_null;
    n++;

    // qos_timestamp
    //
    b[n].buffer_type = MYSQL_TYPE_STRING;
    b[n].buffer = i.qos_timestamp_value.data ();
    b[n].buffer_length = static_cast<unsigned long> (
      i.qos_timestamp_value.capacity ());
    b[n].length = &i.qos_timestamp_size;
    b[n].is_null = &i.qos_timestamp_null;
    n++;

    // qos_input_leg
    //
    b[n].buffer_type = MYSQL_TYPE_STRING;
    b[n].buffer = i.qos_input_leg_value.data ();
    b[n].buffer_length = static_cast<unsigned long> (
      i.qos_input_leg_value.capacity ());
    b[n].length = &i.qos_input_leg_size;
    b[n].is_null = &i.qos_input_leg_null;
    n++;

    // qos_input
    //
    b[n].buffer_type = MYSQL_TYPE_STRING;
    b[n].buffer = i.qos_input_value.data ();
    b[n].buffer_length = static_cast<unsigned long> (
      i.qos_input_value.capacity ());
    b[n].length = &i.qos_input_size;
    b[n].is_null = &i.qos_input_null;
    n++;

    // qos_output_leg
    //
    b[n].buffer_type = MYSQL_TYPE_STRING;
    b[n].buffer = i.qos_output_leg_value.data ();
    b[n].buffer_length = static_cast<unsigned long> (
      i.qos_output_leg_value.capacity ());
    b[n].length = &i.qos_output_leg_size;
    b[n].is_null = &i.qos_output_leg_null;
    n++;

    // qos_output
    //
    b[n].buffer_type = MYSQL_TYPE_STRING;
    b[n].buffer = i.qos_output_value.data ();
    b[n].buffer_length = static_cast<unsigned long> (
      i.qos_output_value.capacity ());
    b[n].length = &i.qos_output_size;
    b[n].is_null = &i.qos_output_null;
    n++;

    // id_
    //
    if (sk == statement_update)
    {
      if (id != 0)
        std::memcpy (&b[n], id, id_size * sizeof (id[0]));
      n += id_size;
    }

    // EventLogDb base
    //
    if (sk == statement_select)
      base_traits::bind (b + n, *i.base, sk);
  }

  bool access::object_traits_impl< ::CallQualityStatisticsLogDb, id_mysql >::
  init (image_type& i,
        const object_type& o,
        mysql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mysql;

    bool grew (false);

    // report_type
    //
    {
      ::std::string const& v =
        o.report_type;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.report_type_value.capacity ());
      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_image (
        i.report_type_value,
        size,
        is_null,
        v);
      i.report_type_null = is_null;
      i.report_type_size = static_cast<unsigned long> (size);
      grew = grew || (cap != i.report_type_value.capacity ());
    }

    // call_term_report
    //
    {
      bool const& v =
        o.call_term_report;

      bool is_null (false);
      mysql::value_traits<
          bool,
          mysql::id_tiny >::set_image (
        i.call_term_report_value, is_null, v);
      i.call_term_report_null = is_null;
    }

    // call_id
    //
    {
      ::std::string const& v =
        o.call_id;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.call_id_value.capacity ());
      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_image (
        i.call_id_value,
        size,
        is_null,
        v);
      i.call_id_null = is_null;
      i.call_id_size = static_cast<unsigned long> (size);
      grew = grew || (cap != i.call_id_value.capacity ());
    }

    // orig_id
    //
    {
      ::std::string const& v =
        o.orig_id;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.orig_id_value.capacity ());
      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_image (
        i.orig_id_value,
        size,
        is_null,
        v);
      i.orig_id_null = is_null;
      i.orig_id_size = static_cast<unsigned long> (size);
      grew = grew || (cap != i.orig_id_value.capacity ());
    }

    // local_addr
    //
    {
      ::CallQualityStatisticsLogDb::reporting_addr const& v =
        o.local_addr;

      if (composite_value_traits< ::CallQualityStatisticsLogDb::reporting_addr, id_mysql >::init (
            i.local_addr_value,
            v,
            sk))
        grew = true;
    }

    // remote_addr
    //
    {
      ::CallQualityStatisticsLogDb::reporting_addr const& v =
        o.remote_addr;

      if (composite_value_traits< ::CallQualityStatisticsLogDb::reporting_addr, id_mysql >::init (
            i.remote_addr_value,
            v,
            sk))
        grew = true;
    }

    // local_metrics
    //
    {
      ::CallQualityStatisticsLogDb::reporting_content_metrics const& v =
        o.local_metrics;

      if (composite_value_traits< ::CallQualityStatisticsLogDb::reporting_content_metrics, id_mysql >::init (
            i.local_metrics_value,
            v,
            sk))
        grew = true;
    }

    // remote_metrics
    //
    {
      ::CallQualityStatisticsLogDb::reporting_content_metrics const& v =
        o.remote_metrics;

      if (composite_value_traits< ::CallQualityStatisticsLogDb::reporting_content_metrics, id_mysql >::init (
            i.remote_metrics_value,
            v,
            sk))
        grew = true;
    }

    // dialog_id
    //
    {
      ::std::string const& v =
        o.dialog_id;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.dialog_id_value.capacity ());
      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_image (
        i.dialog_id_value,
        size,
        is_null,
        v);
      i.dialog_id_null = is_null;
      i.dialog_id_size = static_cast<unsigned long> (size);
      grew = grew || (cap != i.dialog_id_value.capacity ());
    }

    // qos_name
    //
    {
      ::std::string const& v =
        o.qos_name;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.qos_name_value.capacity ());
      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_image (
        i.qos_name_value,
        size,
        is_null,
        v);
      i.qos_name_null = is_null;
      i.qos_name_size = static_cast<unsigned long> (size);
      grew = grew || (cap != i.qos_name_value.capacity ());
    }

    // qos_timestamp
    //
    {
      ::std::string const& v =
        o.qos_timestamp;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.qos_timestamp_value.capacity ());
      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_image (
        i.qos_timestamp_value,
        size,
        is_null,
        v);
      i.qos_timestamp_null = is_null;
      i.qos_timestamp_size = static_cast<unsigned long> (size);
      grew = grew || (cap != i.qos_timestamp_value.capacity ());
    }

    // qos_input_leg
    //
    {
      ::std::string const& v =
        o.qos_input_leg;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.qos_input_leg_value.capacity ());
      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_image (
        i.qos_input_leg_value,
        size,
        is_null,
        v);
      i.qos_input_leg_null = is_null;
      i.qos_input_leg_size = static_cast<unsigned long> (size);
      grew = grew || (cap != i.qos_input_leg_value.capacity ());
    }

    // qos_input
    //
    {
      ::std::string const& v =
        o.qos_input;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.qos_input_value.capacity ());
      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_image (
        i.qos_input_value,
        size,
        is_null,
        v);
      i.qos_input_null = is_null;
      i.qos_input_size = static_cast<unsigned long> (size);
      grew = grew || (cap != i.qos_input_value.capacity ());
    }

    // qos_output_leg
    //
    {
      ::std::string const& v =
        o.qos_output_leg;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.qos_output_leg_value.capacity ());
      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_image (
        i.qos_output_leg_value,
        size,
        is_null,
        v);
      i.qos_output_leg_null = is_null;
      i.qos_output_leg_size = static_cast<unsigned long> (size);
      grew = grew || (cap != i.qos_output_leg_value.capacity ());
    }

    // qos_output
    //
    {
      ::std::string const& v =
        o.qos_output;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.qos_output_value.capacity ());
      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_image (
        i.qos_output_value,
        size,
        is_null,
        v);
      i.qos_output_null = is_null;
      i.qos_output_size = static_cast<unsigned long> (size);
      grew = grew || (cap != i.qos_output_value.capacity ());
    }

    return grew;
  }

  void access::object_traits_impl< ::CallQualityStatisticsLogDb, id_mysql >::
  init (object_type& o,
        const image_type& i,
        database* db,
        std::size_t d)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // EventLogDb base
    //
    if (--d != 0)
      base_traits::init (o, *i.base, db);

    // report_type
    //
    {
      ::std::string& v =
        o.report_type;

      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_value (
        v,
        i.report_type_value,
        i.report_type_size,
        i.report_type_null);
    }

    // call_term_report
    //
    {
      bool& v =
        o.call_term_report;

      mysql::value_traits<
          bool,
          mysql::id_tiny >::set_value (
        v,
        i.call_term_report_value,
        i.call_term_report_null);
    }

    // call_id
    //
    {
      ::std::string& v =
        o.call_id;

      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_value (
        v,
        i.call_id_value,
        i.call_id_size,
        i.call_id_null);
    }

    // orig_id
    //
    {
      ::std::string& v =
        o.orig_id;

      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_value (
        v,
        i.orig_id_value,
        i.orig_id_size,
        i.orig_id_null);
    }

    // local_addr
    //
    {
      ::CallQualityStatisticsLogDb::reporting_addr& v =
        o.local_addr;

      composite_value_traits< ::CallQualityStatisticsLogDb::reporting_addr, id_mysql >::init (
        v,
        i.local_addr_value,
        db);
    }

    // remote_addr
    //
    {
      ::CallQualityStatisticsLogDb::reporting_addr& v =
        o.remote_addr;

      composite_value_traits< ::CallQualityStatisticsLogDb::reporting_addr, id_mysql >::init (
        v,
        i.remote_addr_value,
        db);
    }

    // local_metrics
    //
    {
      ::CallQualityStatisticsLogDb::reporting_content_metrics& v =
        o.local_metrics;

      composite_value_traits< ::CallQualityStatisticsLogDb::reporting_content_metrics, id_mysql >::init (
        v,
        i.local_metrics_value,
        db);
    }

    // remote_metrics
    //
    {
      ::CallQualityStatisticsLogDb::reporting_content_metrics& v =
        o.remote_metrics;

      composite_value_traits< ::CallQualityStatisticsLogDb::reporting_content_metrics, id_mysql >::init (
        v,
        i.remote_metrics_value,
        db);
    }

    // dialog_id
    //
    {
      ::std::string& v =
        o.dialog_id;

      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_value (
        v,
        i.dialog_id_value,
        i.dialog_id_size,
        i.dialog_id_null);
    }

    // qos_name
    //
    {
      ::std::string& v =
        o.qos_name;

      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_value (
        v,
        i.qos_name_value,
        i.qos_name_size,
        i.qos_name_null);
    }

    // qos_timestamp
    //
    {
      ::std::string& v =
        o.qos_timestamp;

      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_value (
        v,
        i.qos_timestamp_value,
        i.qos_timestamp_size,
        i.qos_timestamp_null);
    }

    // qos_input_leg
    //
    {
      ::std::string& v =
        o.qos_input_leg;

      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_value (
        v,
        i.qos_input_leg_value,
        i.qos_input_leg_size,
        i.qos_input_leg_null);
    }

    // qos_input
    //
    {
      ::std::string& v =
        o.qos_input;

      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_value (
        v,
        i.qos_input_value,
        i.qos_input_size,
        i.qos_input_null);
    }

    // qos_output_leg
    //
    {
      ::std::string& v =
        o.qos_output_leg;

      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_value (
        v,
        i.qos_output_leg_value,
        i.qos_output_leg_size,
        i.qos_output_leg_null);
    }

    // qos_output
    //
    {
      ::std::string& v =
        o.qos_output;

      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_value (
        v,
        i.qos_output_value,
        i.qos_output_size,
        i.qos_output_null);
    }
  }

  const access::object_traits_impl< ::CallQualityStatisticsLogDb, id_mysql >::info_type
  access::object_traits_impl< ::CallQualityStatisticsLogDb, id_mysql >::info (
    typeid (::CallQualityStatisticsLogDb),
    &object_traits_impl< ::EventLogDb, id_mysql >::info,
    0,
    "CallQualityStatisticsLogDb",
    &odb::create_impl< ::CallQualityStatisticsLogDb >,
    &odb::dispatch_impl< ::CallQualityStatisticsLogDb, id_mysql >,
    &statements_type::delayed_loader);

  static const access::object_traits_impl< ::CallQualityStatisticsLogDb, id_mysql >::entry_type
  polymorphic_entry_for_CallQualityStatisticsLogDb;

  const char access::object_traits_impl< ::CallQualityStatisticsLogDb, id_mysql >::persist_statement[] =
  "INSERT INTO `CallQualityStatisticsLog` "
  "(`id`, "
  "`report_type`, "
  "`call_term_report`, "
  "`call_id`, "
  "`orig_id`, "
  "`local_addr_id`, "
  "`local_addr_ip`, "
  "`local_addr_port`, "
  "`local_addr_ssrc`, "
  "`local_addr_group`, "
  "`local_addr_mac`, "
  "`remote_addr_id`, "
  "`remote_addr_ip`, "
  "`remote_addr_port`, "
  "`remote_addr_ssrc`, "
  "`remote_addr_group`, "
  "`remote_addr_mac`, "
  "`local_metrics_ts_start`, "
  "`local_metrics_ts_stop`, "
  "`local_metrics_sd_payload_type`, "
  "`local_metrics_sd_payload_desc`, "
  "`local_metrics_sd_sample_rate`, "
  "`local_metrics_sd_frame_duration`, "
  "`local_metrics_sd_fmtp`, "
  "`local_metrics_sd_packet_loss_concealment`, "
  "`local_metrics_jb_adaptive`, "
  "`local_metrics_jb_nominal`, "
  "`local_metrics_jb_max`, "
  "`local_metrics_jb_abs_max`, "
  "`local_metrics_pl_network_packet_loss_rate`, "
  "`local_metrics_pl_jitter_buffer_discard_rate`, "
  "`local_metrics_d_round_trip_delay`, "
  "`local_metrics_d_end_system_delay`, "
  "`local_metrics_d_symm_one_way_delay`, "
  "`local_metrics_d_interarrival_jitter`, "
  "`local_metrics_d_mean_abs_jitter`, "
  "`local_metrics_s_level`, "
  "`local_metrics_s_noise_level`, "
  "`local_metrics_qe_moslq`, "
  "`local_metrics_qe_moscq`, "
  "`local_metrics_user_agent`, "
  "`remote_metrics_ts_start`, "
  "`remote_metrics_ts_stop`, "
  "`remote_metrics_sd_payload_type`, "
  "`remote_metrics_sd_payload_desc`, "
  "`remote_metrics_sd_sample_rate`, "
  "`remote_metrics_sd_frame_duration`, "
  "`remote_metrics_sd_fmtp`, "
  "`remote_metrics_sd_packet_loss_concealment`, "
  "`remote_metrics_jb_adaptive`, "
  "`remote_metrics_jb_nominal`, "
  "`remote_metrics_jb_max`, "
  "`remote_metrics_jb_abs_max`, "
  "`remote_metrics_pl_network_packet_loss_rate`, "
  "`remote_metrics_pl_jitter_buffer_discard_rate`, "
  "`remote_metrics_d_round_trip_delay`, "
  "`remote_metrics_d_end_system_delay`, "
  "`remote_metrics_d_symm_one_way_delay`, "
  "`remote_metrics_d_interarrival_jitter`, "
  "`remote_metrics_d_mean_abs_jitter`, "
  "`remote_metrics_s_level`, "
  "`remote_metrics_s_noise_level`, "
  "`remote_metrics_qe_moslq`, "
  "`remote_metrics_qe_moscq`, "
  "`remote_metrics_user_agent`, "
  "`dialog_id`, "
  "`qos_name`, "
  "`qos_timestamp`, "
  "`qos_input_leg`, "
  "`qos_input`, "
  "`qos_output_leg`, "
  "`qos_output`) "
  "VALUES "
  "(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";

  const char* const access::object_traits_impl< ::CallQualityStatisticsLogDb, id_mysql >::find_statements[] =
  {
    "SELECT "
    "`CallQualityStatisticsLog`.`report_type`, "
    "`CallQualityStatisticsLog`.`call_term_report`, "
    "`CallQualityStatisticsLog`.`call_id`, "
    "`CallQualityStatisticsLog`.`orig_id`, "
    "`CallQualityStatisticsLog`.`local_addr_id`, "
    "`CallQualityStatisticsLog`.`local_addr_ip`, "
    "`CallQualityStatisticsLog`.`local_addr_port`, "
    "`CallQualityStatisticsLog`.`local_addr_ssrc`, "
    "`CallQualityStatisticsLog`.`local_addr_group`, "
    "`CallQualityStatisticsLog`.`local_addr_mac`, "
    "`CallQualityStatisticsLog`.`remote_addr_id`, "
    "`CallQualityStatisticsLog`.`remote_addr_ip`, "
    "`CallQualityStatisticsLog`.`remote_addr_port`, "
    "`CallQualityStatisticsLog`.`remote_addr_ssrc`, "
    "`CallQualityStatisticsLog`.`remote_addr_group`, "
    "`CallQualityStatisticsLog`.`remote_addr_mac`, "
    "`CallQualityStatisticsLog`.`local_metrics_ts_start`, "
    "`CallQualityStatisticsLog`.`local_metrics_ts_stop`, "
    "`CallQualityStatisticsLog`.`local_metrics_sd_payload_type`, "
    "`CallQualityStatisticsLog`.`local_metrics_sd_payload_desc`, "
    "`CallQualityStatisticsLog`.`local_metrics_sd_sample_rate`, "
    "`CallQualityStatisticsLog`.`local_metrics_sd_frame_duration`, "
    "`CallQualityStatisticsLog`.`local_metrics_sd_fmtp`, "
    "`CallQualityStatisticsLog`.`local_metrics_sd_packet_loss_concealment`, "
    "`CallQualityStatisticsLog`.`local_metrics_jb_adaptive`, "
    "`CallQualityStatisticsLog`.`local_metrics_jb_nominal`, "
    "`CallQualityStatisticsLog`.`local_metrics_jb_max`, "
    "`CallQualityStatisticsLog`.`local_metrics_jb_abs_max`, "
    "`CallQualityStatisticsLog`.`local_metrics_pl_network_packet_loss_rate`, "
    "`CallQualityStatisticsLog`.`local_metrics_pl_jitter_buffer_discard_rate`, "
    "`CallQualityStatisticsLog`.`local_metrics_d_round_trip_delay`, "
    "`CallQualityStatisticsLog`.`local_metrics_d_end_system_delay`, "
    "`CallQualityStatisticsLog`.`local_metrics_d_symm_one_way_delay`, "
    "`CallQualityStatisticsLog`.`local_metrics_d_interarrival_jitter`, "
    "`CallQualityStatisticsLog`.`local_metrics_d_mean_abs_jitter`, "
    "`CallQualityStatisticsLog`.`local_metrics_s_level`, "
    "`CallQualityStatisticsLog`.`local_metrics_s_noise_level`, "
    "`CallQualityStatisticsLog`.`local_metrics_qe_moslq`, "
    "`CallQualityStatisticsLog`.`local_metrics_qe_moscq`, "
    "`CallQualityStatisticsLog`.`local_metrics_user_agent`, "
    "`CallQualityStatisticsLog`.`remote_metrics_ts_start`, "
    "`CallQualityStatisticsLog`.`remote_metrics_ts_stop`, "
    "`CallQualityStatisticsLog`.`remote_metrics_sd_payload_type`, "
    "`CallQualityStatisticsLog`.`remote_metrics_sd_payload_desc`, "
    "`CallQualityStatisticsLog`.`remote_metrics_sd_sample_rate`, "
    "`CallQualityStatisticsLog`.`remote_metrics_sd_frame_duration`, "
    "`CallQualityStatisticsLog`.`remote_metrics_sd_fmtp`, "
    "`CallQualityStatisticsLog`.`remote_metrics_sd_packet_loss_concealment`, "
    "`CallQualityStatisticsLog`.`remote_metrics_jb_adaptive`, "
    "`CallQualityStatisticsLog`.`remote_metrics_jb_nominal`, "
    "`CallQualityStatisticsLog`.`remote_metrics_jb_max`, "
    "`CallQualityStatisticsLog`.`remote_metrics_jb_abs_max`, "
    "`CallQualityStatisticsLog`.`remote_metrics_pl_network_packet_loss_rate`, "
    "`CallQualityStatisticsLog`.`remote_metrics_pl_jitter_buffer_discard_rate`, "
    "`CallQualityStatisticsLog`.`remote_metrics_d_round_trip_delay`, "
    "`CallQualityStatisticsLog`.`remote_metrics_d_end_system_delay`, "
    "`CallQualityStatisticsLog`.`remote_metrics_d_symm_one_way_delay`, "
    "`CallQualityStatisticsLog`.`remote_metrics_d_interarrival_jitter`, "
    "`CallQualityStatisticsLog`.`remote_metrics_d_mean_abs_jitter`, "
    "`CallQualityStatisticsLog`.`remote_metrics_s_level`, "
    "`CallQualityStatisticsLog`.`remote_metrics_s_noise_level`, "
    "`CallQualityStatisticsLog`.`remote_metrics_qe_moslq`, "
    "`CallQualityStatisticsLog`.`remote_metrics_qe_moscq`, "
    "`CallQualityStatisticsLog`.`remote_metrics_user_agent`, "
    "`CallQualityStatisticsLog`.`dialog_id`, "
    "`CallQualityStatisticsLog`.`qos_name`, "
    "`CallQualityStatisticsLog`.`qos_timestamp`, "
    "`CallQualityStatisticsLog`.`qos_input_leg`, "
    "`CallQualityStatisticsLog`.`qos_input`, "
    "`CallQualityStatisticsLog`.`qos_output_leg`, "
    "`CallQualityStatisticsLog`.`qos_output`, "
    "`EventLog`.`from`, "
    "`EventLog`.`to`, "
    "`EventLog`.`userAgent`, "
    "`EventLog`.`date`, "
    "`EventLog`.`statusCode`, "
    "`EventLog`.`reason`, "
    "`EventLog`.`completed`, "
    "`EventLog`.`id`, "
    "`EventLog`.`typeid` "
    "FROM `CallQualityStatisticsLog` "
    "LEFT JOIN `EventLog` ON `EventLog`.`id`=`CallQualityStatisticsLog`.`id` "
    "WHERE `CallQualityStatisticsLog`.`id`=?",

    "SELECT "
    "`CallQualityStatisticsLog`.`report_type`, "
    "`CallQualityStatisticsLog`.`call_term_report`, "
    "`CallQualityStatisticsLog`.`call_id`, "
    "`CallQualityStatisticsLog`.`orig_id`, "
    "`CallQualityStatisticsLog`.`local_addr_id`, "
    "`CallQualityStatisticsLog`.`local_addr_ip`, "
    "`CallQualityStatisticsLog`.`local_addr_port`, "
    "`CallQualityStatisticsLog`.`local_addr_ssrc`, "
    "`CallQualityStatisticsLog`.`local_addr_group`, "
    "`CallQualityStatisticsLog`.`local_addr_mac`, "
    "`CallQualityStatisticsLog`.`remote_addr_id`, "
    "`CallQualityStatisticsLog`.`remote_addr_ip`, "
    "`CallQualityStatisticsLog`.`remote_addr_port`, "
    "`CallQualityStatisticsLog`.`remote_addr_ssrc`, "
    "`CallQualityStatisticsLog`.`remote_addr_group`, "
    "`CallQualityStatisticsLog`.`remote_addr_mac`, "
    "`CallQualityStatisticsLog`.`local_metrics_ts_start`, "
    "`CallQualityStatisticsLog`.`local_metrics_ts_stop`, "
    "`CallQualityStatisticsLog`.`local_metrics_sd_payload_type`, "
    "`CallQualityStatisticsLog`.`local_metrics_sd_payload_desc`, "
    "`CallQualityStatisticsLog`.`local_metrics_sd_sample_rate`, "
    "`CallQualityStatisticsLog`.`local_metrics_sd_frame_duration`, "
    "`CallQualityStatisticsLog`.`local_metrics_sd_fmtp`, "
    "`CallQualityStatisticsLog`.`local_metrics_sd_packet_loss_concealment`, "
    "`CallQualityStatisticsLog`.`local_metrics_jb_adaptive`, "
    "`CallQualityStatisticsLog`.`local_metrics_jb_nominal`, "
    "`CallQualityStatisticsLog`.`local_metrics_jb_max`, "
    "`CallQualityStatisticsLog`.`local_metrics_jb_abs_max`, "
    "`CallQualityStatisticsLog`.`local_metrics_pl_network_packet_loss_rate`, "
    "`CallQualityStatisticsLog`.`local_metrics_pl_jitter_buffer_discard_rate`, "
    "`CallQualityStatisticsLog`.`local_metrics_d_round_trip_delay`, "
    "`CallQualityStatisticsLog`.`local_metrics_d_end_system_delay`, "
    "`CallQualityStatisticsLog`.`local_metrics_d_symm_one_way_delay`, "
    "`CallQualityStatisticsLog`.`local_metrics_d_interarrival_jitter`, "
    "`CallQualityStatisticsLog`.`local_metrics_d_mean_abs_jitter`, "
    "`CallQualityStatisticsLog`.`local_metrics_s_level`, "
    "`CallQualityStatisticsLog`.`local_metrics_s_noise_level`, "
    "`CallQualityStatisticsLog`.`local_metrics_qe_moslq`, "
    "`CallQualityStatisticsLog`.`local_metrics_qe_moscq`, "
    "`CallQualityStatisticsLog`.`local_metrics_user_agent`, "
    "`CallQualityStatisticsLog`.`remote_metrics_ts_start`, "
    "`CallQualityStatisticsLog`.`remote_metrics_ts_stop`, "
    "`CallQualityStatisticsLog`.`remote_metrics_sd_payload_type`, "
    "`CallQualityStatisticsLog`.`remote_metrics_sd_payload_desc`, "
    "`CallQualityStatisticsLog`.`remote_metrics_sd_sample_rate`, "
    "`CallQualityStatisticsLog`.`remote_metrics_sd_frame_duration`, "
    "`CallQualityStatisticsLog`.`remote_metrics_sd_fmtp`, "
    "`CallQualityStatisticsLog`.`remote_metrics_sd_packet_loss_concealment`, "
    "`CallQualityStatisticsLog`.`remote_metrics_jb_adaptive`, "
    "`CallQualityStatisticsLog`.`remote_metrics_jb_nominal`, "
    "`CallQualityStatisticsLog`.`remote_metrics_jb_max`, "
    "`CallQualityStatisticsLog`.`remote_metrics_jb_abs_max`, "
    "`CallQualityStatisticsLog`.`remote_metrics_pl_network_packet_loss_rate`, "
    "`CallQualityStatisticsLog`.`remote_metrics_pl_jitter_buffer_discard_rate`, "
    "`CallQualityStatisticsLog`.`remote_metrics_d_round_trip_delay`, "
    "`CallQualityStatisticsLog`.`remote_metrics_d_end_system_delay`, "
    "`CallQualityStatisticsLog`.`remote_metrics_d_symm_one_way_delay`, "
    "`CallQualityStatisticsLog`.`remote_metrics_d_interarrival_jitter`, "
    "`CallQualityStatisticsLog`.`remote_metrics_d_mean_abs_jitter`, "
    "`CallQualityStatisticsLog`.`remote_metrics_s_level`, "
    "`CallQualityStatisticsLog`.`remote_metrics_s_noise_level`, "
    "`CallQualityStatisticsLog`.`remote_metrics_qe_moslq`, "
    "`CallQualityStatisticsLog`.`remote_metrics_qe_moscq`, "
    "`CallQualityStatisticsLog`.`remote_metrics_user_agent`, "
    "`CallQualityStatisticsLog`.`dialog_id`, "
    "`CallQualityStatisticsLog`.`qos_name`, "
    "`CallQualityStatisticsLog`.`qos_timestamp`, "
    "`CallQualityStatisticsLog`.`qos_input_leg`, "
    "`CallQualityStatisticsLog`.`qos_input`, "
    "`CallQualityStatisticsLog`.`qos_output_leg`, "
    "`CallQualityStatisticsLog`.`qos_output` "
    "FROM `CallQualityStatisticsLog` "
    "WHERE `CallQualityStatisticsLog`.`id`=?"
  };

  const std::size_t access::object_traits_impl< ::CallQualityStatisticsLogDb, id_mysql >::find_column_counts[] =
  {
    80UL,
    71UL
  };

  const char access::object_traits_impl< ::CallQualityStatisticsLogDb, id_mysql >::update_statement[] =
  "UPDATE `CallQualityStatisticsLog` "
  "SET "
  "`report_type`=?, "
  "`call_term_report`=?, "
  "`call_id`=?, "
  "`orig_id`=?, "
  "`local_addr_id`=?, "
  "`local_addr_ip`=?, "
  "`local_addr_port`=?, "
  "`local_addr_ssrc`=?, "
  "`local_addr_group`=?, "
  "`local_addr_mac`=?, "
  "`remote_addr_id`=?, "
  "`remote_addr_ip`=?, "
  "`remote_addr_port`=?, "
  "`remote_addr_ssrc`=?, "
  "`remote_addr_group`=?, "
  "`remote_addr_mac`=?, "
  "`local_metrics_ts_start`=?, "
  "`local_metrics_ts_stop`=?, "
  "`local_metrics_sd_payload_type`=?, "
  "`local_metrics_sd_payload_desc`=?, "
  "`local_metrics_sd_sample_rate`=?, "
  "`local_metrics_sd_frame_duration`=?, "
  "`local_metrics_sd_fmtp`=?, "
  "`local_metrics_sd_packet_loss_concealment`=?, "
  "`local_metrics_jb_adaptive`=?, "
  "`local_metrics_jb_nominal`=?, "
  "`local_metrics_jb_max`=?, "
  "`local_metrics_jb_abs_max`=?, "
  "`local_metrics_pl_network_packet_loss_rate`=?, "
  "`local_metrics_pl_jitter_buffer_discard_rate`=?, "
  "`local_metrics_d_round_trip_delay`=?, "
  "`local_metrics_d_end_system_delay`=?, "
  "`local_metrics_d_symm_one_way_delay`=?, "
  "`local_metrics_d_interarrival_jitter`=?, "
  "`local_metrics_d_mean_abs_jitter`=?, "
  "`local_metrics_s_level`=?, "
  "`local_metrics_s_noise_level`=?, "
  "`local_metrics_qe_moslq`=?, "
  "`local_metrics_qe_moscq`=?, "
  "`local_metrics_user_agent`=?, "
  "`remote_metrics_ts_start`=?, "
  "`remote_metrics_ts_stop`=?, "
  "`remote_metrics_sd_payload_type`=?, "
  "`remote_metrics_sd_payload_desc`=?, "
  "`remote_metrics_sd_sample_rate`=?, "
  "`remote_metrics_sd_frame_duration`=?, "
  "`remote_metrics_sd_fmtp`=?, "
  "`remote_metrics_sd_packet_loss_concealment`=?, "
  "`remote_metrics_jb_adaptive`=?, "
  "`remote_metrics_jb_nominal`=?, "
  "`remote_metrics_jb_max`=?, "
  "`remote_metrics_jb_abs_max`=?, "
  "`remote_metrics_pl_network_packet_loss_rate`=?, "
  "`remote_metrics_pl_jitter_buffer_discard_rate`=?, "
  "`remote_metrics_d_round_trip_delay`=?, "
  "`remote_metrics_d_end_system_delay`=?, "
  "`remote_metrics_d_symm_one_way_delay`=?, "
  "`remote_metrics_d_interarrival_jitter`=?, "
  "`remote_metrics_d_mean_abs_jitter`=?, "
  "`remote_metrics_s_level`=?, "
  "`remote_metrics_s_noise_level`=?, "
  "`remote_metrics_qe_moslq`=?, "
  "`remote_metrics_qe_moscq`=?, "
  "`remote_metrics_user_agent`=?, "
  "`dialog_id`=?, "
  "`qos_name`=?, "
  "`qos_timestamp`=?, "
  "`qos_input_leg`=?, "
  "`qos_input`=?, "
  "`qos_output_leg`=?, "
  "`qos_output`=? "
  "WHERE `id`=?";

  const char access::object_traits_impl< ::CallQualityStatisticsLogDb, id_mysql >::erase_statement[] =
  "DELETE FROM `CallQualityStatisticsLog` "
  "WHERE `id`=?";

  const char access::object_traits_impl< ::CallQualityStatisticsLogDb, id_mysql >::query_statement[] =
  "SELECT\n"
  "`CallQualityStatisticsLog`.`report_type`,\n"
  "`CallQualityStatisticsLog`.`call_term_report`,\n"
  "`CallQualityStatisticsLog`.`call_id`,\n"
  "`CallQualityStatisticsLog`.`orig_id`,\n"
  "`CallQualityStatisticsLog`.`local_addr_id`,\n"
  "`CallQualityStatisticsLog`.`local_addr_ip`,\n"
  "`CallQualityStatisticsLog`.`local_addr_port`,\n"
  "`CallQualityStatisticsLog`.`local_addr_ssrc`,\n"
  "`CallQualityStatisticsLog`.`local_addr_group`,\n"
  "`CallQualityStatisticsLog`.`local_addr_mac`,\n"
  "`CallQualityStatisticsLog`.`remote_addr_id`,\n"
  "`CallQualityStatisticsLog`.`remote_addr_ip`,\n"
  "`CallQualityStatisticsLog`.`remote_addr_port`,\n"
  "`CallQualityStatisticsLog`.`remote_addr_ssrc`,\n"
  "`CallQualityStatisticsLog`.`remote_addr_group`,\n"
  "`CallQualityStatisticsLog`.`remote_addr_mac`,\n"
  "`CallQualityStatisticsLog`.`local_metrics_ts_start`,\n"
  "`CallQualityStatisticsLog`.`local_metrics_ts_stop`,\n"
  "`CallQualityStatisticsLog`.`local_metrics_sd_payload_type`,\n"
  "`CallQualityStatisticsLog`.`local_metrics_sd_payload_desc`,\n"
  "`CallQualityStatisticsLog`.`local_metrics_sd_sample_rate`,\n"
  "`CallQualityStatisticsLog`.`local_metrics_sd_frame_duration`,\n"
  "`CallQualityStatisticsLog`.`local_metrics_sd_fmtp`,\n"
  "`CallQualityStatisticsLog`.`local_metrics_sd_packet_loss_concealment`,\n"
  "`CallQualityStatisticsLog`.`local_metrics_jb_adaptive`,\n"
  "`CallQualityStatisticsLog`.`local_metrics_jb_nominal`,\n"
  "`CallQualityStatisticsLog`.`local_metrics_jb_max`,\n"
  "`CallQualityStatisticsLog`.`local_metrics_jb_abs_max`,\n"
  "`CallQualityStatisticsLog`.`local_metrics_pl_network_packet_loss_rate`,\n"
  "`CallQualityStatisticsLog`.`local_metrics_pl_jitter_buffer_discard_rate`,\n"
  "`CallQualityStatisticsLog`.`local_metrics_d_round_trip_delay`,\n"
  "`CallQualityStatisticsLog`.`local_metrics_d_end_system_delay`,\n"
  "`CallQualityStatisticsLog`.`local_metrics_d_symm_one_way_delay`,\n"
  "`CallQualityStatisticsLog`.`local_metrics_d_interarrival_jitter`,\n"
  "`CallQualityStatisticsLog`.`local_metrics_d_mean_abs_jitter`,\n"
  "`CallQualityStatisticsLog`.`local_metrics_s_level`,\n"
  "`CallQualityStatisticsLog`.`local_metrics_s_noise_level`,\n"
  "`CallQualityStatisticsLog`.`local_metrics_qe_moslq`,\n"
  "`CallQualityStatisticsLog`.`local_metrics_qe_moscq`,\n"
  "`CallQualityStatisticsLog`.`local_metrics_user_agent`,\n"
  "`CallQualityStatisticsLog`.`remote_metrics_ts_start`,\n"
  "`CallQualityStatisticsLog`.`remote_metrics_ts_stop`,\n"
  "`CallQualityStatisticsLog`.`remote_metrics_sd_payload_type`,\n"
  "`CallQualityStatisticsLog`.`remote_metrics_sd_payload_desc`,\n"
  "`CallQualityStatisticsLog`.`remote_metrics_sd_sample_rate`,\n"
  "`CallQualityStatisticsLog`.`remote_metrics_sd_frame_duration`,\n"
  "`CallQualityStatisticsLog`.`remote_metrics_sd_fmtp`,\n"
  "`CallQualityStatisticsLog`.`remote_metrics_sd_packet_loss_concealment`,\n"
  "`CallQualityStatisticsLog`.`remote_metrics_jb_adaptive`,\n"
  "`CallQualityStatisticsLog`.`remote_metrics_jb_nominal`,\n"
  "`CallQualityStatisticsLog`.`remote_metrics_jb_max`,\n"
  "`CallQualityStatisticsLog`.`remote_metrics_jb_abs_max`,\n"
  "`CallQualityStatisticsLog`.`remote_metrics_pl_network_packet_loss_rate`,\n"
  "`CallQualityStatisticsLog`.`remote_metrics_pl_jitter_buffer_discard_rate`,\n"
  "`CallQualityStatisticsLog`.`remote_metrics_d_round_trip_delay`,\n"
  "`CallQualityStatisticsLog`.`remote_metrics_d_end_system_delay`,\n"
  "`CallQualityStatisticsLog`.`remote_metrics_d_symm_one_way_delay`,\n"
  "`CallQualityStatisticsLog`.`remote_metrics_d_interarrival_jitter`,\n"
  "`CallQualityStatisticsLog`.`remote_metrics_d_mean_abs_jitter`,\n"
  "`CallQualityStatisticsLog`.`remote_metrics_s_level`,\n"
  "`CallQualityStatisticsLog`.`remote_metrics_s_noise_level`,\n"
  "`CallQualityStatisticsLog`.`remote_metrics_qe_moslq`,\n"
  "`CallQualityStatisticsLog`.`remote_metrics_qe_moscq`,\n"
  "`CallQualityStatisticsLog`.`remote_metrics_user_agent`,\n"
  "`CallQualityStatisticsLog`.`dialog_id`,\n"
  "`CallQualityStatisticsLog`.`qos_name`,\n"
  "`CallQualityStatisticsLog`.`qos_timestamp`,\n"
  "`CallQualityStatisticsLog`.`qos_input_leg`,\n"
  "`CallQualityStatisticsLog`.`qos_input`,\n"
  "`CallQualityStatisticsLog`.`qos_output_leg`,\n"
  "`CallQualityStatisticsLog`.`qos_output`,\n"
  "`EventLog`.`from`,\n"
  "`EventLog`.`to`,\n"
  "`EventLog`.`userAgent`,\n"
  "`EventLog`.`date`,\n"
  "`EventLog`.`statusCode`,\n"
  "`EventLog`.`reason`,\n"
  "`EventLog`.`completed`,\n"
  "`EventLog`.`id`,\n"
  "`EventLog`.`typeid`\n"
  "FROM `CallQualityStatisticsLog`\n"
  "LEFT JOIN `EventLog` ON `EventLog`.`id`=`CallQualityStatisticsLog`.`id`";

  const char access::object_traits_impl< ::CallQualityStatisticsLogDb, id_mysql >::erase_query_statement[] =
  "DELETE FROM `CallQualityStatisticsLog`";

  const char access::object_traits_impl< ::CallQualityStatisticsLogDb, id_mysql >::table_name[] =
  "`CallQualityStatisticsLog`";

  void access::object_traits_impl< ::CallQualityStatisticsLogDb, id_mysql >::
  persist (database& db, object_type& obj, bool top, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (top);

    using namespace mysql;

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        pi.dispatch (info_type::call_persist, db, &obj, 0);
        return;
      }
    }

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    if (top)
      callback (db,
                static_cast<const object_type&> (obj),
                callback_event::pre_persist);

    base_traits::persist (db, obj, false, false);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());
    const binding& idb (sts.id_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    if (idb.version != sts.insert_id_binding_version () ||
        im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, idb.bind, idb.count, im, statement_insert);
      sts.insert_id_binding_version (idb.version);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    if (top)
      callback (db,
                static_cast<const object_type&> (obj),
                callback_event::post_persist);
  }

  void access::object_traits_impl< ::CallQualityStatisticsLogDb, id_mysql >::
  update (database& db, const object_type& obj, bool top, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (top);

    using namespace mysql;
    using mysql::update_statement;

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        pi.dispatch (info_type::call_update, db, &obj, 0);
        return;
      }
    }

    if (top)
      callback (db, obj, callback_event::pre_update);

    mysql::transaction& tr (mysql::transaction::current ());
    mysql::connection& conn (tr.connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    base_traits::update (db, obj, false, false);

    image_type& im (sts.image ());
    if (init (im, obj, statement_update))
      im.version++;

    const binding& idb (sts.id_image_binding ());
    binding& imb (sts.update_image_binding ());
    if (idb.version != sts.update_id_binding_version () ||
        im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, idb.bind, idb.count, im, statement_update);
      sts.update_id_binding_version (idb.version);
      sts.update_image_version (im.version);
      imb.version++;
    }

    update_statement& st (sts.update_statement ());
    if (st.execute () == 0)
      throw object_not_persistent ();

    if (top)
    {
      callback (db, obj, callback_event::post_update);
      pointer_cache_traits::update (db, obj);
    }
  }

  void access::object_traits_impl< ::CallQualityStatisticsLogDb, id_mysql >::
  erase (database& db, const id_type& id, bool top, bool dyn)
  {
    using namespace mysql;

    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (top);

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    if (dyn)
    {
      discriminator_type d;
      root_traits::discriminator_ (sts.root_statements (), id, &d);

      if (d != info.discriminator)
      {
        const info_type& pi (root_traits::map->find (d));

        if (!pi.derived (info))
          throw object_not_persistent ();

        pi.dispatch (info_type::call_erase, db, 0, &id);
        return;
      }
    }

    if (top)
    {
      id_image_type& i (sts.id_image ());
      init (i, id);

      binding& idb (sts.id_image_binding ());
      if (i.version != sts.id_image_version () || idb.version == 0)
      {
        bind (idb.bind, i);
        sts.id_image_version (i.version);
        idb.version++;
      }
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    base_traits::erase (db, id, false, false);

    if (top)
      pointer_cache_traits::erase (db, id);
  }

  void access::object_traits_impl< ::CallQualityStatisticsLogDb, id_mysql >::
  erase (database& db, const object_type& obj, bool top, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (top);

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        pi.dispatch (info_type::call_erase, db, &obj, 0);
        return;
      }
    }

    callback (db, obj, callback_event::pre_erase);
    erase (db, id (obj), true, false);
    callback (db, obj, callback_event::post_erase);
  }

  access::object_traits_impl< ::CallQualityStatisticsLogDb, id_mysql >::pointer_type
  access::object_traits_impl< ::CallQualityStatisticsLogDb, id_mysql >::
  find (database& db, const id_type& id)
  {
    using namespace mysql;

    {
      root_traits::pointer_type rp (pointer_cache_traits::find (db, id));

      if (!root_traits::pointer_traits::null_ptr (rp))
        return
          root_traits::pointer_traits::dynamic_pointer_cast<object_type> (rp);
    }

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());
    root_statements_type& rsts (sts.root_statements ());

    statements_type::auto_lock l (rsts);
    root_traits::discriminator_type d;

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
      d = root_traits::discriminator (rsts.image ());
    }
    else
      root_traits::discriminator_ (rsts, id, &d);

    const info_type& pi (
      d == info.discriminator ? info : root_traits::map->find (d));

    root_traits::pointer_type rp (pi.create ());
    pointer_type p (
      root_traits::pointer_traits::static_pointer_cast<object_type> (rp));
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, rp));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement (depth));
      ODB_POTENTIALLY_UNUSED (st);

      callback_event ce (callback_event::pre_load);
      pi.dispatch (info_type::call_callback, db, &obj, &ce);
      init (obj, sts.image (), &db);
      load_ (sts, obj, false);

      if (&pi != &info)
      {
        std::size_t d (depth);
        pi.dispatch (info_type::call_load, db, &obj, &d);
      }

      rsts.load_delayed (0);
      l.unlock ();
      ce = callback_event::post_load;
      pi.dispatch (info_type::call_callback, db, &obj, &ce);
      pointer_cache_traits::load (ig.position ());
    }
    else
      rsts.delay_load (id, obj, ig.position (), pi.delayed_loader);

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::CallQualityStatisticsLogDb, id_mysql >::
  find (database& db, const id_type& id, object_type& obj, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (dyn);

    using namespace mysql;

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        return pi.dispatch (info_type::call_find, db, &obj, &id);
      }
    }

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());
    root_statements_type& rsts (sts.root_statements ());

    statements_type::auto_lock l (rsts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement (depth));
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, false);
    rsts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::CallQualityStatisticsLogDb, id_mysql >::
  reload (database& db, object_type& obj, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (dyn);

    using namespace mysql;

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        return pi.dispatch (info_type::call_reload, db, &obj, 0);
      }
    }

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());
    root_statements_type& rsts (sts.root_statements ());

    statements_type::auto_lock l (rsts);

    const id_type& id  (
      obj.id_);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement (depth));
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, true);
    rsts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::CallQualityStatisticsLogDb, id_mysql >::
  find_ (statements_type& sts,
         const id_type* id,
         std::size_t d)
  {
    using namespace mysql;

    if (d == depth)
    {
      id_image_type& i (sts.id_image ());
      init (i, *id);

      binding& idb (sts.id_image_binding ());
      if (i.version != sts.id_image_version () || idb.version == 0)
      {
        bind (idb.bind, i);
        sts.id_image_version (i.version);
        idb.version++;
      }
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding (d));

    if (imb.version == 0 ||
        check_version (sts.select_image_versions (), im))
    {
      bind (imb.bind, 0, 0, im, statement_select);
      update_version (sts.select_image_versions (),
                      im,
                      sts.select_image_bindings ());
    }

    select_statement& st (sts.find_statement (d));

    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      if (grow (im, sts.select_image_truncated (), d))
        im.version++;

      if (check_version (sts.select_image_versions (), im))
      {
        bind (imb.bind, 0, 0, im, statement_select);
        update_version (sts.select_image_versions (),
                        im,
                        sts.select_image_bindings ());
        st.refetch ();
      }
    }

    return r != select_statement::no_data;
  }

  void access::object_traits_impl< ::CallQualityStatisticsLogDb, id_mysql >::
  load_ (statements_type& sts,
         object_type& obj,
         bool reload,
         std::size_t d)
  {
    ODB_POTENTIALLY_UNUSED (reload);

    if (--d != 0)
      base_traits::load_ (sts.base_statements (), obj, reload);
  }

  void access::object_traits_impl< ::CallQualityStatisticsLogDb, id_mysql >::
  load_ (database& db, root_type& r, std::size_t d)
  {
    using namespace mysql;

    object_type& obj (static_cast<object_type&> (r));
    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    d = depth - d;

    if (!find_ (sts, 0, d))
      throw object_not_persistent ();

    select_statement& st (sts.find_statement (d));
    ODB_POTENTIALLY_UNUSED (st);

    init (obj, sts.image (), &db, d);
    load_ (sts, obj, false, d);
  }

  result< access::object_traits_impl< ::CallQualityStatisticsLogDb, id_mysql >::object_type >
  access::object_traits_impl< ::CallQualityStatisticsLogDb, id_mysql >::
  query (database&, const query_base_type& q)
  {
    using namespace mysql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding (depth));

    if (imb.version == 0 ||
        check_version (sts.select_image_versions (), im))
    {
      bind (imb.bind, 0, 0, im, statement_select);
      update_version (sts.select_image_versions (),
                      im,
                      sts.select_image_bindings ());
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += "\n";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        text,
        true,
        true,
        q.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::polymorphic_object_result_impl<object_type> > r (
      new (shared) mysql::polymorphic_object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::CallQualityStatisticsLogDb, id_mysql >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace mysql;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      text,
      q.parameters_binding ());

    return st.execute ();
  }
}

namespace odb
{
  static bool
  create_schema (database& db, unsigned short pass, bool drop)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (pass);
    ODB_POTENTIALLY_UNUSED (drop);

    if (drop)
    {
      switch (pass)
      {
        case 1:
        {
          return true;
        }
        case 2:
        {
          db.execute ("DROP TABLE IF EXISTS `CallQualityStatisticsLog`");
          db.execute ("DROP TABLE IF EXISTS `AuthLog`");
          db.execute ("DROP TABLE IF EXISTS `MessageLog`");
          db.execute ("DROP TABLE IF EXISTS `CallLog`");
          db.execute ("DROP TABLE IF EXISTS `RegistrationLog`");
          db.execute ("DROP TABLE IF EXISTS `EventLog`");
          db.execute ("CREATE TABLE IF NOT EXISTS `schema_version` (\n"
                      "  `name` VARCHAR(255) NOT NULL PRIMARY KEY,\n"
                      "  `version` BIGINT UNSIGNED NOT NULL,\n"
                      "  `migration` TINYINT(1) NOT NULL)\n"
                      " ENGINE=InnoDB");
          db.execute ("DELETE FROM `schema_version`\n"
                      "  WHERE `name` = ''");
          return false;
        }
      }
    }
    else
    {
      switch (pass)
      {
        case 1:
        {
          db.execute ("CREATE TABLE `EventLog` (\n"
                      "  `from` TEXT NOT NULL,\n"
                      "  `to` TEXT NOT NULL,\n"
                      "  `userAgent` TEXT NOT NULL,\n"
                      "  `date` BIGINT NOT NULL,\n"
                      "  `statusCode` INT NOT NULL,\n"
                      "  `reason` TEXT NOT NULL,\n"
                      "  `completed` TINYINT(1) NOT NULL,\n"
                      "  `id` BIGINT UNSIGNED NOT NULL PRIMARY KEY AUTO_INCREMENT,\n"
                      "  `typeid` VARCHAR(255) NOT NULL)\n"
                      " ENGINE=InnoDB");
          db.execute ("CREATE TABLE `RegistrationLog` (\n"
                      "  `id` BIGINT UNSIGNED NOT NULL PRIMARY KEY,\n"
                      "  `type` ENUM('Register', 'Unregister', 'Expired') NOT NULL,\n"
                      "  `contacts` TEXT NOT NULL,\n"
                      "  `instanceId` TEXT NOT NULL,\n"
                      "  CONSTRAINT `RegistrationLog_id_fk`\n"
                      "    FOREIGN KEY (`id`)\n"
                      "    REFERENCES `EventLog` (`id`)\n"
                      "    ON DELETE CASCADE)\n"
                      " ENGINE=InnoDB");
          db.execute ("CREATE TABLE `CallLog` (\n"
                      "  `id` BIGINT UNSIGNED NOT NULL PRIMARY KEY,\n"
                      "  `cancelled` TINYINT(1) NOT NULL,\n"
                      "  CONSTRAINT `CallLog_id_fk`\n"
                      "    FOREIGN KEY (`id`)\n"
                      "    REFERENCES `EventLog` (`id`)\n"
                      "    ON DELETE CASCADE)\n"
                      " ENGINE=InnoDB");
          db.execute ("CREATE TABLE `MessageLog` (\n"
                      "  `id` BIGINT UNSIGNED NOT NULL PRIMARY KEY,\n"
                      "  `reportType` ENUM('Reception', 'Delivery') NOT NULL,\n"
                      "  `uri` TEXT NOT NULL,\n"
                      "  `mId` BIGINT UNSIGNED NOT NULL,\n"
                      "  CONSTRAINT `MessageLog_id_fk`\n"
                      "    FOREIGN KEY (`id`)\n"
                      "    REFERENCES `EventLog` (`id`)\n"
                      "    ON DELETE CASCADE)\n"
                      " ENGINE=InnoDB");
          db.execute ("CREATE TABLE `AuthLog` (\n"
                      "  `id` BIGINT UNSIGNED NOT NULL PRIMARY KEY,\n"
                      "  `origin` TEXT NOT NULL,\n"
                      "  `method` TEXT NOT NULL,\n"
                      "  `userExists` TINYINT(1) NOT NULL,\n"
                      "  CONSTRAINT `AuthLog_id_fk`\n"
                      "    FOREIGN KEY (`id`)\n"
                      "    REFERENCES `EventLog` (`id`)\n"
                      "    ON DELETE CASCADE)\n"
                      " ENGINE=InnoDB");
          db.execute ("CREATE TABLE `CallQualityStatisticsLog` (\n"
                      "  `id` BIGINT UNSIGNED NOT NULL PRIMARY KEY,\n"
                      "  `report_type` TEXT NOT NULL,\n"
                      "  `call_term_report` TINYINT(1) NOT NULL,\n"
                      "  `call_id` TEXT NOT NULL,\n"
                      "  `orig_id` TEXT NOT NULL,\n"
                      "  `local_addr_id` TEXT NOT NULL,\n"
                      "  `local_addr_ip` TEXT NOT NULL,\n"
                      "  `local_addr_port` INT NOT NULL,\n"
                      "  `local_addr_ssrc` INT UNSIGNED NOT NULL,\n"
                      "  `local_addr_group` TEXT NOT NULL,\n"
                      "  `local_addr_mac` TEXT NOT NULL,\n"
                      "  `remote_addr_id` TEXT NOT NULL,\n"
                      "  `remote_addr_ip` TEXT NOT NULL,\n"
                      "  `remote_addr_port` INT NOT NULL,\n"
                      "  `remote_addr_ssrc` INT UNSIGNED NOT NULL,\n"
                      "  `remote_addr_group` TEXT NOT NULL,\n"
                      "  `remote_addr_mac` TEXT NOT NULL,\n"
                      "  `local_metrics_ts_start` BIGINT NOT NULL,\n"
                      "  `local_metrics_ts_stop` BIGINT NOT NULL,\n"
                      "  `local_metrics_sd_payload_type` INT NOT NULL,\n"
                      "  `local_metrics_sd_payload_desc` TEXT NOT NULL,\n"
                      "  `local_metrics_sd_sample_rate` INT NOT NULL,\n"
                      "  `local_metrics_sd_frame_duration` INT NOT NULL,\n"
                      "  `local_metrics_sd_fmtp` TEXT NOT NULL,\n"
                      "  `local_metrics_sd_packet_loss_concealment` INT NOT NULL,\n"
                      "  `local_metrics_jb_adaptive` INT NOT NULL,\n"
                      "  `local_metrics_jb_nominal` INT NOT NULL,\n"
                      "  `local_metrics_jb_max` INT NOT NULL,\n"
                      "  `local_metrics_jb_abs_max` INT NOT NULL,\n"
                      "  `local_metrics_pl_network_packet_loss_rate` FLOAT NOT NULL,\n"
                      "  `local_metrics_pl_jitter_buffer_discard_rate` FLOAT NOT NULL,\n"
                      "  `local_metrics_d_round_trip_delay` INT NOT NULL,\n"
                      "  `local_metrics_d_end_system_delay` INT NOT NULL,\n"
                      "  `local_metrics_d_symm_one_way_delay` INT NOT NULL,\n"
                      "  `local_metrics_d_interarrival_jitter` INT NOT NULL,\n"
                      "  `local_metrics_d_mean_abs_jitter` INT NOT NULL,\n"
                      "  `local_metrics_s_level` INT NOT NULL,\n"
                      "  `local_metrics_s_noise_level` INT NOT NULL,\n"
                      "  `local_metrics_qe_moslq` FLOAT NOT NULL,\n"
                      "  `local_metrics_qe_moscq` FLOAT NOT NULL,\n"
                      "  `local_metrics_user_agent` TEXT NOT NULL,\n"
                      "  `remote_metrics_ts_start` BIGINT NOT NULL,\n"
                      "  `remote_metrics_ts_stop` BIGINT NOT NULL,\n"
                      "  `remote_metrics_sd_payload_type` INT NOT NULL,\n"
                      "  `remote_metrics_sd_payload_desc` TEXT NOT NULL,\n"
                      "  `remote_metrics_sd_sample_rate` INT NOT NULL,\n"
                      "  `remote_metrics_sd_frame_duration` INT NOT NULL,\n"
                      "  `remote_metrics_sd_fmtp` TEXT NOT NULL,\n"
                      "  `remote_metrics_sd_packet_loss_concealment` INT NOT NULL,\n"
                      "  `remote_metrics_jb_adaptive` INT NOT NULL,\n"
                      "  `remote_metrics_jb_nominal` INT NOT NULL,\n"
                      "  `remote_metrics_jb_max` INT NOT NULL,\n"
                      "  `remote_metrics_jb_abs_max` INT NOT NULL,\n"
                      "  `remote_metrics_pl_network_packet_loss_rate` FLOAT NOT NULL,\n"
                      "  `remote_metrics_pl_jitter_buffer_discard_rate` FLOAT NOT NULL,\n"
                      "  `remote_metrics_d_round_trip_delay` INT NOT NULL,\n"
                      "  `remote_metrics_d_end_system_delay` INT NOT NULL,\n"
                      "  `remote_metrics_d_symm_one_way_delay` INT NOT NULL,\n"
                      "  `remote_metrics_d_interarrival_jitter` INT NOT NULL,\n"
                      "  `remote_metrics_d_mean_abs_jitter` INT NOT NULL,\n"
                      "  `remote_metrics_s_level` INT NOT NULL,\n"
                      "  `remote_metrics_s_noise_level` INT NOT NULL,\n"
                      "  `remote_metrics_qe_moslq` FLOAT NOT NULL,\n"
                      "  `remote_metrics_qe_moscq` FLOAT NOT NULL,\n"
                      "  `remote_metrics_user_agent` TEXT NOT NULL,\n"
                      "  `dialog_id` TEXT NOT NULL,\n"
                      "  `qos_name` TEXT NOT NULL,\n"
                      "  `qos_timestamp` TEXT NOT NULL,\n"
                      "  `qos_input_leg` TEXT NOT NULL,\n"
                      "  `qos_input` TEXT NOT NULL,\n"
                      "  `qos_output_leg` TEXT NOT NULL,\n"
                      "  `qos_output` TEXT NOT NULL,\n"
                      "  CONSTRAINT `CallQualityStatisticsLog_id_fk`\n"
                      "    FOREIGN KEY (`id`)\n"
                      "    REFERENCES `EventLog` (`id`)\n"
                      "    ON DELETE CASCADE)\n"
                      " ENGINE=InnoDB");
          return true;
        }
        case 2:
        {
          db.execute ("CREATE TABLE IF NOT EXISTS `schema_version` (\n"
                      "  `name` VARCHAR(255) NOT NULL PRIMARY KEY,\n"
                      "  `version` BIGINT UNSIGNED NOT NULL,\n"
                      "  `migration` TINYINT(1) NOT NULL)\n"
                      " ENGINE=InnoDB");
          db.execute ("INSERT IGNORE INTO `schema_version` (\n"
                      "  `name`, `version`, `migration`)\n"
                      "  VALUES ('', 3, 0)");
          return false;
        }
      }
    }

    return false;
  }

  static const schema_catalog_create_entry
  create_schema_entry_ (
    id_mysql,
    "",
    &create_schema);

  static const schema_catalog_migrate_entry
  migrate_schema_entry_1_ (
    id_mysql,
    "",
    1ULL,
    0);

  static bool
  migrate_schema_2 (database& db, unsigned short pass, bool pre)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (pass);
    ODB_POTENTIALLY_UNUSED (pre);

    if (pre)
    {
      switch (pass)
      {
        case 1:
        {
          db.execute ("CREATE TABLE `EventLog` (\n"
                      "  `from` TEXT NOT NULL,\n"
                      "  `to` TEXT NOT NULL,\n"
                      "  `userAgent` TEXT NOT NULL,\n"
                      "  `date` BIGINT NOT NULL,\n"
                      "  `statusCode` INT NOT NULL,\n"
                      "  `reason` TEXT NOT NULL,\n"
                      "  `completed` TINYINT(1) NOT NULL,\n"
                      "  `id` BIGINT UNSIGNED NOT NULL PRIMARY KEY AUTO_INCREMENT,\n"
                      "  `typeid` VARCHAR(255) NOT NULL)\n"
                      " ENGINE=InnoDB");
          db.execute ("CREATE TABLE `RegistrationLog` (\n"
                      "  `id` BIGINT UNSIGNED NOT NULL PRIMARY KEY,\n"
                      "  `type` ENUM('Register', 'Unregister', 'Expired') NOT NULL,\n"
                      "  `contacts` TEXT NOT NULL,\n"
                      "  `instanceId` TEXT NOT NULL)\n"
                      " ENGINE=InnoDB");
          db.execute ("CREATE TABLE `CallLog` (\n"
                      "  `id` BIGINT UNSIGNED NOT NULL PRIMARY KEY,\n"
                      "  `cancelled` TINYINT(1) NOT NULL)\n"
                      " ENGINE=InnoDB");
          db.execute ("CREATE TABLE `MessageLog` (\n"
                      "  `id` BIGINT UNSIGNED NOT NULL PRIMARY KEY,\n"
                      "  `reportType` ENUM('Reception', 'Delivery') NOT NULL,\n"
                      "  `uri` TEXT NOT NULL,\n"
                      "  `mId` BIGINT UNSIGNED NOT NULL)\n"
                      " ENGINE=InnoDB");
          db.execute ("CREATE TABLE `AuthLog` (\n"
                      "  `id` BIGINT UNSIGNED NOT NULL PRIMARY KEY,\n"
                      "  `origin` TEXT NOT NULL,\n"
                      "  `method` TEXT NOT NULL,\n"
                      "  `userExists` TINYINT(1) NOT NULL)\n"
                      " ENGINE=InnoDB");
          db.execute ("CREATE TABLE `CallQualityStatisticsLog` (\n"
                      "  `id` BIGINT UNSIGNED NOT NULL PRIMARY KEY,\n"
                      "  `report_type` TEXT NOT NULL,\n"
                      "  `call_term_report` TINYINT(1) NOT NULL,\n"
                      "  `call_id` TEXT NOT NULL,\n"
                      "  `orig_id` TEXT NOT NULL,\n"
                      "  `local_addr_id` TEXT NOT NULL,\n"
                      "  `local_addr_ip` TEXT NOT NULL,\n"
                      "  `local_addr_port` INT NOT NULL,\n"
                      "  `local_addr_ssrc` INT UNSIGNED NOT NULL,\n"
                      "  `local_addr_group` TEXT NOT NULL,\n"
                      "  `local_addr_mac` TEXT NOT NULL,\n"
                      "  `remote_addr_id` TEXT NOT NULL,\n"
                      "  `remote_addr_ip` TEXT NOT NULL,\n"
                      "  `remote_addr_port` INT NOT NULL,\n"
                      "  `remote_addr_ssrc` INT UNSIGNED NOT NULL,\n"
                      "  `remote_addr_group` TEXT NOT NULL,\n"
                      "  `remote_addr_mac` TEXT NOT NULL,\n"
                      "  `local_metrics_ts_start` BIGINT NOT NULL,\n"
                      "  `local_metrics_ts_stop` BIGINT NOT NULL,\n"
                      "  `local_metrics_sd_payload_type` INT NOT NULL,\n"
                      "  `local_metrics_sd_payload_desc` TEXT NOT NULL,\n"
                      "  `local_metrics_sd_sample_rate` INT NOT NULL,\n"
                      "  `local_metrics_sd_frame_duration` INT NOT NULL,\n"
                      "  `local_metrics_sd_fmtp` TEXT NOT NULL,\n"
                      "  `local_metrics_sd_packet_loss_concealment` INT NOT NULL,\n"
                      "  `local_metrics_jb_adaptive` INT NOT NULL,\n"
                      "  `local_metrics_jb_nominal` INT NOT NULL,\n"
                      "  `local_metrics_jb_max` INT NOT NULL,\n"
                      "  `local_metrics_jb_abs_max` INT NOT NULL,\n"
                      "  `local_metrics_pl_network_packet_loss_rate` FLOAT NOT NULL,\n"
                      "  `local_metrics_pl_jitter_buffer_discard_rate` FLOAT NOT NULL,\n"
                      "  `local_metrics_d_round_trip_delay` INT NOT NULL,\n"
                      "  `local_metrics_d_end_system_delay` INT NOT NULL,\n"
                      "  `local_metrics_d_symm_one_way_delay` INT NOT NULL,\n"
                      "  `local_metrics_d_interarrival_jitter` INT NOT NULL,\n"
                      "  `local_metrics_d_mean_abs_jitter` INT NOT NULL,\n"
                      "  `local_metrics_s_level` INT NOT NULL,\n"
                      "  `local_metrics_s_noise_level` INT NOT NULL,\n"
                      "  `local_metrics_qe_moslq` FLOAT NOT NULL,\n"
                      "  `local_metrics_qe_moscq` FLOAT NOT NULL,\n"
                      "  `remote_metrics_ts_start` BIGINT NOT NULL,\n"
                      "  `remote_metrics_ts_stop` BIGINT NOT NULL,\n"
                      "  `remote_metrics_sd_payload_type` INT NOT NULL,\n"
                      "  `remote_metrics_sd_payload_desc` TEXT NOT NULL,\n"
                      "  `remote_metrics_sd_sample_rate` INT NOT NULL,\n"
                      "  `remote_metrics_sd_frame_duration` INT NOT NULL,\n"
                      "  `remote_metrics_sd_fmtp` TEXT NOT NULL,\n"
                      "  `remote_metrics_sd_packet_loss_concealment` INT NOT NULL,\n"
                      "  `remote_metrics_jb_adaptive` INT NOT NULL,\n"
                      "  `remote_metrics_jb_nominal` INT NOT NULL,\n"
                      "  `remote_metrics_jb_max` INT NOT NULL,\n"
                      "  `remote_metrics_jb_abs_max` INT NOT NULL,\n"
                      "  `remote_metrics_pl_network_packet_loss_rate` FLOAT NOT NULL,\n"
                      "  `remote_metrics_pl_jitter_buffer_discard_rate` FLOAT NOT NULL,\n"
                      "  `remote_metrics_d_round_trip_delay` INT NOT NULL,\n"
                      "  `remote_metrics_d_end_system_delay` INT NOT NULL,\n"
                      "  `remote_metrics_d_symm_one_way_delay` INT NOT NULL,\n"
                      "  `remote_metrics_d_interarrival_jitter` INT NOT NULL,\n"
                      "  `remote_metrics_d_mean_abs_jitter` INT NOT NULL,\n"
                      "  `remote_metrics_s_level` INT NOT NULL,\n"
                      "  `remote_metrics_s_noise_level` INT NOT NULL,\n"
                      "  `remote_metrics_qe_moslq` FLOAT NOT NULL,\n"
                      "  `remote_metrics_qe_moscq` FLOAT NOT NULL,\n"
                      "  `dialog_id` TEXT NOT NULL,\n"
                      "  `qos_name` TEXT NOT NULL,\n"
                      "  `qos_timestamp` TEXT NOT NULL,\n"
                      "  `qos_input_leg` TEXT NOT NULL,\n"
                      "  `qos_input` TEXT NOT NULL,\n"
                      "  `qos_output_leg` TEXT NOT NULL,\n"
                      "  `qos_output` TEXT NOT NULL)\n"
                      " ENGINE=InnoDB");
          return true;
        }
        case 2:
        {
          db.execute ("ALTER TABLE `RegistrationLog`\n"
                      "  ADD CONSTRAINT `RegistrationLog_id_fk`\n"
                      "    FOREIGN KEY (`id`)\n"
                      "    REFERENCES `EventLog` (`id`)\n"
                      "    ON DELETE CASCADE");
          db.execute ("ALTER TABLE `CallLog`\n"
                      "  ADD CONSTRAINT `CallLog_id_fk`\n"
                      "    FOREIGN KEY (`id`)\n"
                      "    REFERENCES `EventLog` (`id`)\n"
                      "    ON DELETE CASCADE");
          db.execute ("ALTER TABLE `MessageLog`\n"
                      "  ADD CONSTRAINT `MessageLog_id_fk`\n"
                      "    FOREIGN KEY (`id`)\n"
                      "    REFERENCES `EventLog` (`id`)\n"
                      "    ON DELETE CASCADE");
          db.execute ("ALTER TABLE `AuthLog`\n"
                      "  ADD CONSTRAINT `AuthLog_id_fk`\n"
                      "    FOREIGN KEY (`id`)\n"
                      "    REFERENCES `EventLog` (`id`)\n"
                      "    ON DELETE CASCADE");
          db.execute ("ALTER TABLE `CallQualityStatisticsLog`\n"
                      "  ADD CONSTRAINT `CallQualityStatisticsLog_id_fk`\n"
                      "    FOREIGN KEY (`id`)\n"
                      "    REFERENCES `EventLog` (`id`)\n"
                      "    ON DELETE CASCADE");
          db.execute ("UPDATE `schema_version`\n"
                      "  SET `version` = 2, `migration` = 1\n"
                      "  WHERE `name` = ''");
          return false;
        }
      }
    }
    else
    {
      switch (pass)
      {
        case 1:
        {
          return true;
        }
        case 2:
        {
          db.execute ("UPDATE `schema_version`\n"
                      "  SET `migration` = 0\n"
                      "  WHERE `name` = ''");
          return false;
        }
      }
    }

    return false;
  }

  static const schema_catalog_migrate_entry
  migrate_schema_entry_2_ (
    id_mysql,
    "",
    2ULL,
    &migrate_schema_2);

  static bool
  migrate_schema_3 (database& db, unsigned short pass, bool pre)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (pass);
    ODB_POTENTIALLY_UNUSED (pre);

    if (pre)
    {
      switch (pass)
      {
        case 1:
        {
          db.execute ("ALTER TABLE `CallQualityStatisticsLog`\n"
                      "  ADD COLUMN `local_metrics_user_agent` TEXT NULL,\n"
                      "  ADD COLUMN `remote_metrics_user_agent` TEXT NULL");
          return true;
        }
        case 2:
        {
          db.execute ("UPDATE `schema_version`\n"
                      "  SET `version` = 3, `migration` = 1\n"
                      "  WHERE `name` = ''");
          return false;
        }
      }
    }
    else
    {
      switch (pass)
      {
        case 1:
        {
          return true;
        }
        case 2:
        {
          db.execute ("ALTER TABLE `CallQualityStatisticsLog`\n"
                      "  MODIFY COLUMN `local_metrics_user_agent` TEXT NOT NULL,\n"
                      "  MODIFY COLUMN `remote_metrics_user_agent` TEXT NOT NULL");
          db.execute ("UPDATE `schema_version`\n"
                      "  SET `migration` = 0\n"
                      "  WHERE `name` = ''");
          return false;
        }
      }
    }

    return false;
  }

  static const schema_catalog_migrate_entry
  migrate_schema_entry_3_ (
    id_mysql,
    "",
    3ULL,
    &migrate_schema_3);
}

#include <odb/post.hxx>
