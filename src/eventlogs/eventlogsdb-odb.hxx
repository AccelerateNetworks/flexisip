// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#ifndef EVENTLOGSDB_ODB_HXX
#define EVENTLOGSDB_ODB_HXX

#include <odb/version.hxx>

#if (ODB_VERSION != 20300UL)
#error ODB runtime version mismatch
#endif

#include <odb/pre.hxx>

#include "eventlogsdb.hh"

#include <memory>
#include <cstddef>
#include <string>

#include <odb/core.hxx>
#include <odb/traits.hxx>
#include <odb/callback.hxx>
#include <odb/wrapper-traits.hxx>
#include <odb/pointer-traits.hxx>
#include <odb/container-traits.hxx>
#include <odb/no-op-cache-traits.hxx>
#include <odb/polymorphic-info.hxx>
#include <odb/result.hxx>
#include <odb/polymorphic-object-result.hxx>

#include <odb/details/unused.hxx>
#include <odb/details/shared-ptr.hxx>

namespace odb
{
  // EventLogDb
  //
  template <>
  struct class_traits< ::EventLogDb >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::EventLogDb >
  {
    public:
    typedef ::EventLogDb object_type;
    typedef ::EventLogDb* pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = true;

    typedef ::EventLogDb root_type;
    typedef ::std::string discriminator_type;
    typedef polymorphic_map<object_type> map_type;
    typedef polymorphic_concrete_info<object_type> info_type;

    static const std::size_t depth = 1UL;

    typedef long unsigned int id_type;

    static const bool auto_id = true;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    no_op_pointer_cache_traits<pointer_type>
    pointer_cache_traits;

    typedef
    no_op_reference_cache_traits<object_type>
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // RegistrationLogDb
  //
  template <>
  struct class_traits< ::RegistrationLogDb >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::RegistrationLogDb >
  {
    public:
    typedef ::RegistrationLogDb object_type;
    typedef ::RegistrationLogDb* pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = true;

    typedef ::EventLogDb root_type;
    typedef ::EventLogDb base_type;
    typedef object_traits<root_type>::discriminator_type discriminator_type;
    typedef polymorphic_concrete_info<root_type> info_type;

    static const std::size_t depth = 2UL;

    typedef object_traits< ::EventLogDb >::id_type id_type;

    static const bool auto_id = false;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    no_op_pointer_cache_traits<object_traits<root_type>::pointer_type>
    pointer_cache_traits;

    typedef
    no_op_reference_cache_traits<root_type>
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // CallLogDb
  //
  template <>
  struct class_traits< ::CallLogDb >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::CallLogDb >
  {
    public:
    typedef ::CallLogDb object_type;
    typedef ::CallLogDb* pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = true;

    typedef ::EventLogDb root_type;
    typedef ::EventLogDb base_type;
    typedef object_traits<root_type>::discriminator_type discriminator_type;
    typedef polymorphic_concrete_info<root_type> info_type;

    static const std::size_t depth = 2UL;

    typedef object_traits< ::EventLogDb >::id_type id_type;

    static const bool auto_id = false;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    no_op_pointer_cache_traits<object_traits<root_type>::pointer_type>
    pointer_cache_traits;

    typedef
    no_op_reference_cache_traits<root_type>
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // MessageLogDb
  //
  template <>
  struct class_traits< ::MessageLogDb >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::MessageLogDb >
  {
    public:
    typedef ::MessageLogDb object_type;
    typedef ::MessageLogDb* pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = true;

    typedef ::EventLogDb root_type;
    typedef ::EventLogDb base_type;
    typedef object_traits<root_type>::discriminator_type discriminator_type;
    typedef polymorphic_concrete_info<root_type> info_type;

    static const std::size_t depth = 2UL;

    typedef object_traits< ::EventLogDb >::id_type id_type;

    static const bool auto_id = false;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    no_op_pointer_cache_traits<object_traits<root_type>::pointer_type>
    pointer_cache_traits;

    typedef
    no_op_reference_cache_traits<root_type>
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // AuthLogDb
  //
  template <>
  struct class_traits< ::AuthLogDb >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::AuthLogDb >
  {
    public:
    typedef ::AuthLogDb object_type;
    typedef ::AuthLogDb* pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = true;

    typedef ::EventLogDb root_type;
    typedef ::EventLogDb base_type;
    typedef object_traits<root_type>::discriminator_type discriminator_type;
    typedef polymorphic_concrete_info<root_type> info_type;

    static const std::size_t depth = 2UL;

    typedef object_traits< ::EventLogDb >::id_type id_type;

    static const bool auto_id = false;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    no_op_pointer_cache_traits<object_traits<root_type>::pointer_type>
    pointer_cache_traits;

    typedef
    no_op_reference_cache_traits<root_type>
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // CallQualityStatisticsLogDb
  //
  template <>
  struct class_traits< ::CallQualityStatisticsLogDb >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::CallQualityStatisticsLogDb >
  {
    public:
    typedef ::CallQualityStatisticsLogDb object_type;
    typedef ::CallQualityStatisticsLogDb* pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = true;

    typedef ::EventLogDb root_type;
    typedef ::EventLogDb base_type;
    typedef object_traits<root_type>::discriminator_type discriminator_type;
    typedef polymorphic_concrete_info<root_type> info_type;

    static const std::size_t depth = 2UL;

    typedef object_traits< ::EventLogDb >::id_type id_type;

    static const bool auto_id = false;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    no_op_pointer_cache_traits<object_traits<root_type>::pointer_type>
    pointer_cache_traits;

    typedef
    no_op_reference_cache_traits<root_type>
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };
}

#include <odb/details/buffer.hxx>

#include <odb/mysql/version.hxx>
#include <odb/mysql/forward.hxx>
#include <odb/mysql/binding.hxx>
#include <odb/mysql/mysql-types.hxx>
#include <odb/mysql/query.hxx>

namespace odb
{
  // EventLogDb
  //
  template <typename A>
  struct query_columns< ::EventLogDb, id_mysql, A >
  {
    // from
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    from_type_;

    static const from_type_ from;

    // to
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    to_type_;

    static const to_type_ to;

    // userAgent
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    userAgent_type_;

    static const userAgent_type_ userAgent;

    // date
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::time_t,
        mysql::id_longlong >::query_type,
      mysql::id_longlong >
    date_type_;

    static const date_type_ date;

    // statusCode
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        int,
        mysql::id_long >::query_type,
      mysql::id_long >
    statusCode_type_;

    static const statusCode_type_ statusCode;

    // reason
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    reason_type_;

    static const reason_type_ reason;

    // completed
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        bool,
        mysql::id_tiny >::query_type,
      mysql::id_tiny >
    completed_type_;

    static const completed_type_ completed;

    // id
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        long unsigned int,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    id_type_;

    static const id_type_ id;

    // typeid_
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    typeid__type_;

    static const typeid__type_ typeid_;
  };

  template <typename A>
  const typename query_columns< ::EventLogDb, id_mysql, A >::from_type_
  query_columns< ::EventLogDb, id_mysql, A >::
  from (A::table_name, "`from`", 0);

  template <typename A>
  const typename query_columns< ::EventLogDb, id_mysql, A >::to_type_
  query_columns< ::EventLogDb, id_mysql, A >::
  to (A::table_name, "`to`", 0);

  template <typename A>
  const typename query_columns< ::EventLogDb, id_mysql, A >::userAgent_type_
  query_columns< ::EventLogDb, id_mysql, A >::
  userAgent (A::table_name, "`userAgent`", 0);

  template <typename A>
  const typename query_columns< ::EventLogDb, id_mysql, A >::date_type_
  query_columns< ::EventLogDb, id_mysql, A >::
  date (A::table_name, "`date`", 0);

  template <typename A>
  const typename query_columns< ::EventLogDb, id_mysql, A >::statusCode_type_
  query_columns< ::EventLogDb, id_mysql, A >::
  statusCode (A::table_name, "`statusCode`", 0);

  template <typename A>
  const typename query_columns< ::EventLogDb, id_mysql, A >::reason_type_
  query_columns< ::EventLogDb, id_mysql, A >::
  reason (A::table_name, "`reason`", 0);

  template <typename A>
  const typename query_columns< ::EventLogDb, id_mysql, A >::completed_type_
  query_columns< ::EventLogDb, id_mysql, A >::
  completed (A::table_name, "`completed`", 0);

  template <typename A>
  const typename query_columns< ::EventLogDb, id_mysql, A >::id_type_
  query_columns< ::EventLogDb, id_mysql, A >::
  id (A::table_name, "`id`", 0);

  template <typename A>
  const typename query_columns< ::EventLogDb, id_mysql, A >::typeid__type_
  query_columns< ::EventLogDb, id_mysql, A >::
  typeid_ (A::table_name, "`typeid`", 0);

  template <typename A>
  struct pointer_query_columns< ::EventLogDb, id_mysql, A >:
    query_columns< ::EventLogDb, id_mysql, A >
  {
  };

  template <>
  class access::object_traits_impl< ::EventLogDb, id_mysql >:
    public access::object_traits< ::EventLogDb >
  {
    public:
    typedef polymorphic_entry<object_type, id_mysql> entry_type;
    typedef object_traits_impl<root_type, id_mysql> root_traits;

    struct discriminator_image_type
    {
      details::buffer discriminator_value;
      unsigned long discriminator_size;
      my_bool discriminator_null;

      std::size_t version;
    };

    struct id_image_type
    {
      unsigned long long id_value;
      my_bool id_null;

      std::size_t version;
    };

    static map_type* map;
    static const info_type info;

    struct image_type
    {
      // from
      //
      details::buffer from_value;
      unsigned long from_size;
      my_bool from_null;

      // to
      //
      details::buffer to_value;
      unsigned long to_size;
      my_bool to_null;

      // userAgent
      //
      details::buffer userAgent_value;
      unsigned long userAgent_size;
      my_bool userAgent_null;

      // date
      //
      long long date_value;
      my_bool date_null;

      // statusCode
      //
      int statusCode_value;
      my_bool statusCode_null;

      // reason
      //
      details::buffer reason_value;
      unsigned long reason_size;
      my_bool reason_null;

      // completed
      //
      signed char completed_value;
      my_bool completed_null;

      // id_
      //
      unsigned long long id_value;
      my_bool id_null;

      // typeid_
      //
      details::buffer typeid_value;
      unsigned long typeid_size;
      my_bool typeid_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    using object_traits<object_type>::id;

    static id_type
    id (const image_type&);

    static discriminator_type
    discriminator (const image_type&);

    static bool
    grow (image_type&,
          my_bool*);

    static void
    bind (MYSQL_BIND*,
          image_type&,
          mysql::statement_kind);

    static void
    bind (MYSQL_BIND*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          mysql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef
    mysql::polymorphic_root_object_statements<object_type>
    statements_type;

    typedef statements_type root_statements_type;

    typedef mysql::query_base query_base_type;

    static const std::size_t column_count = 9UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 1UL;
    static const std::size_t managed_optimistic_column_count = 0UL;
    static const std::size_t discriminator_column_count = 1UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char find_discriminator_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&, bool top = true, bool dyn = true);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&, bool dyn = true);

    static bool
    reload (database&, object_type&, bool dyn = true);

    static void
    update (database&, const object_type&, bool top = true, bool dyn = true);

    static void
    erase (database&, const id_type&, bool top = true, bool dyn = true);

    static void
    erase (database&, const object_type&, bool top = true, bool dyn = true);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);

    static void
    discriminator_ (statements_type&,
                    const id_type&,
                    discriminator_type*);
  };

  template <>
  class access::object_traits_impl< ::EventLogDb, id_common >:
    public access::object_traits_impl< ::EventLogDb, id_mysql >
  {
  };

  // RegistrationLogDb
  //
  template <typename A>
  struct query_columns< ::RegistrationLogDb, id_mysql, A >:
    query_columns< ::EventLogDb, id_mysql, typename A::base_traits >
  {
    // EventLogDb
    //
    typedef query_columns< ::EventLogDb, id_mysql, typename A::base_traits > EventLogDb;

    // type
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::RegistrationLogDb::Type,
        mysql::id_enum >::query_type,
      mysql::id_enum >
    type_type_;

    static const type_type_ type;

    // contacts
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    contacts_type_;

    static const contacts_type_ contacts;

    // instanceId
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    instanceId_type_;

    static const instanceId_type_ instanceId;
  };

  template <typename A>
  const typename query_columns< ::RegistrationLogDb, id_mysql, A >::type_type_
  query_columns< ::RegistrationLogDb, id_mysql, A >::
  type (A::table_name, "`type`", 0);

  template <typename A>
  const typename query_columns< ::RegistrationLogDb, id_mysql, A >::contacts_type_
  query_columns< ::RegistrationLogDb, id_mysql, A >::
  contacts (A::table_name, "`contacts`", 0);

  template <typename A>
  const typename query_columns< ::RegistrationLogDb, id_mysql, A >::instanceId_type_
  query_columns< ::RegistrationLogDb, id_mysql, A >::
  instanceId (A::table_name, "`instanceId`", 0);

  template <typename A>
  struct pointer_query_columns< ::RegistrationLogDb, id_mysql, A >:
    query_columns< ::RegistrationLogDb, id_mysql, A >
  {
  };

  template <>
  class access::object_traits_impl< ::RegistrationLogDb, id_mysql >:
    public access::object_traits< ::RegistrationLogDb >
  {
    public:
    typedef polymorphic_entry<object_type, id_mysql> entry_type;
    typedef object_traits_impl<root_type, id_mysql> root_traits;
    typedef object_traits_impl<base_type, id_mysql> base_traits;

    typedef root_traits::id_image_type id_image_type;

    static const info_type info;

    struct image_type
    {
      base_traits::image_type* base;

      // id_
      //
      unsigned long long id_value;
      my_bool id_null;

      // type
      //
      mysql::value_traits< ::RegistrationLogDb::Type, mysql::id_enum >::image_type type_value;
      unsigned long type_size;
      my_bool type_null;

      // contacts
      //
      details::buffer contacts_value;
      unsigned long contacts_size;
      my_bool contacts_null;

      // instanceId
      //
      details::buffer instanceId_value;
      unsigned long instanceId_size;
      my_bool instanceId_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    using object_traits<object_type>::id;

    static bool
    grow (image_type&,
          my_bool*,
          std::size_t = depth);

    static void
    bind (MYSQL_BIND*,
          const MYSQL_BIND* id,
          std::size_t id_size,
          image_type&,
          mysql::statement_kind);

    static void
    bind (MYSQL_BIND*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          mysql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*,
          std::size_t = depth);

    static void
    init (id_image_type&, const id_type&);

    static bool
    check_version (const std::size_t*, const image_type&);

    static void
    update_version (std::size_t*, const image_type&, mysql::binding*);

    typedef
    mysql::polymorphic_derived_object_statements<object_type>
    statements_type;

    typedef
    mysql::polymorphic_root_object_statements<root_type>
    root_statements_type;

    typedef mysql::query_base query_base_type;

    static const std::size_t column_count = 4UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char* const find_statements[depth];
    static const std::size_t find_column_counts[depth];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&, bool top = true, bool dyn = true);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&, bool dyn = true);

    static bool
    reload (database&, object_type&, bool dyn = true);

    static void
    update (database&, const object_type&, bool top = true, bool dyn = true);

    static void
    erase (database&, const id_type&, bool top = true, bool dyn = true);

    static void
    erase (database&, const object_type&, bool top = true, bool dyn = true);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*,
           std::size_t = depth);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload,
           std::size_t = depth);

    static void
    load_ (database&, root_type&, std::size_t);
  };

  template <>
  class access::object_traits_impl< ::RegistrationLogDb, id_common >:
    public access::object_traits_impl< ::RegistrationLogDb, id_mysql >
  {
  };

  // CallLogDb
  //
  template <typename A>
  struct query_columns< ::CallLogDb, id_mysql, A >:
    query_columns< ::EventLogDb, id_mysql, typename A::base_traits >
  {
    // EventLogDb
    //
    typedef query_columns< ::EventLogDb, id_mysql, typename A::base_traits > EventLogDb;

    // cancelled
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        bool,
        mysql::id_tiny >::query_type,
      mysql::id_tiny >
    cancelled_type_;

    static const cancelled_type_ cancelled;
  };

  template <typename A>
  const typename query_columns< ::CallLogDb, id_mysql, A >::cancelled_type_
  query_columns< ::CallLogDb, id_mysql, A >::
  cancelled (A::table_name, "`cancelled`", 0);

  template <typename A>
  struct pointer_query_columns< ::CallLogDb, id_mysql, A >:
    query_columns< ::CallLogDb, id_mysql, A >
  {
  };

  template <>
  class access::object_traits_impl< ::CallLogDb, id_mysql >:
    public access::object_traits< ::CallLogDb >
  {
    public:
    typedef polymorphic_entry<object_type, id_mysql> entry_type;
    typedef object_traits_impl<root_type, id_mysql> root_traits;
    typedef object_traits_impl<base_type, id_mysql> base_traits;

    typedef root_traits::id_image_type id_image_type;

    static const info_type info;

    struct image_type
    {
      base_traits::image_type* base;

      // id_
      //
      unsigned long long id_value;
      my_bool id_null;

      // cancelled
      //
      signed char cancelled_value;
      my_bool cancelled_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    using object_traits<object_type>::id;

    static bool
    grow (image_type&,
          my_bool*,
          std::size_t = depth);

    static void
    bind (MYSQL_BIND*,
          const MYSQL_BIND* id,
          std::size_t id_size,
          image_type&,
          mysql::statement_kind);

    static void
    bind (MYSQL_BIND*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          mysql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*,
          std::size_t = depth);

    static void
    init (id_image_type&, const id_type&);

    static bool
    check_version (const std::size_t*, const image_type&);

    static void
    update_version (std::size_t*, const image_type&, mysql::binding*);

    typedef
    mysql::polymorphic_derived_object_statements<object_type>
    statements_type;

    typedef
    mysql::polymorphic_root_object_statements<root_type>
    root_statements_type;

    typedef mysql::query_base query_base_type;

    static const std::size_t column_count = 2UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char* const find_statements[depth];
    static const std::size_t find_column_counts[depth];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&, bool top = true, bool dyn = true);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&, bool dyn = true);

    static bool
    reload (database&, object_type&, bool dyn = true);

    static void
    update (database&, const object_type&, bool top = true, bool dyn = true);

    static void
    erase (database&, const id_type&, bool top = true, bool dyn = true);

    static void
    erase (database&, const object_type&, bool top = true, bool dyn = true);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*,
           std::size_t = depth);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload,
           std::size_t = depth);

    static void
    load_ (database&, root_type&, std::size_t);
  };

  template <>
  class access::object_traits_impl< ::CallLogDb, id_common >:
    public access::object_traits_impl< ::CallLogDb, id_mysql >
  {
  };

  // MessageLogDb
  //
  template <typename A>
  struct query_columns< ::MessageLogDb, id_mysql, A >:
    query_columns< ::EventLogDb, id_mysql, typename A::base_traits >
  {
    // EventLogDb
    //
    typedef query_columns< ::EventLogDb, id_mysql, typename A::base_traits > EventLogDb;

    // reportType
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::MessageLogDb::ReportType,
        mysql::id_enum >::query_type,
      mysql::id_enum >
    reportType_type_;

    static const reportType_type_ reportType;

    // uri
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    uri_type_;

    static const uri_type_ uri;

    // mId
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        long unsigned int,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    mId_type_;

    static const mId_type_ mId;
  };

  template <typename A>
  const typename query_columns< ::MessageLogDb, id_mysql, A >::reportType_type_
  query_columns< ::MessageLogDb, id_mysql, A >::
  reportType (A::table_name, "`reportType`", 0);

  template <typename A>
  const typename query_columns< ::MessageLogDb, id_mysql, A >::uri_type_
  query_columns< ::MessageLogDb, id_mysql, A >::
  uri (A::table_name, "`uri`", 0);

  template <typename A>
  const typename query_columns< ::MessageLogDb, id_mysql, A >::mId_type_
  query_columns< ::MessageLogDb, id_mysql, A >::
  mId (A::table_name, "`mId`", 0);

  template <typename A>
  struct pointer_query_columns< ::MessageLogDb, id_mysql, A >:
    query_columns< ::MessageLogDb, id_mysql, A >
  {
  };

  template <>
  class access::object_traits_impl< ::MessageLogDb, id_mysql >:
    public access::object_traits< ::MessageLogDb >
  {
    public:
    typedef polymorphic_entry<object_type, id_mysql> entry_type;
    typedef object_traits_impl<root_type, id_mysql> root_traits;
    typedef object_traits_impl<base_type, id_mysql> base_traits;

    typedef root_traits::id_image_type id_image_type;

    static const info_type info;

    struct image_type
    {
      base_traits::image_type* base;

      // id_
      //
      unsigned long long id_value;
      my_bool id_null;

      // reportType
      //
      mysql::value_traits< ::MessageLogDb::ReportType, mysql::id_enum >::image_type reportType_value;
      unsigned long reportType_size;
      my_bool reportType_null;

      // uri
      //
      details::buffer uri_value;
      unsigned long uri_size;
      my_bool uri_null;

      // mId
      //
      unsigned long long mId_value;
      my_bool mId_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    using object_traits<object_type>::id;

    static bool
    grow (image_type&,
          my_bool*,
          std::size_t = depth);

    static void
    bind (MYSQL_BIND*,
          const MYSQL_BIND* id,
          std::size_t id_size,
          image_type&,
          mysql::statement_kind);

    static void
    bind (MYSQL_BIND*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          mysql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*,
          std::size_t = depth);

    static void
    init (id_image_type&, const id_type&);

    static bool
    check_version (const std::size_t*, const image_type&);

    static void
    update_version (std::size_t*, const image_type&, mysql::binding*);

    typedef
    mysql::polymorphic_derived_object_statements<object_type>
    statements_type;

    typedef
    mysql::polymorphic_root_object_statements<root_type>
    root_statements_type;

    typedef mysql::query_base query_base_type;

    static const std::size_t column_count = 4UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char* const find_statements[depth];
    static const std::size_t find_column_counts[depth];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&, bool top = true, bool dyn = true);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&, bool dyn = true);

    static bool
    reload (database&, object_type&, bool dyn = true);

    static void
    update (database&, const object_type&, bool top = true, bool dyn = true);

    static void
    erase (database&, const id_type&, bool top = true, bool dyn = true);

    static void
    erase (database&, const object_type&, bool top = true, bool dyn = true);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*,
           std::size_t = depth);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload,
           std::size_t = depth);

    static void
    load_ (database&, root_type&, std::size_t);
  };

  template <>
  class access::object_traits_impl< ::MessageLogDb, id_common >:
    public access::object_traits_impl< ::MessageLogDb, id_mysql >
  {
  };

  // AuthLogDb
  //
  template <typename A>
  struct query_columns< ::AuthLogDb, id_mysql, A >:
    query_columns< ::EventLogDb, id_mysql, typename A::base_traits >
  {
    // EventLogDb
    //
    typedef query_columns< ::EventLogDb, id_mysql, typename A::base_traits > EventLogDb;

    // origin
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    origin_type_;

    static const origin_type_ origin;

    // method
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    method_type_;

    static const method_type_ method;

    // userExists
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        bool,
        mysql::id_tiny >::query_type,
      mysql::id_tiny >
    userExists_type_;

    static const userExists_type_ userExists;
  };

  template <typename A>
  const typename query_columns< ::AuthLogDb, id_mysql, A >::origin_type_
  query_columns< ::AuthLogDb, id_mysql, A >::
  origin (A::table_name, "`origin`", 0);

  template <typename A>
  const typename query_columns< ::AuthLogDb, id_mysql, A >::method_type_
  query_columns< ::AuthLogDb, id_mysql, A >::
  method (A::table_name, "`method`", 0);

  template <typename A>
  const typename query_columns< ::AuthLogDb, id_mysql, A >::userExists_type_
  query_columns< ::AuthLogDb, id_mysql, A >::
  userExists (A::table_name, "`userExists`", 0);

  template <typename A>
  struct pointer_query_columns< ::AuthLogDb, id_mysql, A >:
    query_columns< ::AuthLogDb, id_mysql, A >
  {
  };

  template <>
  class access::object_traits_impl< ::AuthLogDb, id_mysql >:
    public access::object_traits< ::AuthLogDb >
  {
    public:
    typedef polymorphic_entry<object_type, id_mysql> entry_type;
    typedef object_traits_impl<root_type, id_mysql> root_traits;
    typedef object_traits_impl<base_type, id_mysql> base_traits;

    typedef root_traits::id_image_type id_image_type;

    static const info_type info;

    struct image_type
    {
      base_traits::image_type* base;

      // id_
      //
      unsigned long long id_value;
      my_bool id_null;

      // origin
      //
      details::buffer origin_value;
      unsigned long origin_size;
      my_bool origin_null;

      // method
      //
      details::buffer method_value;
      unsigned long method_size;
      my_bool method_null;

      // userExists
      //
      signed char userExists_value;
      my_bool userExists_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    using object_traits<object_type>::id;

    static bool
    grow (image_type&,
          my_bool*,
          std::size_t = depth);

    static void
    bind (MYSQL_BIND*,
          const MYSQL_BIND* id,
          std::size_t id_size,
          image_type&,
          mysql::statement_kind);

    static void
    bind (MYSQL_BIND*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          mysql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*,
          std::size_t = depth);

    static void
    init (id_image_type&, const id_type&);

    static bool
    check_version (const std::size_t*, const image_type&);

    static void
    update_version (std::size_t*, const image_type&, mysql::binding*);

    typedef
    mysql::polymorphic_derived_object_statements<object_type>
    statements_type;

    typedef
    mysql::polymorphic_root_object_statements<root_type>
    root_statements_type;

    typedef mysql::query_base query_base_type;

    static const std::size_t column_count = 4UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char* const find_statements[depth];
    static const std::size_t find_column_counts[depth];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&, bool top = true, bool dyn = true);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&, bool dyn = true);

    static bool
    reload (database&, object_type&, bool dyn = true);

    static void
    update (database&, const object_type&, bool top = true, bool dyn = true);

    static void
    erase (database&, const id_type&, bool top = true, bool dyn = true);

    static void
    erase (database&, const object_type&, bool top = true, bool dyn = true);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*,
           std::size_t = depth);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload,
           std::size_t = depth);

    static void
    load_ (database&, root_type&, std::size_t);
  };

  template <>
  class access::object_traits_impl< ::AuthLogDb, id_common >:
    public access::object_traits_impl< ::AuthLogDb, id_mysql >
  {
  };

  // reporting_addr
  //
  template <>
  class access::composite_value_traits< ::CallQualityStatisticsLogDb::reporting_addr, id_mysql >
  {
    public:
    typedef ::CallQualityStatisticsLogDb::reporting_addr value_type;

    struct image_type
    {
      // id
      //
      details::buffer id_value;
      unsigned long id_size;
      my_bool id_null;

      // ip
      //
      details::buffer ip_value;
      unsigned long ip_size;
      my_bool ip_null;

      // port
      //
      int port_value;
      my_bool port_null;

      // ssrc
      //
      unsigned int ssrc_value;
      my_bool ssrc_null;

      // group
      //
      details::buffer group_value;
      unsigned long group_size;
      my_bool group_null;

      // mac
      //
      details::buffer mac_value;
      unsigned long mac_size;
      my_bool mac_null;
    };

    static bool
    grow (image_type&,
          my_bool*);

    static void
    bind (MYSQL_BIND*,
          image_type&,
          mysql::statement_kind);

    static bool
    init (image_type&,
          const value_type&,
          mysql::statement_kind);

    static void
    init (value_type&,
          const image_type&,
          database*);

    static bool
    get_null (const image_type&);

    static void
    set_null (image_type&,
              mysql::statement_kind);
  };

  // reporting_content_metrics
  //
  template <>
  class access::composite_value_traits< ::CallQualityStatisticsLogDb::reporting_content_metrics, id_mysql >
  {
    public:
    typedef ::CallQualityStatisticsLogDb::reporting_content_metrics value_type;

    struct image_type
    {
      // ts_start
      //
      long long ts_start_value;
      my_bool ts_start_null;

      // ts_stop
      //
      long long ts_stop_value;
      my_bool ts_stop_null;

      // sd_payload_type
      //
      int sd_payload_type_value;
      my_bool sd_payload_type_null;

      // sd_payload_desc
      //
      details::buffer sd_payload_desc_value;
      unsigned long sd_payload_desc_size;
      my_bool sd_payload_desc_null;

      // sd_sample_rate
      //
      int sd_sample_rate_value;
      my_bool sd_sample_rate_null;

      // sd_frame_duration
      //
      int sd_frame_duration_value;
      my_bool sd_frame_duration_null;

      // sd_fmtp
      //
      details::buffer sd_fmtp_value;
      unsigned long sd_fmtp_size;
      my_bool sd_fmtp_null;

      // sd_packet_loss_concealment
      //
      int sd_packet_loss_concealment_value;
      my_bool sd_packet_loss_concealment_null;

      // jb_adaptive
      //
      int jb_adaptive_value;
      my_bool jb_adaptive_null;

      // jb_nominal
      //
      int jb_nominal_value;
      my_bool jb_nominal_null;

      // jb_max
      //
      int jb_max_value;
      my_bool jb_max_null;

      // jb_abs_max
      //
      int jb_abs_max_value;
      my_bool jb_abs_max_null;

      // pl_network_packet_loss_rate
      //
      float pl_network_packet_loss_rate_value;
      my_bool pl_network_packet_loss_rate_null;

      // pl_jitter_buffer_discard_rate
      //
      float pl_jitter_buffer_discard_rate_value;
      my_bool pl_jitter_buffer_discard_rate_null;

      // d_round_trip_delay
      //
      int d_round_trip_delay_value;
      my_bool d_round_trip_delay_null;

      // d_end_system_delay
      //
      int d_end_system_delay_value;
      my_bool d_end_system_delay_null;

      // d_symm_one_way_delay
      //
      int d_symm_one_way_delay_value;
      my_bool d_symm_one_way_delay_null;

      // d_interarrival_jitter
      //
      int d_interarrival_jitter_value;
      my_bool d_interarrival_jitter_null;

      // d_mean_abs_jitter
      //
      int d_mean_abs_jitter_value;
      my_bool d_mean_abs_jitter_null;

      // s_level
      //
      int s_level_value;
      my_bool s_level_null;

      // s_noise_level
      //
      int s_noise_level_value;
      my_bool s_noise_level_null;

      // qe_moslq
      //
      float qe_moslq_value;
      my_bool qe_moslq_null;

      // qe_moscq
      //
      float qe_moscq_value;
      my_bool qe_moscq_null;

      // user_agent
      //
      details::buffer user_agent_value;
      unsigned long user_agent_size;
      my_bool user_agent_null;
    };

    static bool
    grow (image_type&,
          my_bool*);

    static void
    bind (MYSQL_BIND*,
          image_type&,
          mysql::statement_kind);

    static bool
    init (image_type&,
          const value_type&,
          mysql::statement_kind);

    static void
    init (value_type&,
          const image_type&,
          database*);

    static bool
    get_null (const image_type&);

    static void
    set_null (image_type&,
              mysql::statement_kind);
  };

  // CallQualityStatisticsLogDb
  //
  template <typename A>
  struct query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >:
    query_columns< ::EventLogDb, id_mysql, typename A::base_traits >
  {
    // EventLogDb
    //
    typedef query_columns< ::EventLogDb, id_mysql, typename A::base_traits > EventLogDb;

    // report_type
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    report_type_type_;

    static const report_type_type_ report_type;

    // call_term_report
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        bool,
        mysql::id_tiny >::query_type,
      mysql::id_tiny >
    call_term_report_type_;

    static const call_term_report_type_ call_term_report;

    // call_id
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    call_id_type_;

    static const call_id_type_ call_id;

    // orig_id
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    orig_id_type_;

    static const orig_id_type_ orig_id;

    // local_addr
    //
    struct local_addr_type_
    {
      local_addr_type_ ()
      {
      }

      // id
      //
      typedef
      mysql::query_column<
        mysql::value_traits<
          ::std::string,
          mysql::id_string >::query_type,
        mysql::id_string >
      id_type_;

      static const id_type_ id;

      // ip
      //
      typedef
      mysql::query_column<
        mysql::value_traits<
          ::std::string,
          mysql::id_string >::query_type,
        mysql::id_string >
      ip_type_;

      static const ip_type_ ip;

      // port
      //
      typedef
      mysql::query_column<
        mysql::value_traits<
          int,
          mysql::id_long >::query_type,
        mysql::id_long >
      port_type_;

      static const port_type_ port;

      // ssrc
      //
      typedef
      mysql::query_column<
        mysql::value_traits<
          ::uint32_t,
          mysql::id_ulong >::query_type,
        mysql::id_ulong >
      ssrc_type_;

      static const ssrc_type_ ssrc;

      // group
      //
      typedef
      mysql::query_column<
        mysql::value_traits<
          ::std::string,
          mysql::id_string >::query_type,
        mysql::id_string >
      group_type_;

      static const group_type_ group;

      // mac
      //
      typedef
      mysql::query_column<
        mysql::value_traits<
          ::std::string,
          mysql::id_string >::query_type,
        mysql::id_string >
      mac_type_;

      static const mac_type_ mac;
    };

    static const local_addr_type_ local_addr;

    // remote_addr
    //
    struct remote_addr_type_
    {
      remote_addr_type_ ()
      {
      }

      // id
      //
      typedef
      mysql::query_column<
        mysql::value_traits<
          ::std::string,
          mysql::id_string >::query_type,
        mysql::id_string >
      id_type_;

      static const id_type_ id;

      // ip
      //
      typedef
      mysql::query_column<
        mysql::value_traits<
          ::std::string,
          mysql::id_string >::query_type,
        mysql::id_string >
      ip_type_;

      static const ip_type_ ip;

      // port
      //
      typedef
      mysql::query_column<
        mysql::value_traits<
          int,
          mysql::id_long >::query_type,
        mysql::id_long >
      port_type_;

      static const port_type_ port;

      // ssrc
      //
      typedef
      mysql::query_column<
        mysql::value_traits<
          ::uint32_t,
          mysql::id_ulong >::query_type,
        mysql::id_ulong >
      ssrc_type_;

      static const ssrc_type_ ssrc;

      // group
      //
      typedef
      mysql::query_column<
        mysql::value_traits<
          ::std::string,
          mysql::id_string >::query_type,
        mysql::id_string >
      group_type_;

      static const group_type_ group;

      // mac
      //
      typedef
      mysql::query_column<
        mysql::value_traits<
          ::std::string,
          mysql::id_string >::query_type,
        mysql::id_string >
      mac_type_;

      static const mac_type_ mac;
    };

    static const remote_addr_type_ remote_addr;

    // local_metrics
    //
    struct local_metrics_type_
    {
      local_metrics_type_ ()
      {
      }

      // ts_start
      //
      typedef
      mysql::query_column<
        mysql::value_traits<
          ::time_t,
          mysql::id_longlong >::query_type,
        mysql::id_longlong >
      ts_start_type_;

      static const ts_start_type_ ts_start;

      // ts_stop
      //
      typedef
      mysql::query_column<
        mysql::value_traits<
          ::time_t,
          mysql::id_longlong >::query_type,
        mysql::id_longlong >
      ts_stop_type_;

      static const ts_stop_type_ ts_stop;

      // sd_payload_type
      //
      typedef
      mysql::query_column<
        mysql::value_traits<
          int,
          mysql::id_long >::query_type,
        mysql::id_long >
      sd_payload_type_type_;

      static const sd_payload_type_type_ sd_payload_type;

      // sd_payload_desc
      //
      typedef
      mysql::query_column<
        mysql::value_traits<
          ::std::string,
          mysql::id_string >::query_type,
        mysql::id_string >
      sd_payload_desc_type_;

      static const sd_payload_desc_type_ sd_payload_desc;

      // sd_sample_rate
      //
      typedef
      mysql::query_column<
        mysql::value_traits<
          int,
          mysql::id_long >::query_type,
        mysql::id_long >
      sd_sample_rate_type_;

      static const sd_sample_rate_type_ sd_sample_rate;

      // sd_frame_duration
      //
      typedef
      mysql::query_column<
        mysql::value_traits<
          int,
          mysql::id_long >::query_type,
        mysql::id_long >
      sd_frame_duration_type_;

      static const sd_frame_duration_type_ sd_frame_duration;

      // sd_fmtp
      //
      typedef
      mysql::query_column<
        mysql::value_traits<
          ::std::string,
          mysql::id_string >::query_type,
        mysql::id_string >
      sd_fmtp_type_;

      static const sd_fmtp_type_ sd_fmtp;

      // sd_packet_loss_concealment
      //
      typedef
      mysql::query_column<
        mysql::value_traits<
          int,
          mysql::id_long >::query_type,
        mysql::id_long >
      sd_packet_loss_concealment_type_;

      static const sd_packet_loss_concealment_type_ sd_packet_loss_concealment;

      // jb_adaptive
      //
      typedef
      mysql::query_column<
        mysql::value_traits<
          int,
          mysql::id_long >::query_type,
        mysql::id_long >
      jb_adaptive_type_;

      static const jb_adaptive_type_ jb_adaptive;

      // jb_nominal
      //
      typedef
      mysql::query_column<
        mysql::value_traits<
          int,
          mysql::id_long >::query_type,
        mysql::id_long >
      jb_nominal_type_;

      static const jb_nominal_type_ jb_nominal;

      // jb_max
      //
      typedef
      mysql::query_column<
        mysql::value_traits<
          int,
          mysql::id_long >::query_type,
        mysql::id_long >
      jb_max_type_;

      static const jb_max_type_ jb_max;

      // jb_abs_max
      //
      typedef
      mysql::query_column<
        mysql::value_traits<
          int,
          mysql::id_long >::query_type,
        mysql::id_long >
      jb_abs_max_type_;

      static const jb_abs_max_type_ jb_abs_max;

      // pl_network_packet_loss_rate
      //
      typedef
      mysql::query_column<
        mysql::value_traits<
          float,
          mysql::id_float >::query_type,
        mysql::id_float >
      pl_network_packet_loss_rate_type_;

      static const pl_network_packet_loss_rate_type_ pl_network_packet_loss_rate;

      // pl_jitter_buffer_discard_rate
      //
      typedef
      mysql::query_column<
        mysql::value_traits<
          float,
          mysql::id_float >::query_type,
        mysql::id_float >
      pl_jitter_buffer_discard_rate_type_;

      static const pl_jitter_buffer_discard_rate_type_ pl_jitter_buffer_discard_rate;

      // d_round_trip_delay
      //
      typedef
      mysql::query_column<
        mysql::value_traits<
          int,
          mysql::id_long >::query_type,
        mysql::id_long >
      d_round_trip_delay_type_;

      static const d_round_trip_delay_type_ d_round_trip_delay;

      // d_end_system_delay
      //
      typedef
      mysql::query_column<
        mysql::value_traits<
          int,
          mysql::id_long >::query_type,
        mysql::id_long >
      d_end_system_delay_type_;

      static const d_end_system_delay_type_ d_end_system_delay;

      // d_symm_one_way_delay
      //
      typedef
      mysql::query_column<
        mysql::value_traits<
          int,
          mysql::id_long >::query_type,
        mysql::id_long >
      d_symm_one_way_delay_type_;

      static const d_symm_one_way_delay_type_ d_symm_one_way_delay;

      // d_interarrival_jitter
      //
      typedef
      mysql::query_column<
        mysql::value_traits<
          int,
          mysql::id_long >::query_type,
        mysql::id_long >
      d_interarrival_jitter_type_;

      static const d_interarrival_jitter_type_ d_interarrival_jitter;

      // d_mean_abs_jitter
      //
      typedef
      mysql::query_column<
        mysql::value_traits<
          int,
          mysql::id_long >::query_type,
        mysql::id_long >
      d_mean_abs_jitter_type_;

      static const d_mean_abs_jitter_type_ d_mean_abs_jitter;

      // s_level
      //
      typedef
      mysql::query_column<
        mysql::value_traits<
          int,
          mysql::id_long >::query_type,
        mysql::id_long >
      s_level_type_;

      static const s_level_type_ s_level;

      // s_noise_level
      //
      typedef
      mysql::query_column<
        mysql::value_traits<
          int,
          mysql::id_long >::query_type,
        mysql::id_long >
      s_noise_level_type_;

      static const s_noise_level_type_ s_noise_level;

      // qe_moslq
      //
      typedef
      mysql::query_column<
        mysql::value_traits<
          float,
          mysql::id_float >::query_type,
        mysql::id_float >
      qe_moslq_type_;

      static const qe_moslq_type_ qe_moslq;

      // qe_moscq
      //
      typedef
      mysql::query_column<
        mysql::value_traits<
          float,
          mysql::id_float >::query_type,
        mysql::id_float >
      qe_moscq_type_;

      static const qe_moscq_type_ qe_moscq;

      // user_agent
      //
      typedef
      mysql::query_column<
        mysql::value_traits<
          ::std::string,
          mysql::id_string >::query_type,
        mysql::id_string >
      user_agent_type_;

      static const user_agent_type_ user_agent;
    };

    static const local_metrics_type_ local_metrics;

    // remote_metrics
    //
    struct remote_metrics_type_
    {
      remote_metrics_type_ ()
      {
      }

      // ts_start
      //
      typedef
      mysql::query_column<
        mysql::value_traits<
          ::time_t,
          mysql::id_longlong >::query_type,
        mysql::id_longlong >
      ts_start_type_;

      static const ts_start_type_ ts_start;

      // ts_stop
      //
      typedef
      mysql::query_column<
        mysql::value_traits<
          ::time_t,
          mysql::id_longlong >::query_type,
        mysql::id_longlong >
      ts_stop_type_;

      static const ts_stop_type_ ts_stop;

      // sd_payload_type
      //
      typedef
      mysql::query_column<
        mysql::value_traits<
          int,
          mysql::id_long >::query_type,
        mysql::id_long >
      sd_payload_type_type_;

      static const sd_payload_type_type_ sd_payload_type;

      // sd_payload_desc
      //
      typedef
      mysql::query_column<
        mysql::value_traits<
          ::std::string,
          mysql::id_string >::query_type,
        mysql::id_string >
      sd_payload_desc_type_;

      static const sd_payload_desc_type_ sd_payload_desc;

      // sd_sample_rate
      //
      typedef
      mysql::query_column<
        mysql::value_traits<
          int,
          mysql::id_long >::query_type,
        mysql::id_long >
      sd_sample_rate_type_;

      static const sd_sample_rate_type_ sd_sample_rate;

      // sd_frame_duration
      //
      typedef
      mysql::query_column<
        mysql::value_traits<
          int,
          mysql::id_long >::query_type,
        mysql::id_long >
      sd_frame_duration_type_;

      static const sd_frame_duration_type_ sd_frame_duration;

      // sd_fmtp
      //
      typedef
      mysql::query_column<
        mysql::value_traits<
          ::std::string,
          mysql::id_string >::query_type,
        mysql::id_string >
      sd_fmtp_type_;

      static const sd_fmtp_type_ sd_fmtp;

      // sd_packet_loss_concealment
      //
      typedef
      mysql::query_column<
        mysql::value_traits<
          int,
          mysql::id_long >::query_type,
        mysql::id_long >
      sd_packet_loss_concealment_type_;

      static const sd_packet_loss_concealment_type_ sd_packet_loss_concealment;

      // jb_adaptive
      //
      typedef
      mysql::query_column<
        mysql::value_traits<
          int,
          mysql::id_long >::query_type,
        mysql::id_long >
      jb_adaptive_type_;

      static const jb_adaptive_type_ jb_adaptive;

      // jb_nominal
      //
      typedef
      mysql::query_column<
        mysql::value_traits<
          int,
          mysql::id_long >::query_type,
        mysql::id_long >
      jb_nominal_type_;

      static const jb_nominal_type_ jb_nominal;

      // jb_max
      //
      typedef
      mysql::query_column<
        mysql::value_traits<
          int,
          mysql::id_long >::query_type,
        mysql::id_long >
      jb_max_type_;

      static const jb_max_type_ jb_max;

      // jb_abs_max
      //
      typedef
      mysql::query_column<
        mysql::value_traits<
          int,
          mysql::id_long >::query_type,
        mysql::id_long >
      jb_abs_max_type_;

      static const jb_abs_max_type_ jb_abs_max;

      // pl_network_packet_loss_rate
      //
      typedef
      mysql::query_column<
        mysql::value_traits<
          float,
          mysql::id_float >::query_type,
        mysql::id_float >
      pl_network_packet_loss_rate_type_;

      static const pl_network_packet_loss_rate_type_ pl_network_packet_loss_rate;

      // pl_jitter_buffer_discard_rate
      //
      typedef
      mysql::query_column<
        mysql::value_traits<
          float,
          mysql::id_float >::query_type,
        mysql::id_float >
      pl_jitter_buffer_discard_rate_type_;

      static const pl_jitter_buffer_discard_rate_type_ pl_jitter_buffer_discard_rate;

      // d_round_trip_delay
      //
      typedef
      mysql::query_column<
        mysql::value_traits<
          int,
          mysql::id_long >::query_type,
        mysql::id_long >
      d_round_trip_delay_type_;

      static const d_round_trip_delay_type_ d_round_trip_delay;

      // d_end_system_delay
      //
      typedef
      mysql::query_column<
        mysql::value_traits<
          int,
          mysql::id_long >::query_type,
        mysql::id_long >
      d_end_system_delay_type_;

      static const d_end_system_delay_type_ d_end_system_delay;

      // d_symm_one_way_delay
      //
      typedef
      mysql::query_column<
        mysql::value_traits<
          int,
          mysql::id_long >::query_type,
        mysql::id_long >
      d_symm_one_way_delay_type_;

      static const d_symm_one_way_delay_type_ d_symm_one_way_delay;

      // d_interarrival_jitter
      //
      typedef
      mysql::query_column<
        mysql::value_traits<
          int,
          mysql::id_long >::query_type,
        mysql::id_long >
      d_interarrival_jitter_type_;

      static const d_interarrival_jitter_type_ d_interarrival_jitter;

      // d_mean_abs_jitter
      //
      typedef
      mysql::query_column<
        mysql::value_traits<
          int,
          mysql::id_long >::query_type,
        mysql::id_long >
      d_mean_abs_jitter_type_;

      static const d_mean_abs_jitter_type_ d_mean_abs_jitter;

      // s_level
      //
      typedef
      mysql::query_column<
        mysql::value_traits<
          int,
          mysql::id_long >::query_type,
        mysql::id_long >
      s_level_type_;

      static const s_level_type_ s_level;

      // s_noise_level
      //
      typedef
      mysql::query_column<
        mysql::value_traits<
          int,
          mysql::id_long >::query_type,
        mysql::id_long >
      s_noise_level_type_;

      static const s_noise_level_type_ s_noise_level;

      // qe_moslq
      //
      typedef
      mysql::query_column<
        mysql::value_traits<
          float,
          mysql::id_float >::query_type,
        mysql::id_float >
      qe_moslq_type_;

      static const qe_moslq_type_ qe_moslq;

      // qe_moscq
      //
      typedef
      mysql::query_column<
        mysql::value_traits<
          float,
          mysql::id_float >::query_type,
        mysql::id_float >
      qe_moscq_type_;

      static const qe_moscq_type_ qe_moscq;

      // user_agent
      //
      typedef
      mysql::query_column<
        mysql::value_traits<
          ::std::string,
          mysql::id_string >::query_type,
        mysql::id_string >
      user_agent_type_;

      static const user_agent_type_ user_agent;
    };

    static const remote_metrics_type_ remote_metrics;

    // dialog_id
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    dialog_id_type_;

    static const dialog_id_type_ dialog_id;

    // qos_name
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    qos_name_type_;

    static const qos_name_type_ qos_name;

    // qos_timestamp
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    qos_timestamp_type_;

    static const qos_timestamp_type_ qos_timestamp;

    // qos_input_leg
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    qos_input_leg_type_;

    static const qos_input_leg_type_ qos_input_leg;

    // qos_input
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    qos_input_type_;

    static const qos_input_type_ qos_input;

    // qos_output_leg
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    qos_output_leg_type_;

    static const qos_output_leg_type_ qos_output_leg;

    // qos_output
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    qos_output_type_;

    static const qos_output_type_ qos_output;
  };

  template <typename A>
  const typename query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::report_type_type_
  query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::
  report_type (A::table_name, "`report_type`", 0);

  template <typename A>
  const typename query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::call_term_report_type_
  query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::
  call_term_report (A::table_name, "`call_term_report`", 0);

  template <typename A>
  const typename query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::call_id_type_
  query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::
  call_id (A::table_name, "`call_id`", 0);

  template <typename A>
  const typename query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::orig_id_type_
  query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::
  orig_id (A::table_name, "`orig_id`", 0);

  template <typename A>
  const typename query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::local_addr_type_::id_type_
  query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::local_addr_type_::
  id (A::table_name, "`local_addr_id`", 0);

  template <typename A>
  const typename query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::local_addr_type_::ip_type_
  query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::local_addr_type_::
  ip (A::table_name, "`local_addr_ip`", 0);

  template <typename A>
  const typename query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::local_addr_type_::port_type_
  query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::local_addr_type_::
  port (A::table_name, "`local_addr_port`", 0);

  template <typename A>
  const typename query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::local_addr_type_::ssrc_type_
  query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::local_addr_type_::
  ssrc (A::table_name, "`local_addr_ssrc`", 0);

  template <typename A>
  const typename query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::local_addr_type_::group_type_
  query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::local_addr_type_::
  group (A::table_name, "`local_addr_group`", 0);

  template <typename A>
  const typename query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::local_addr_type_::mac_type_
  query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::local_addr_type_::
  mac (A::table_name, "`local_addr_mac`", 0);

  template <typename A>
  const typename query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::local_addr_type_
  query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::local_addr;

  template <typename A>
  const typename query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::remote_addr_type_::id_type_
  query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::remote_addr_type_::
  id (A::table_name, "`remote_addr_id`", 0);

  template <typename A>
  const typename query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::remote_addr_type_::ip_type_
  query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::remote_addr_type_::
  ip (A::table_name, "`remote_addr_ip`", 0);

  template <typename A>
  const typename query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::remote_addr_type_::port_type_
  query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::remote_addr_type_::
  port (A::table_name, "`remote_addr_port`", 0);

  template <typename A>
  const typename query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::remote_addr_type_::ssrc_type_
  query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::remote_addr_type_::
  ssrc (A::table_name, "`remote_addr_ssrc`", 0);

  template <typename A>
  const typename query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::remote_addr_type_::group_type_
  query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::remote_addr_type_::
  group (A::table_name, "`remote_addr_group`", 0);

  template <typename A>
  const typename query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::remote_addr_type_::mac_type_
  query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::remote_addr_type_::
  mac (A::table_name, "`remote_addr_mac`", 0);

  template <typename A>
  const typename query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::remote_addr_type_
  query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::remote_addr;

  template <typename A>
  const typename query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::local_metrics_type_::ts_start_type_
  query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::local_metrics_type_::
  ts_start (A::table_name, "`local_metrics_ts_start`", 0);

  template <typename A>
  const typename query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::local_metrics_type_::ts_stop_type_
  query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::local_metrics_type_::
  ts_stop (A::table_name, "`local_metrics_ts_stop`", 0);

  template <typename A>
  const typename query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::local_metrics_type_::sd_payload_type_type_
  query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::local_metrics_type_::
  sd_payload_type (A::table_name, "`local_metrics_sd_payload_type`", 0);

  template <typename A>
  const typename query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::local_metrics_type_::sd_payload_desc_type_
  query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::local_metrics_type_::
  sd_payload_desc (A::table_name, "`local_metrics_sd_payload_desc`", 0);

  template <typename A>
  const typename query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::local_metrics_type_::sd_sample_rate_type_
  query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::local_metrics_type_::
  sd_sample_rate (A::table_name, "`local_metrics_sd_sample_rate`", 0);

  template <typename A>
  const typename query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::local_metrics_type_::sd_frame_duration_type_
  query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::local_metrics_type_::
  sd_frame_duration (A::table_name, "`local_metrics_sd_frame_duration`", 0);

  template <typename A>
  const typename query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::local_metrics_type_::sd_fmtp_type_
  query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::local_metrics_type_::
  sd_fmtp (A::table_name, "`local_metrics_sd_fmtp`", 0);

  template <typename A>
  const typename query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::local_metrics_type_::sd_packet_loss_concealment_type_
  query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::local_metrics_type_::
  sd_packet_loss_concealment (A::table_name, "`local_metrics_sd_packet_loss_concealment`", 0);

  template <typename A>
  const typename query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::local_metrics_type_::jb_adaptive_type_
  query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::local_metrics_type_::
  jb_adaptive (A::table_name, "`local_metrics_jb_adaptive`", 0);

  template <typename A>
  const typename query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::local_metrics_type_::jb_nominal_type_
  query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::local_metrics_type_::
  jb_nominal (A::table_name, "`local_metrics_jb_nominal`", 0);

  template <typename A>
  const typename query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::local_metrics_type_::jb_max_type_
  query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::local_metrics_type_::
  jb_max (A::table_name, "`local_metrics_jb_max`", 0);

  template <typename A>
  const typename query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::local_metrics_type_::jb_abs_max_type_
  query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::local_metrics_type_::
  jb_abs_max (A::table_name, "`local_metrics_jb_abs_max`", 0);

  template <typename A>
  const typename query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::local_metrics_type_::pl_network_packet_loss_rate_type_
  query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::local_metrics_type_::
  pl_network_packet_loss_rate (A::table_name, "`local_metrics_pl_network_packet_loss_rate`", 0);

  template <typename A>
  const typename query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::local_metrics_type_::pl_jitter_buffer_discard_rate_type_
  query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::local_metrics_type_::
  pl_jitter_buffer_discard_rate (A::table_name, "`local_metrics_pl_jitter_buffer_discard_rate`", 0);

  template <typename A>
  const typename query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::local_metrics_type_::d_round_trip_delay_type_
  query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::local_metrics_type_::
  d_round_trip_delay (A::table_name, "`local_metrics_d_round_trip_delay`", 0);

  template <typename A>
  const typename query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::local_metrics_type_::d_end_system_delay_type_
  query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::local_metrics_type_::
  d_end_system_delay (A::table_name, "`local_metrics_d_end_system_delay`", 0);

  template <typename A>
  const typename query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::local_metrics_type_::d_symm_one_way_delay_type_
  query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::local_metrics_type_::
  d_symm_one_way_delay (A::table_name, "`local_metrics_d_symm_one_way_delay`", 0);

  template <typename A>
  const typename query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::local_metrics_type_::d_interarrival_jitter_type_
  query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::local_metrics_type_::
  d_interarrival_jitter (A::table_name, "`local_metrics_d_interarrival_jitter`", 0);

  template <typename A>
  const typename query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::local_metrics_type_::d_mean_abs_jitter_type_
  query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::local_metrics_type_::
  d_mean_abs_jitter (A::table_name, "`local_metrics_d_mean_abs_jitter`", 0);

  template <typename A>
  const typename query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::local_metrics_type_::s_level_type_
  query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::local_metrics_type_::
  s_level (A::table_name, "`local_metrics_s_level`", 0);

  template <typename A>
  const typename query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::local_metrics_type_::s_noise_level_type_
  query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::local_metrics_type_::
  s_noise_level (A::table_name, "`local_metrics_s_noise_level`", 0);

  template <typename A>
  const typename query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::local_metrics_type_::qe_moslq_type_
  query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::local_metrics_type_::
  qe_moslq (A::table_name, "`local_metrics_qe_moslq`", 0);

  template <typename A>
  const typename query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::local_metrics_type_::qe_moscq_type_
  query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::local_metrics_type_::
  qe_moscq (A::table_name, "`local_metrics_qe_moscq`", 0);

  template <typename A>
  const typename query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::local_metrics_type_::user_agent_type_
  query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::local_metrics_type_::
  user_agent (A::table_name, "`local_metrics_user_agent`", 0);

  template <typename A>
  const typename query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::local_metrics_type_
  query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::local_metrics;

  template <typename A>
  const typename query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::remote_metrics_type_::ts_start_type_
  query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::remote_metrics_type_::
  ts_start (A::table_name, "`remote_metrics_ts_start`", 0);

  template <typename A>
  const typename query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::remote_metrics_type_::ts_stop_type_
  query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::remote_metrics_type_::
  ts_stop (A::table_name, "`remote_metrics_ts_stop`", 0);

  template <typename A>
  const typename query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::remote_metrics_type_::sd_payload_type_type_
  query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::remote_metrics_type_::
  sd_payload_type (A::table_name, "`remote_metrics_sd_payload_type`", 0);

  template <typename A>
  const typename query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::remote_metrics_type_::sd_payload_desc_type_
  query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::remote_metrics_type_::
  sd_payload_desc (A::table_name, "`remote_metrics_sd_payload_desc`", 0);

  template <typename A>
  const typename query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::remote_metrics_type_::sd_sample_rate_type_
  query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::remote_metrics_type_::
  sd_sample_rate (A::table_name, "`remote_metrics_sd_sample_rate`", 0);

  template <typename A>
  const typename query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::remote_metrics_type_::sd_frame_duration_type_
  query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::remote_metrics_type_::
  sd_frame_duration (A::table_name, "`remote_metrics_sd_frame_duration`", 0);

  template <typename A>
  const typename query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::remote_metrics_type_::sd_fmtp_type_
  query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::remote_metrics_type_::
  sd_fmtp (A::table_name, "`remote_metrics_sd_fmtp`", 0);

  template <typename A>
  const typename query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::remote_metrics_type_::sd_packet_loss_concealment_type_
  query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::remote_metrics_type_::
  sd_packet_loss_concealment (A::table_name, "`remote_metrics_sd_packet_loss_concealment`", 0);

  template <typename A>
  const typename query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::remote_metrics_type_::jb_adaptive_type_
  query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::remote_metrics_type_::
  jb_adaptive (A::table_name, "`remote_metrics_jb_adaptive`", 0);

  template <typename A>
  const typename query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::remote_metrics_type_::jb_nominal_type_
  query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::remote_metrics_type_::
  jb_nominal (A::table_name, "`remote_metrics_jb_nominal`", 0);

  template <typename A>
  const typename query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::remote_metrics_type_::jb_max_type_
  query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::remote_metrics_type_::
  jb_max (A::table_name, "`remote_metrics_jb_max`", 0);

  template <typename A>
  const typename query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::remote_metrics_type_::jb_abs_max_type_
  query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::remote_metrics_type_::
  jb_abs_max (A::table_name, "`remote_metrics_jb_abs_max`", 0);

  template <typename A>
  const typename query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::remote_metrics_type_::pl_network_packet_loss_rate_type_
  query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::remote_metrics_type_::
  pl_network_packet_loss_rate (A::table_name, "`remote_metrics_pl_network_packet_loss_rate`", 0);

  template <typename A>
  const typename query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::remote_metrics_type_::pl_jitter_buffer_discard_rate_type_
  query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::remote_metrics_type_::
  pl_jitter_buffer_discard_rate (A::table_name, "`remote_metrics_pl_jitter_buffer_discard_rate`", 0);

  template <typename A>
  const typename query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::remote_metrics_type_::d_round_trip_delay_type_
  query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::remote_metrics_type_::
  d_round_trip_delay (A::table_name, "`remote_metrics_d_round_trip_delay`", 0);

  template <typename A>
  const typename query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::remote_metrics_type_::d_end_system_delay_type_
  query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::remote_metrics_type_::
  d_end_system_delay (A::table_name, "`remote_metrics_d_end_system_delay`", 0);

  template <typename A>
  const typename query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::remote_metrics_type_::d_symm_one_way_delay_type_
  query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::remote_metrics_type_::
  d_symm_one_way_delay (A::table_name, "`remote_metrics_d_symm_one_way_delay`", 0);

  template <typename A>
  const typename query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::remote_metrics_type_::d_interarrival_jitter_type_
  query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::remote_metrics_type_::
  d_interarrival_jitter (A::table_name, "`remote_metrics_d_interarrival_jitter`", 0);

  template <typename A>
  const typename query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::remote_metrics_type_::d_mean_abs_jitter_type_
  query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::remote_metrics_type_::
  d_mean_abs_jitter (A::table_name, "`remote_metrics_d_mean_abs_jitter`", 0);

  template <typename A>
  const typename query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::remote_metrics_type_::s_level_type_
  query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::remote_metrics_type_::
  s_level (A::table_name, "`remote_metrics_s_level`", 0);

  template <typename A>
  const typename query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::remote_metrics_type_::s_noise_level_type_
  query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::remote_metrics_type_::
  s_noise_level (A::table_name, "`remote_metrics_s_noise_level`", 0);

  template <typename A>
  const typename query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::remote_metrics_type_::qe_moslq_type_
  query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::remote_metrics_type_::
  qe_moslq (A::table_name, "`remote_metrics_qe_moslq`", 0);

  template <typename A>
  const typename query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::remote_metrics_type_::qe_moscq_type_
  query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::remote_metrics_type_::
  qe_moscq (A::table_name, "`remote_metrics_qe_moscq`", 0);

  template <typename A>
  const typename query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::remote_metrics_type_::user_agent_type_
  query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::remote_metrics_type_::
  user_agent (A::table_name, "`remote_metrics_user_agent`", 0);

  template <typename A>
  const typename query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::remote_metrics_type_
  query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::remote_metrics;

  template <typename A>
  const typename query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::dialog_id_type_
  query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::
  dialog_id (A::table_name, "`dialog_id`", 0);

  template <typename A>
  const typename query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::qos_name_type_
  query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::
  qos_name (A::table_name, "`qos_name`", 0);

  template <typename A>
  const typename query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::qos_timestamp_type_
  query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::
  qos_timestamp (A::table_name, "`qos_timestamp`", 0);

  template <typename A>
  const typename query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::qos_input_leg_type_
  query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::
  qos_input_leg (A::table_name, "`qos_input_leg`", 0);

  template <typename A>
  const typename query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::qos_input_type_
  query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::
  qos_input (A::table_name, "`qos_input`", 0);

  template <typename A>
  const typename query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::qos_output_leg_type_
  query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::
  qos_output_leg (A::table_name, "`qos_output_leg`", 0);

  template <typename A>
  const typename query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::qos_output_type_
  query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >::
  qos_output (A::table_name, "`qos_output`", 0);

  template <typename A>
  struct pointer_query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >:
    query_columns< ::CallQualityStatisticsLogDb, id_mysql, A >
  {
  };

  template <>
  class access::object_traits_impl< ::CallQualityStatisticsLogDb, id_mysql >:
    public access::object_traits< ::CallQualityStatisticsLogDb >
  {
    public:
    typedef polymorphic_entry<object_type, id_mysql> entry_type;
    typedef object_traits_impl<root_type, id_mysql> root_traits;
    typedef object_traits_impl<base_type, id_mysql> base_traits;

    typedef root_traits::id_image_type id_image_type;

    static const info_type info;

    struct image_type
    {
      base_traits::image_type* base;

      // id_
      //
      unsigned long long id_value;
      my_bool id_null;

      // report_type
      //
      details::buffer report_type_value;
      unsigned long report_type_size;
      my_bool report_type_null;

      // call_term_report
      //
      signed char call_term_report_value;
      my_bool call_term_report_null;

      // call_id
      //
      details::buffer call_id_value;
      unsigned long call_id_size;
      my_bool call_id_null;

      // orig_id
      //
      details::buffer orig_id_value;
      unsigned long orig_id_size;
      my_bool orig_id_null;

      // local_addr
      //
      composite_value_traits< ::CallQualityStatisticsLogDb::reporting_addr, id_mysql >::image_type local_addr_value;

      // remote_addr
      //
      composite_value_traits< ::CallQualityStatisticsLogDb::reporting_addr, id_mysql >::image_type remote_addr_value;

      // local_metrics
      //
      composite_value_traits< ::CallQualityStatisticsLogDb::reporting_content_metrics, id_mysql >::image_type local_metrics_value;

      // remote_metrics
      //
      composite_value_traits< ::CallQualityStatisticsLogDb::reporting_content_metrics, id_mysql >::image_type remote_metrics_value;

      // dialog_id
      //
      details::buffer dialog_id_value;
      unsigned long dialog_id_size;
      my_bool dialog_id_null;

      // qos_name
      //
      details::buffer qos_name_value;
      unsigned long qos_name_size;
      my_bool qos_name_null;

      // qos_timestamp
      //
      details::buffer qos_timestamp_value;
      unsigned long qos_timestamp_size;
      my_bool qos_timestamp_null;

      // qos_input_leg
      //
      details::buffer qos_input_leg_value;
      unsigned long qos_input_leg_size;
      my_bool qos_input_leg_null;

      // qos_input
      //
      details::buffer qos_input_value;
      unsigned long qos_input_size;
      my_bool qos_input_null;

      // qos_output_leg
      //
      details::buffer qos_output_leg_value;
      unsigned long qos_output_leg_size;
      my_bool qos_output_leg_null;

      // qos_output
      //
      details::buffer qos_output_value;
      unsigned long qos_output_size;
      my_bool qos_output_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    using object_traits<object_type>::id;

    static bool
    grow (image_type&,
          my_bool*,
          std::size_t = depth);

    static void
    bind (MYSQL_BIND*,
          const MYSQL_BIND* id,
          std::size_t id_size,
          image_type&,
          mysql::statement_kind);

    static void
    bind (MYSQL_BIND*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          mysql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*,
          std::size_t = depth);

    static void
    init (id_image_type&, const id_type&);

    static bool
    check_version (const std::size_t*, const image_type&);

    static void
    update_version (std::size_t*, const image_type&, mysql::binding*);

    typedef
    mysql::polymorphic_derived_object_statements<object_type>
    statements_type;

    typedef
    mysql::polymorphic_root_object_statements<root_type>
    root_statements_type;

    typedef mysql::query_base query_base_type;

    static const std::size_t column_count = 72UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char* const find_statements[depth];
    static const std::size_t find_column_counts[depth];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&, bool top = true, bool dyn = true);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&, bool dyn = true);

    static bool
    reload (database&, object_type&, bool dyn = true);

    static void
    update (database&, const object_type&, bool top = true, bool dyn = true);

    static void
    erase (database&, const id_type&, bool top = true, bool dyn = true);

    static void
    erase (database&, const object_type&, bool top = true, bool dyn = true);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*,
           std::size_t = depth);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload,
           std::size_t = depth);

    static void
    load_ (database&, root_type&, std::size_t);
  };

  template <>
  class access::object_traits_impl< ::CallQualityStatisticsLogDb, id_common >:
    public access::object_traits_impl< ::CallQualityStatisticsLogDb, id_mysql >
  {
  };

  // EventLogDb
  //
  // RegistrationLogDb
  //
  // CallLogDb
  //
  // MessageLogDb
  //
  // AuthLogDb
  //
  // CallQualityStatisticsLogDb
  //
}

#include "eventlogsdb-odb.ixx"

#include <odb/post.hxx>

#endif // EVENTLOGSDB_ODB_HXX
