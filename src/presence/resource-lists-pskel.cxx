// Copyright (c) 2005-2011 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

// Begin prologue.
//
//
// End prologue.

#include "resource-lists-pskel.hxx"

namespace resource_lists
{
  // display_nameType_pskel
  //

  void display_nameType_pskel::
  lang_parser (::namespace_::lang_pskel& p)
  {
    this->lang_parser_ = &p;
  }

  void display_nameType_pskel::
  parsers (::namespace_::lang_pskel& lang)
  {
    this->lang_parser_ = &lang;
  }

  display_nameType_pskel::
  display_nameType_pskel (::xml_schema::string_pskel* tiein)
  : ::xml_schema::string_pskel (tiein, 0),
    display_nameType_impl_ (0),
    lang_parser_ (0)
  {
  }

  display_nameType_pskel::
  display_nameType_pskel (display_nameType_pskel* impl, void*)
  : ::xml_schema::string_pskel (impl, 0),
    display_nameType_impl_ (impl),
    lang_parser_ (0)
  {
  }

  // display_name_pskel
  //

  display_name_pskel::
  display_name_pskel (::resource_lists::display_nameType_pskel* tiein)
  : ::resource_lists::display_nameType_pskel (tiein, 0),
    display_name_impl_ (0)
  {
  }

  display_name_pskel::
  display_name_pskel (display_name_pskel* impl, void*)
  : ::resource_lists::display_nameType_pskel (impl, 0),
    display_name_impl_ (impl)
  {
  }

  // entryType_pskel
  //

  void entryType_pskel::
  uri_parser (::xml_schema::uri_pskel& p)
  {
    this->uri_parser_ = &p;
  }

  void entryType_pskel::
  display_name_parser (::resource_lists::display_name_pskel& p)
  {
    this->display_name_parser_ = &p;
  }

  void entryType_pskel::
  parsers (::xml_schema::uri_pskel& uri,
           ::resource_lists::display_name_pskel& display_name)
  {
    this->uri_parser_ = &uri;
    this->display_name_parser_ = &display_name;
  }

  entryType_pskel::
  entryType_pskel ()
  : entryType_impl_ (0),
    uri_parser_ (0),
    display_name_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_),
    v_state_attr_stack_ (sizeof (v_state_attr_), &v_state_attr_first_)
  {
  }

  entryType_pskel::
  entryType_pskel (entryType_pskel* impl, void*)
  : ::xsde::cxx::parser::validating::complex_content (impl, 0),
    entryType_impl_ (impl),
    uri_parser_ (0),
    display_name_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_),
    v_state_attr_stack_ (sizeof (v_state_attr_), &v_state_attr_first_)
  {
  }

  // entry_refType_pskel
  //

  void entry_refType_pskel::
  ref_parser (::xml_schema::uri_pskel& p)
  {
    this->ref_parser_ = &p;
  }

  void entry_refType_pskel::
  display_name_parser (::resource_lists::display_nameType_pskel& p)
  {
    this->display_name_parser_ = &p;
  }

  void entry_refType_pskel::
  display_name_parser (::xml_schema::parser_map& m)
  {
    this->display_name_parser_map_ = &m;
  }

  void entry_refType_pskel::
  parsers (::xml_schema::uri_pskel& ref,
           ::resource_lists::display_nameType_pskel& display_name)
  {
    this->ref_parser_ = &ref;
    this->display_name_parser_ = &display_name;
  }

  void entry_refType_pskel::
  parser_maps (::xml_schema::parser_map& display_name)
  {
    this->display_name_parser_map_ = &display_name;
  }

  entry_refType_pskel::
  entry_refType_pskel ()
  : entry_refType_impl_ (0),
    ref_parser_ (0),
    display_name_parser_ (0),
    display_name_parser_map_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_),
    v_state_attr_stack_ (sizeof (v_state_attr_), &v_state_attr_first_)
  {
  }

  entry_refType_pskel::
  entry_refType_pskel (entry_refType_pskel* impl, void*)
  : ::xsde::cxx::parser::validating::complex_content (impl, 0),
    entry_refType_impl_ (impl),
    ref_parser_ (0),
    display_name_parser_ (0),
    display_name_parser_map_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_),
    v_state_attr_stack_ (sizeof (v_state_attr_), &v_state_attr_first_)
  {
  }

  // externalType_pskel
  //

  void externalType_pskel::
  anchor_parser (::xml_schema::uri_pskel& p)
  {
    this->anchor_parser_ = &p;
  }

  void externalType_pskel::
  display_name_parser (::resource_lists::display_nameType_pskel& p)
  {
    this->display_name_parser_ = &p;
  }

  void externalType_pskel::
  display_name_parser (::xml_schema::parser_map& m)
  {
    this->display_name_parser_map_ = &m;
  }

  void externalType_pskel::
  parsers (::xml_schema::uri_pskel& anchor,
           ::resource_lists::display_nameType_pskel& display_name)
  {
    this->anchor_parser_ = &anchor;
    this->display_name_parser_ = &display_name;
  }

  void externalType_pskel::
  parser_maps (::xml_schema::parser_map& display_name)
  {
    this->display_name_parser_map_ = &display_name;
  }

  externalType_pskel::
  externalType_pskel ()
  : externalType_impl_ (0),
    anchor_parser_ (0),
    display_name_parser_ (0),
    display_name_parser_map_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  externalType_pskel::
  externalType_pskel (externalType_pskel* impl, void*)
  : ::xsde::cxx::parser::validating::complex_content (impl, 0),
    externalType_impl_ (impl),
    anchor_parser_ (0),
    display_name_parser_ (0),
    display_name_parser_map_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // listType_pskel
  //

  void listType_pskel::
  name_parser (::xml_schema::string_pskel& p)
  {
    this->name_parser_ = &p;
  }

  void listType_pskel::
  display_name_parser (::resource_lists::display_nameType_pskel& p)
  {
    this->display_name_parser_ = &p;
  }

  void listType_pskel::
  display_name_parser (::xml_schema::parser_map& m)
  {
    this->display_name_parser_map_ = &m;
  }

  void listType_pskel::
  list_parser (::resource_lists::list_pskel& p)
  {
    this->list_parser_ = &p;
  }

  void listType_pskel::
  external_parser (::resource_lists::externalType_pskel& p)
  {
    this->external_parser_ = &p;
  }

  void listType_pskel::
  external_parser (::xml_schema::parser_map& m)
  {
    this->external_parser_map_ = &m;
  }

  void listType_pskel::
  entry_parser (::resource_lists::entryType_pskel& p)
  {
    this->entry_parser_ = &p;
  }

  void listType_pskel::
  entry_parser (::xml_schema::parser_map& m)
  {
    this->entry_parser_map_ = &m;
  }

  void listType_pskel::
  entry_ref_parser (::resource_lists::entry_refType_pskel& p)
  {
    this->entry_ref_parser_ = &p;
  }

  void listType_pskel::
  entry_ref_parser (::xml_schema::parser_map& m)
  {
    this->entry_ref_parser_map_ = &m;
  }

  void listType_pskel::
  parsers (::xml_schema::string_pskel& name,
           ::resource_lists::display_nameType_pskel& display_name,
           ::resource_lists::list_pskel& list,
           ::resource_lists::externalType_pskel& external,
           ::resource_lists::entryType_pskel& entry,
           ::resource_lists::entry_refType_pskel& entry_ref)
  {
    this->name_parser_ = &name;
    this->display_name_parser_ = &display_name;
    this->list_parser_ = &list;
    this->external_parser_ = &external;
    this->entry_parser_ = &entry;
    this->entry_ref_parser_ = &entry_ref;
  }

  void listType_pskel::
  parser_maps (::xml_schema::parser_map& display_name,
               ::xml_schema::parser_map& external,
               ::xml_schema::parser_map& entry,
               ::xml_schema::parser_map& entry_ref)
  {
    this->display_name_parser_map_ = &display_name;
    this->external_parser_map_ = &external;
    this->entry_parser_map_ = &entry;
    this->entry_ref_parser_map_ = &entry_ref;
  }

  listType_pskel::
  listType_pskel ()
  : listType_impl_ (0),
    name_parser_ (0),
    display_name_parser_ (0),
    display_name_parser_map_ (0),
    list_parser_ (0),
    external_parser_ (0),
    external_parser_map_ (0),
    entry_parser_ (0),
    entry_parser_map_ (0),
    entry_ref_parser_ (0),
    entry_ref_parser_map_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  listType_pskel::
  listType_pskel (listType_pskel* impl, void*)
  : ::xsde::cxx::parser::validating::complex_content (impl, 0),
    listType_impl_ (impl),
    name_parser_ (0),
    display_name_parser_ (0),
    display_name_parser_map_ (0),
    list_parser_ (0),
    external_parser_ (0),
    external_parser_map_ (0),
    entry_parser_ (0),
    entry_parser_map_ (0),
    entry_ref_parser_ (0),
    entry_ref_parser_map_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // list_pskel
  //

  list_pskel::
  list_pskel (::resource_lists::listType_pskel* tiein)
  : ::resource_lists::listType_pskel (tiein, 0),
    list_impl_ (0)
  {
  }

  list_pskel::
  list_pskel (list_pskel* impl, void*)
  : ::resource_lists::listType_pskel (impl, 0),
    list_impl_ (impl)
  {
  }

  // resource_lists_pskel
  //

  void resource_lists_pskel::
  list_parser (::resource_lists::listType_pskel& p)
  {
    this->list_parser_ = &p;
  }

  void resource_lists_pskel::
  list_parser (::xml_schema::parser_map& m)
  {
    this->list_parser_map_ = &m;
  }

  void resource_lists_pskel::
  parsers (::resource_lists::listType_pskel& list)
  {
    this->list_parser_ = &list;
  }

  void resource_lists_pskel::
  parser_maps (::xml_schema::parser_map& list)
  {
    this->list_parser_map_ = &list;
  }

  resource_lists_pskel::
  resource_lists_pskel ()
  : resource_lists_impl_ (0),
    list_parser_ (0),
    list_parser_map_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  resource_lists_pskel::
  resource_lists_pskel (resource_lists_pskel* impl, void*)
  : ::xsde::cxx::parser::validating::complex_content (impl, 0),
    resource_lists_impl_ (impl),
    list_parser_ (0),
    list_parser_map_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }
}

#include <assert.h>

#include <string.h>
#include <xsde/cxx/parser/substitution-map.hxx>
#include <xsde/cxx/parser/validating/inheritance-map.hxx>

static
const ::xsde::cxx::parser::substitution_map_init
_xsde_substitution_map_init_;

static
const ::xsde::cxx::parser::validating::inheritance_map_init
_xsde_inheritance_map_init_;

namespace resource_lists
{
  // display_nameType_pskel
  //

  void display_nameType_pskel::
  lang (const ::namespace_::lang& x)
  {
    if (this->display_nameType_impl_)
      this->display_nameType_impl_->lang (x);
  }

  void display_nameType_pskel::
  _reset ()
  {
    typedef ::xml_schema::string_pskel base;
    base::_reset ();

    if (this->lang_parser_)
      this->lang_parser_->_reset ();
  }

  const char* display_nameType_pskel::
  _static_type ()
  {
    return "display-nameType urn:ietf:params:xml:ns:resource-lists";
  }

  const char* display_nameType_pskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  static
  const ::xsde::cxx::parser::validating::inheritance_map_entry
  _xsde_display_nameType_pskel_inheritance_map_entry_ (
    display_nameType_pskel::_static_type (),
    ::xml_schema::string_pskel::_static_type ());

  ::std::string display_nameType_pskel::
  post_string ()
  {
    assert (this->string_impl_);
    return this->string_impl_->post_string ();
  }

  // display_name_pskel
  //

  const char* display_name_pskel::
  _static_type ()
  {
    return "display-name urn:ietf:params:xml:ns:resource-lists";
  }

  const char* display_name_pskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  ::resource_lists::display_nameType display_name_pskel::
  post_display_nameType ()
  {
    assert (this->display_nameType_impl_);
    return this->display_nameType_impl_->post_display_nameType ();
  }

  // entryType_pskel
  //

  void entryType_pskel::
  uri (const ::std::string& x)
  {
    if (this->entryType_impl_)
      this->entryType_impl_->uri (x);
  }

  void entryType_pskel::
  display_name (const ::resource_lists::display_name& x)
  {
    if (this->entryType_impl_)
      this->entryType_impl_->display_name (x);
  }

  void entryType_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::parser::validating::complex_content base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->v_state_attr_stack_.clear ();

    if (this->uri_parser_)
      this->uri_parser_->_reset ();

    this->resetting_ = true;

    if (this->display_name_parser_)
      this->display_name_parser_->_reset ();

    this->resetting_ = false;
  }

  const char* entryType_pskel::
  _static_type ()
  {
    return "entryType urn:ietf:params:xml:ns:resource-lists";
  }

  const char* entryType_pskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  // entry_refType_pskel
  //

  void entry_refType_pskel::
  ref (const ::std::string& x)
  {
    if (this->entry_refType_impl_)
      this->entry_refType_impl_->ref (x);
  }

  void entry_refType_pskel::
  display_name (const ::resource_lists::display_nameType& x)
  {
    if (this->entry_refType_impl_)
      this->entry_refType_impl_->display_name (x);
  }

  void entry_refType_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::parser::validating::complex_content base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->v_state_attr_stack_.clear ();

    if (this->ref_parser_)
      this->ref_parser_->_reset ();

    this->resetting_ = true;

    if (this->display_name_parser_)
      this->display_name_parser_->_reset ();

    if (this->display_name_parser_map_)
      this->display_name_parser_map_->reset ();

    this->resetting_ = false;
  }

  const char* entry_refType_pskel::
  _static_type ()
  {
    return "entry-refType urn:ietf:params:xml:ns:resource-lists";
  }

  const char* entry_refType_pskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  // externalType_pskel
  //

  void externalType_pskel::
  anchor (const ::std::string& x)
  {
    if (this->externalType_impl_)
      this->externalType_impl_->anchor (x);
  }

  void externalType_pskel::
  display_name (const ::resource_lists::display_nameType& x)
  {
    if (this->externalType_impl_)
      this->externalType_impl_->display_name (x);
  }

  void externalType_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::parser::validating::complex_content base;
    base::_reset ();

    this->v_state_stack_.clear ();

    if (this->anchor_parser_)
      this->anchor_parser_->_reset ();

    this->resetting_ = true;

    if (this->display_name_parser_)
      this->display_name_parser_->_reset ();

    if (this->display_name_parser_map_)
      this->display_name_parser_map_->reset ();

    this->resetting_ = false;
  }

  const char* externalType_pskel::
  _static_type ()
  {
    return "externalType urn:ietf:params:xml:ns:resource-lists";
  }

  const char* externalType_pskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  // listType_pskel
  //

  void listType_pskel::
  name (const ::std::string& x)
  {
    if (this->listType_impl_)
      this->listType_impl_->name (x);
  }

  void listType_pskel::
  display_name (const ::resource_lists::display_nameType& x)
  {
    if (this->listType_impl_)
      this->listType_impl_->display_name (x);
  }

  void listType_pskel::
  sequence_next ()
  {
    if (this->listType_impl_)
      this->listType_impl_->sequence_next ();
  }

  void listType_pskel::
  choice_arm (choice_arm_tag x)
  {
    if (this->listType_impl_)
      this->listType_impl_->choice_arm (x);
  }

  void listType_pskel::
  list (::resource_lists::list* x)
  {
    if (this->listType_impl_)
      this->listType_impl_->list (x);
  }

  void listType_pskel::
  external (const ::resource_lists::externalType& x)
  {
    if (this->listType_impl_)
      this->listType_impl_->external (x);
  }

  void listType_pskel::
  entry (const ::resource_lists::entryType& x)
  {
    if (this->listType_impl_)
      this->listType_impl_->entry (x);
  }

  void listType_pskel::
  entry_ref (const ::resource_lists::entry_refType& x)
  {
    if (this->listType_impl_)
      this->listType_impl_->entry_ref (x);
  }

  void listType_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::parser::validating::complex_content base;
    base::_reset ();

    this->v_state_stack_.clear ();

    if (this->name_parser_)
      this->name_parser_->_reset ();

    this->resetting_ = true;

    if (this->display_name_parser_)
      this->display_name_parser_->_reset ();

    if (this->display_name_parser_map_)
      this->display_name_parser_map_->reset ();

    if (this->list_parser_)
      this->list_parser_->_reset ();

    if (this->external_parser_)
      this->external_parser_->_reset ();

    if (this->external_parser_map_)
      this->external_parser_map_->reset ();

    if (this->entry_parser_)
      this->entry_parser_->_reset ();

    if (this->entry_parser_map_)
      this->entry_parser_map_->reset ();

    if (this->entry_ref_parser_)
      this->entry_ref_parser_->_reset ();

    if (this->entry_ref_parser_map_)
      this->entry_ref_parser_map_->reset ();

    this->resetting_ = false;
  }

  const char* listType_pskel::
  _static_type ()
  {
    return "listType urn:ietf:params:xml:ns:resource-lists";
  }

  const char* listType_pskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  // list_pskel
  //

  const char* list_pskel::
  _static_type ()
  {
    return "list urn:ietf:params:xml:ns:resource-lists";
  }

  const char* list_pskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  ::resource_lists::listType* list_pskel::
  post_listType ()
  {
    assert (this->listType_impl_);
    return this->listType_impl_->post_listType ();
  }

  // resource_lists_pskel
  //

  void resource_lists_pskel::
  sequence_next ()
  {
    if (this->resource_lists_impl_)
      this->resource_lists_impl_->sequence_next ();
  }

  void resource_lists_pskel::
  list (::resource_lists::listType* x)
  {
    if (this->resource_lists_impl_)
      this->resource_lists_impl_->list (x);
  }

  void resource_lists_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::parser::validating::complex_content base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->list_parser_)
      this->list_parser_->_reset ();

    if (this->list_parser_map_)
      this->list_parser_map_->reset ();

    this->resetting_ = false;
  }

  const char* resource_lists_pskel::
  _static_type ()
  {
    return "resource-lists urn:ietf:params:xml:ns:resource-lists";
  }

  const char* resource_lists_pskel::
  _dynamic_type () const
  {
    return _static_type ();
  }
}

#include <assert.h>

namespace resource_lists
{
  // Element validation and dispatch functions for entryType_pskel.
  //
  bool entryType_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n,
                       const char* t)
  {
    XSDE_UNUSED (t);

    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (base::_start_element_impl (ns, n, t))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "display-name" &&
            ns == "urn:ietf:params:xml:ns:resource-lists")
          s = 0UL;
        else if ((!ns.empty () && ns != "urn:ietf:params:xml:ns:resource-lists"))
          s = 1UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &entryType_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, t, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool entryType_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void entryType_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void entryType_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void entryType_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              const char* t,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (t);
    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "display-name" &&
            ns == "urn:ietf:params:xml:ns:resource-lists")
        {
          if (start)
          {
            if (this->display_name_parser_)
            {
              this->display_name_parser_->pre ();
              ctx.nested_parser (this->display_name_parser_);
            }
          }
          else
          {
            if (this->display_name_parser_ != 0)
            {
              const ::resource_lists::display_name& tmp = this->display_name_parser_->post_display_name ();
              this->display_name (tmp);
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if ((!ns.empty () && ns != "urn:ietf:params:xml:ns:resource-lists"))
        {
          if (start)
          {
            ctx.start_wildcard_content ();
            this->_start_any_element (ns, n, t);
          }
          else
          {
            this->_end_any_element (ns, n);
            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for entry_refType_pskel.
  //
  bool entry_refType_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n,
                       const char* t)
  {
    XSDE_UNUSED (t);

    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (base::_start_element_impl (ns, n, t))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "display-name" &&
            ns == "urn:ietf:params:xml:ns:resource-lists")
          s = 0UL;
        else if ((!ns.empty () && ns != "urn:ietf:params:xml:ns:resource-lists"))
          s = 1UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &entry_refType_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, t, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool entry_refType_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void entry_refType_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void entry_refType_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void entry_refType_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              const char* t,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (t);
    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "display-name" &&
            ns == "urn:ietf:params:xml:ns:resource-lists")
        {
          if (start)
          {
            ::resource_lists::display_nameType_pskel* p = 0;

            if (t == 0 && this->display_name_parser_ != 0)
              p = this->display_name_parser_;
            else
            {
              const char* ts = ::resource_lists::display_nameType_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->display_name_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->display_name_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->display_name_parser_map_ != 0)
                  p = static_cast< ::resource_lists::display_nameType_pskel* > (
                    this->display_name_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::resource_lists::display_nameType_pskel* p =
            static_cast< ::resource_lists::display_nameType_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              const ::resource_lists::display_nameType& tmp = p->post_display_nameType ();
              this->display_name (tmp);
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if ((!ns.empty () && ns != "urn:ietf:params:xml:ns:resource-lists"))
        {
          if (start)
          {
            ctx.start_wildcard_content ();
            this->_start_any_element (ns, n, t);
          }
          else
          {
            this->_end_any_element (ns, n);
            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for externalType_pskel.
  //
  bool externalType_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n,
                       const char* t)
  {
    XSDE_UNUSED (t);

    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (base::_start_element_impl (ns, n, t))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "display-name" &&
            ns == "urn:ietf:params:xml:ns:resource-lists")
          s = 0UL;
        else if ((!ns.empty () && ns != "urn:ietf:params:xml:ns:resource-lists"))
          s = 1UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &externalType_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, t, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool externalType_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void externalType_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void externalType_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void externalType_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              const char* t,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (t);
    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "display-name" &&
            ns == "urn:ietf:params:xml:ns:resource-lists")
        {
          if (start)
          {
            ::resource_lists::display_nameType_pskel* p = 0;

            if (t == 0 && this->display_name_parser_ != 0)
              p = this->display_name_parser_;
            else
            {
              const char* ts = ::resource_lists::display_nameType_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->display_name_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->display_name_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->display_name_parser_map_ != 0)
                  p = static_cast< ::resource_lists::display_nameType_pskel* > (
                    this->display_name_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::resource_lists::display_nameType_pskel* p =
            static_cast< ::resource_lists::display_nameType_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              const ::resource_lists::display_nameType& tmp = p->post_display_nameType ();
              this->display_name (tmp);
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if ((!ns.empty () && ns != "urn:ietf:params:xml:ns:resource-lists"))
        {
          if (start)
          {
            ctx.start_wildcard_content ();
            this->_start_any_element (ns, n, t);
          }
          else
          {
            this->_end_any_element (ns, n);
            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for listType_pskel.
  //
  bool listType_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n,
                       const char* t)
  {
    XSDE_UNUSED (t);

    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (base::_start_element_impl (ns, n, t))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "display-name" &&
            ns == "urn:ietf:params:xml:ns:resource-lists")
          s = 0UL;
        else if ((n == "list" &&
                  ns == "urn:ietf:params:xml:ns:resource-lists") ||
                 (n == "external" &&
                  ns == "urn:ietf:params:xml:ns:resource-lists") ||
                 (n == "entry" &&
                  ns == "urn:ietf:params:xml:ns:resource-lists") ||
                 (n == "entry-ref" &&
                  ns == "urn:ietf:params:xml:ns:resource-lists"))
          s = 1UL;
        else if ((!ns.empty () && ns != "urn:ietf:params:xml:ns:resource-lists"))
          s = 2UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &listType_pskel::sequence_1;
          vd->state = s;
          vd->count = 0;

          this->sequence_1 (vd->state, vd->count, ns, n, t, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool listType_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void listType_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void listType_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void listType_pskel::
  sequence_1 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              const char* t,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (t);
    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "display-name" &&
            ns == "urn:ietf:params:xml:ns:resource-lists")
        {
          if (start)
          {
            ::resource_lists::display_nameType_pskel* p = 0;

            if (t == 0 && this->display_name_parser_ != 0)
              p = this->display_name_parser_;
            else
            {
              const char* ts = ::resource_lists::display_nameType_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->display_name_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->display_name_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->display_name_parser_map_ != 0)
                  p = static_cast< ::resource_lists::display_nameType_pskel* > (
                    this->display_name_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::resource_lists::display_nameType_pskel* p =
            static_cast< ::resource_lists::display_nameType_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              const ::resource_lists::display_nameType& tmp = p->post_display_nameType ();
              this->display_name (tmp);
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        unsigned long s = ~0UL;

        if ((n == "list" &&
             ns == "urn:ietf:params:xml:ns:resource-lists") ||
            (n == "external" &&
             ns == "urn:ietf:params:xml:ns:resource-lists") ||
            (n == "entry" &&
             ns == "urn:ietf:params:xml:ns:resource-lists") ||
            (n == "entry-ref" &&
             ns == "urn:ietf:params:xml:ns:resource-lists"))
          s = 0UL;

        if (s != ~0UL)
        {
          assert (start);
          count++;

          v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
          v_state_descr_& vd = vs.data[vs.size++];

          vd.func = &listType_pskel::sequence_0;
          vd.state = s;
          vd.count = 0;

          this->sequence_next ();
          this->sequence_0 (vd.state, vd.count, ns, n, t, true);
          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if ((!ns.empty () && ns != "urn:ietf:params:xml:ns:resource-lists"))
        {
          if (start)
          {
            ctx.start_wildcard_content ();
            this->_start_any_element (ns, n, t);
          }
          else
          {
            this->_end_any_element (ns, n);
            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  void listType_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              const char* t,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (t);
    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        unsigned long s = ~0UL;

        if (n == "list" &&
            ns == "urn:ietf:params:xml:ns:resource-lists")
          s = 0UL;
        else if (n == "external" &&
                 ns == "urn:ietf:params:xml:ns:resource-lists")
          s = 1UL;
        else if (n == "entry" &&
                 ns == "urn:ietf:params:xml:ns:resource-lists")
          s = 2UL;
        else if (n == "entry-ref" &&
                 ns == "urn:ietf:params:xml:ns:resource-lists")
          s = 3UL;

        if (s != ~0UL)
        {
          assert (start);
          count = 0;
          state = ~0UL;

          v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
          v_state_descr_& vd = vs.data[vs.size++];

          vd.func = &listType_pskel::choice_0;
          vd.state = s;
          vd.count = 0;

          this->choice_arm (static_cast< choice_arm_tag > (s));
          this->choice_0 (vd.state, vd.count, ns, n, t, true);
          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  void listType_pskel::
  choice_0 (unsigned long& state,
            unsigned long& count,
            const ::xsde::cxx::ro_string& ns,
            const ::xsde::cxx::ro_string& n,
            const char* t,
            bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (count);
    XSDE_UNUSED (ns);
    XSDE_UNUSED (n);
    XSDE_UNUSED (ctx);
    XSDE_UNUSED (t);

    switch (state)
    {
      case 0UL:
      {
        if (start)
        {
          if (this->list_parser_)
          {
            this->list_parser_->pre ();
            ctx.nested_parser (this->list_parser_);
          }
        }
        else
        {
          if (this->list_parser_ != 0)
          {
            ::resource_lists::list* tmp = this->list_parser_->post_list ();
            this->list (tmp);
          }

          state = ~0UL;
        }

        break;
      }
      case 1UL:
      {
        if (start)
        {
          ::resource_lists::externalType_pskel* p = 0;

          if (t == 0 && this->external_parser_ != 0)
            p = this->external_parser_;
          else
          {
            const char* ts = ::resource_lists::externalType_pskel::_static_type ();

            if (t == 0)
              t = ts;

            if (this->external_parser_ != 0 && strcmp (t, ts) == 0)
              p = this->external_parser_;
            else
            {
              if (t != ts &&
                  !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
              {
                ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                return;
              }

              if (this->external_parser_map_ != 0)
                p = static_cast< ::resource_lists::externalType_pskel* > (
                  this->external_parser_map_->find (t));
            }
          }

          if (p)
          {
            p->pre ();
            ctx.nested_parser (p);
          }
        }
        else
        {
          ::resource_lists::externalType_pskel* p =
          static_cast< ::resource_lists::externalType_pskel* > (ctx.nested_parser ());

          if (p != 0)
          {
            const ::resource_lists::externalType& tmp = p->post_externalType ();
            this->external (tmp);
          }

          state = ~0UL;
        }

        break;
      }
      case 2UL:
      {
        if (start)
        {
          ::resource_lists::entryType_pskel* p = 0;

          if (t == 0 && this->entry_parser_ != 0)
            p = this->entry_parser_;
          else
          {
            const char* ts = ::resource_lists::entryType_pskel::_static_type ();

            if (t == 0)
              t = ts;

            if (this->entry_parser_ != 0 && strcmp (t, ts) == 0)
              p = this->entry_parser_;
            else
            {
              if (t != ts &&
                  !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
              {
                ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                return;
              }

              if (this->entry_parser_map_ != 0)
                p = static_cast< ::resource_lists::entryType_pskel* > (
                  this->entry_parser_map_->find (t));
            }
          }

          if (p)
          {
            p->pre ();
            ctx.nested_parser (p);
          }
        }
        else
        {
          ::resource_lists::entryType_pskel* p =
          static_cast< ::resource_lists::entryType_pskel* > (ctx.nested_parser ());

          if (p != 0)
          {
            const ::resource_lists::entryType& tmp = p->post_entryType ();
            this->entry (tmp);
          }

          state = ~0UL;
        }

        break;
      }
      case 3UL:
      {
        if (start)
        {
          ::resource_lists::entry_refType_pskel* p = 0;

          if (t == 0 && this->entry_ref_parser_ != 0)
            p = this->entry_ref_parser_;
          else
          {
            const char* ts = ::resource_lists::entry_refType_pskel::_static_type ();

            if (t == 0)
              t = ts;

            if (this->entry_ref_parser_ != 0 && strcmp (t, ts) == 0)
              p = this->entry_ref_parser_;
            else
            {
              if (t != ts &&
                  !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
              {
                ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                return;
              }

              if (this->entry_ref_parser_map_ != 0)
                p = static_cast< ::resource_lists::entry_refType_pskel* > (
                  this->entry_ref_parser_map_->find (t));
            }
          }

          if (p)
          {
            p->pre ();
            ctx.nested_parser (p);
          }
        }
        else
        {
          ::resource_lists::entry_refType_pskel* p =
          static_cast< ::resource_lists::entry_refType_pskel* > (ctx.nested_parser ());

          if (p != 0)
          {
            const ::resource_lists::entry_refType& tmp = p->post_entry_refType ();
            this->entry_ref (tmp);
          }

          state = ~0UL;
        }

        break;
      }
    }
  }

  // Element validation and dispatch functions for resource_lists_pskel.
  //
  bool resource_lists_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n,
                       const char* t)
  {
    XSDE_UNUSED (t);

    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (base::_start_element_impl (ns, n, t))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "list" &&
            ns == "urn:ietf:params:xml:ns:resource-lists")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;

          vd = vs.data + vs.size++;
          vd->func = &resource_lists_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_next ();
          this->sequence_0 (vd->state, vd->count, ns, n, t, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool resource_lists_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void resource_lists_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void resource_lists_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void resource_lists_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              const char* t,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (t);
    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "list" &&
            ns == "urn:ietf:params:xml:ns:resource-lists")
        {
          if (start)
          {
            ::resource_lists::listType_pskel* p = 0;

            if (t == 0 && this->list_parser_ != 0)
              p = this->list_parser_;
            else
            {
              const char* ts = ::resource_lists::listType_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->list_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->list_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->list_parser_map_ != 0)
                  p = static_cast< ::resource_lists::listType_pskel* > (
                    this->list_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::resource_lists::listType_pskel* p =
            static_cast< ::resource_lists::listType_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::resource_lists::listType* tmp = p->post_listType ();
              this->list (tmp);
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }
}

namespace resource_lists
{
  // Attribute validation and dispatch functions for display_nameType_pskel.
  //
  bool display_nameType_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "lang" &&
        ns == "http://www.w3.org/XML/1998/namespace")
    {
      if (this->lang_parser_)
      {
        this->lang_parser_->pre ();

        this->lang_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->lang_parser_->_characters (s);

        if (!ctx.error_type ())
          this->lang_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          const ::namespace_::lang& tmp = this->lang_parser_->post_lang ();

          this->lang (tmp);
        }
      }

      return true;
    }

    typedef ::xml_schema::string_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }

  // Attribute validation and dispatch functions for entryType_pskel.
  //
  bool entryType_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "uri" && ns.empty ())
    {
      if (this->uri_parser_)
      {
        this->uri_parser_->pre ();

        this->uri_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->uri_parser_->_characters (s);

        if (!ctx.error_type ())
          this->uri_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          const ::std::string& tmp = this->uri_parser_->post_uri ();

          this->uri (tmp);
        }
      }

      static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->uri = true;
      return true;
    }

    return false;
  }

  bool entryType_pskel::
  _attribute_impl_phase_two (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    if ((!ns.empty () && ns != "urn:ietf:params:xml:ns:resource-lists"))
    {
      this->_any_attribute (ns, n, s);
      return true;
    }

    return false;
  }

  void entryType_pskel::
  _pre_a_validate ()
  {
    this->v_state_attr_stack_.push ();
    v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

    as.uri = false;
  }

  void entryType_pskel::
  _post_a_validate ()
  {
    v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

    if (!as.uri)
    {
      this->_schema_error (::xsde::cxx::schema_error::expected_attribute);
      return;
    }


    this->v_state_attr_stack_.pop ();
  }

  // Attribute validation and dispatch functions for entry_refType_pskel.
  //
  bool entry_refType_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "ref" && ns.empty ())
    {
      if (this->ref_parser_)
      {
        this->ref_parser_->pre ();

        this->ref_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->ref_parser_->_characters (s);

        if (!ctx.error_type ())
          this->ref_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          const ::std::string& tmp = this->ref_parser_->post_uri ();

          this->ref (tmp);
        }
      }

      static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->ref = true;
      return true;
    }

    return false;
  }

  bool entry_refType_pskel::
  _attribute_impl_phase_two (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    if ((!ns.empty () && ns != "urn:ietf:params:xml:ns:resource-lists"))
    {
      this->_any_attribute (ns, n, s);
      return true;
    }

    return false;
  }

  void entry_refType_pskel::
  _pre_a_validate ()
  {
    this->v_state_attr_stack_.push ();
    v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

    as.ref = false;
  }

  void entry_refType_pskel::
  _post_a_validate ()
  {
    v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

    if (!as.ref)
    {
      this->_schema_error (::xsde::cxx::schema_error::expected_attribute);
      return;
    }


    this->v_state_attr_stack_.pop ();
  }

  // Attribute validation and dispatch functions for externalType_pskel.
  //
  bool externalType_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "anchor" && ns.empty ())
    {
      if (this->anchor_parser_)
      {
        this->anchor_parser_->pre ();

        this->anchor_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->anchor_parser_->_characters (s);

        if (!ctx.error_type ())
          this->anchor_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          const ::std::string& tmp = this->anchor_parser_->post_uri ();

          this->anchor (tmp);
        }
      }

      return true;
    }

    return false;
  }

  bool externalType_pskel::
  _attribute_impl_phase_two (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    if ((!ns.empty () && ns != "urn:ietf:params:xml:ns:resource-lists"))
    {
      this->_any_attribute (ns, n, s);
      return true;
    }

    return false;
  }

  // Attribute validation and dispatch functions for listType_pskel.
  //
  bool listType_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "name" && ns.empty ())
    {
      if (this->name_parser_)
      {
        this->name_parser_->pre ();

        this->name_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->name_parser_->_characters (s);

        if (!ctx.error_type ())
          this->name_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          const ::std::string& tmp = this->name_parser_->post_string ();

          this->name (tmp);
        }
      }

      return true;
    }

    return false;
  }

  bool listType_pskel::
  _attribute_impl_phase_two (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    if ((!ns.empty () && ns != "urn:ietf:params:xml:ns:resource-lists"))
    {
      this->_any_attribute (ns, n, s);
      return true;
    }

    return false;
  }
}

namespace resource_lists
{
}

// Begin epilogue.
//
//
// End epilogue.

