// Copyright (c) 2005-2011 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

// Begin prologue.
//
//
// End prologue.

#include "resource-lists-sskel.hxx"

namespace resource_lists
{
  // display_nameType_sskel
  //

  void display_nameType_sskel::
  lang_serializer (::namespace_::lang_sskel& lang)
  {
    this->lang_serializer_ = &lang;
  }

  void display_nameType_sskel::
  serializers (::namespace_::lang_sskel& lang)
  {
    this->lang_serializer_ = &lang;
  }

  display_nameType_sskel::
  display_nameType_sskel (::xml_schema::string_sskel* tiein)
  : ::xml_schema::string_sskel (tiein, 0),
    display_nameType_impl_ (0),
    lang_serializer_ (0)
  {
  }

  display_nameType_sskel::
  display_nameType_sskel (display_nameType_sskel* impl, void*)
  : ::xml_schema::string_sskel (impl, 0),
    display_nameType_impl_ (impl),
    lang_serializer_ (0)
  {
  }

  // display_name_sskel
  //

  display_name_sskel::
  display_name_sskel (::resource_lists::display_nameType_sskel* tiein)
  : ::resource_lists::display_nameType_sskel (tiein, 0),
    display_name_impl_ (0)
  {
  }

  display_name_sskel::
  display_name_sskel (display_name_sskel* impl, void*)
  : ::resource_lists::display_nameType_sskel (impl, 0),
    display_name_impl_ (impl)
  {
  }

  // entryType_sskel
  //

  void entryType_sskel::
  uri_serializer (::xml_schema::uri_sskel& uri)
  {
    this->uri_serializer_ = &uri;
  }

  void entryType_sskel::
  display_name_serializer (::resource_lists::display_name_sskel& s)
  {
    this->display_name_serializer_ = &s;
  }

  void entryType_sskel::
  serializers (::xml_schema::uri_sskel& uri,
               ::resource_lists::display_name_sskel& display_name)
  {
    this->uri_serializer_ = &uri;
    this->display_name_serializer_ = &display_name;
  }

  entryType_sskel::
  entryType_sskel ()
  : entryType_impl_ (0),
    uri_serializer_ (0),
    display_name_serializer_ (0)
  {
  }

  entryType_sskel::
  entryType_sskel (entryType_sskel* impl, void*)
  : ::xsde::cxx::serializer::validating::complex_content (impl, 0),
    entryType_impl_ (impl),
    uri_serializer_ (0),
    display_name_serializer_ (0)
  {
  }

  // entry_refType_sskel
  //

  void entry_refType_sskel::
  ref_serializer (::xml_schema::uri_sskel& ref)
  {
    this->ref_serializer_ = &ref;
  }

  void entry_refType_sskel::
  display_name_serializer (::resource_lists::display_nameType_sskel& s)
  {
    this->display_name_serializer_ = &s;
  }

  void entry_refType_sskel::
  display_name_serializer (::xml_schema::serializer_map& m)
  {
    this->display_name_serializer_map_ = &m;
  }

  void entry_refType_sskel::
  serializers (::xml_schema::uri_sskel& ref,
               ::resource_lists::display_nameType_sskel& display_name)
  {
    this->ref_serializer_ = &ref;
    this->display_name_serializer_ = &display_name;
  }

  void entry_refType_sskel::
  serializer_maps (::xml_schema::serializer_map& display_name)
  {
    this->display_name_serializer_map_ = &display_name;
  }

  entry_refType_sskel::
  entry_refType_sskel ()
  : entry_refType_impl_ (0),
    ref_serializer_ (0),
    display_name_serializer_ (0),
    display_name_serializer_map_ (0)
  {
  }

  entry_refType_sskel::
  entry_refType_sskel (entry_refType_sskel* impl, void*)
  : ::xsde::cxx::serializer::validating::complex_content (impl, 0),
    entry_refType_impl_ (impl),
    ref_serializer_ (0),
    display_name_serializer_ (0),
    display_name_serializer_map_ (0)
  {
  }

  // externalType_sskel
  //

  void externalType_sskel::
  anchor_serializer (::xml_schema::uri_sskel& anchor)
  {
    this->anchor_serializer_ = &anchor;
  }

  void externalType_sskel::
  display_name_serializer (::resource_lists::display_nameType_sskel& s)
  {
    this->display_name_serializer_ = &s;
  }

  void externalType_sskel::
  display_name_serializer (::xml_schema::serializer_map& m)
  {
    this->display_name_serializer_map_ = &m;
  }

  void externalType_sskel::
  serializers (::xml_schema::uri_sskel& anchor,
               ::resource_lists::display_nameType_sskel& display_name)
  {
    this->anchor_serializer_ = &anchor;
    this->display_name_serializer_ = &display_name;
  }

  void externalType_sskel::
  serializer_maps (::xml_schema::serializer_map& display_name)
  {
    this->display_name_serializer_map_ = &display_name;
  }

  externalType_sskel::
  externalType_sskel ()
  : externalType_impl_ (0),
    anchor_serializer_ (0),
    display_name_serializer_ (0),
    display_name_serializer_map_ (0)
  {
  }

  externalType_sskel::
  externalType_sskel (externalType_sskel* impl, void*)
  : ::xsde::cxx::serializer::validating::complex_content (impl, 0),
    externalType_impl_ (impl),
    anchor_serializer_ (0),
    display_name_serializer_ (0),
    display_name_serializer_map_ (0)
  {
  }

  // listType_sskel
  //

  void listType_sskel::
  name_serializer (::xml_schema::string_sskel& name)
  {
    this->name_serializer_ = &name;
  }

  void listType_sskel::
  display_name_serializer (::resource_lists::display_nameType_sskel& s)
  {
    this->display_name_serializer_ = &s;
  }

  void listType_sskel::
  display_name_serializer (::xml_schema::serializer_map& m)
  {
    this->display_name_serializer_map_ = &m;
  }

  void listType_sskel::
  list_serializer (::resource_lists::list_sskel& s)
  {
    this->list_serializer_ = &s;
  }

  void listType_sskel::
  external_serializer (::resource_lists::externalType_sskel& s)
  {
    this->external_serializer_ = &s;
  }

  void listType_sskel::
  external_serializer (::xml_schema::serializer_map& m)
  {
    this->external_serializer_map_ = &m;
  }

  void listType_sskel::
  entry_serializer (::resource_lists::entryType_sskel& s)
  {
    this->entry_serializer_ = &s;
  }

  void listType_sskel::
  entry_serializer (::xml_schema::serializer_map& m)
  {
    this->entry_serializer_map_ = &m;
  }

  void listType_sskel::
  entry_ref_serializer (::resource_lists::entry_refType_sskel& s)
  {
    this->entry_ref_serializer_ = &s;
  }

  void listType_sskel::
  entry_ref_serializer (::xml_schema::serializer_map& m)
  {
    this->entry_ref_serializer_map_ = &m;
  }

  void listType_sskel::
  serializers (::xml_schema::string_sskel& name,
               ::resource_lists::display_nameType_sskel& display_name,
               ::resource_lists::list_sskel& list,
               ::resource_lists::externalType_sskel& external,
               ::resource_lists::entryType_sskel& entry,
               ::resource_lists::entry_refType_sskel& entry_ref)
  {
    this->name_serializer_ = &name;
    this->display_name_serializer_ = &display_name;
    this->list_serializer_ = &list;
    this->external_serializer_ = &external;
    this->entry_serializer_ = &entry;
    this->entry_ref_serializer_ = &entry_ref;
  }

  void listType_sskel::
  serializer_maps (::xml_schema::serializer_map& display_name,
                   ::xml_schema::serializer_map& external,
                   ::xml_schema::serializer_map& entry,
                   ::xml_schema::serializer_map& entry_ref)
  {
    this->display_name_serializer_map_ = &display_name;
    this->external_serializer_map_ = &external;
    this->entry_serializer_map_ = &entry;
    this->entry_ref_serializer_map_ = &entry_ref;
  }

  listType_sskel::
  listType_sskel ()
  : listType_impl_ (0),
    name_serializer_ (0),
    display_name_serializer_ (0),
    display_name_serializer_map_ (0),
    list_serializer_ (0),
    external_serializer_ (0),
    external_serializer_map_ (0),
    entry_serializer_ (0),
    entry_serializer_map_ (0),
    entry_ref_serializer_ (0),
    entry_ref_serializer_map_ (0)
  {
  }

  listType_sskel::
  listType_sskel (listType_sskel* impl, void*)
  : ::xsde::cxx::serializer::validating::complex_content (impl, 0),
    listType_impl_ (impl),
    name_serializer_ (0),
    display_name_serializer_ (0),
    display_name_serializer_map_ (0),
    list_serializer_ (0),
    external_serializer_ (0),
    external_serializer_map_ (0),
    entry_serializer_ (0),
    entry_serializer_map_ (0),
    entry_ref_serializer_ (0),
    entry_ref_serializer_map_ (0)
  {
  }

  // list_sskel
  //

  list_sskel::
  list_sskel (::resource_lists::listType_sskel* tiein)
  : ::resource_lists::listType_sskel (tiein, 0),
    list_impl_ (0)
  {
  }

  list_sskel::
  list_sskel (list_sskel* impl, void*)
  : ::resource_lists::listType_sskel (impl, 0),
    list_impl_ (impl)
  {
  }

  // resource_lists_sskel
  //

  void resource_lists_sskel::
  list_serializer (::resource_lists::listType_sskel& s)
  {
    this->list_serializer_ = &s;
  }

  void resource_lists_sskel::
  list_serializer (::xml_schema::serializer_map& m)
  {
    this->list_serializer_map_ = &m;
  }

  void resource_lists_sskel::
  serializers (::resource_lists::listType_sskel& list)
  {
    this->list_serializer_ = &list;
  }

  void resource_lists_sskel::
  serializer_maps (::xml_schema::serializer_map& list)
  {
    this->list_serializer_map_ = &list;
  }

  resource_lists_sskel::
  resource_lists_sskel ()
  : resource_lists_impl_ (0),
    list_serializer_ (0),
    list_serializer_map_ (0)
  {
  }

  resource_lists_sskel::
  resource_lists_sskel (resource_lists_sskel* impl, void*)
  : ::xsde::cxx::serializer::validating::complex_content (impl, 0),
    resource_lists_impl_ (impl),
    list_serializer_ (0),
    list_serializer_map_ (0)
  {
  }
}

#include <assert.h>

#include <string.h>
#include <xsde/cxx/serializer/substitution-map.hxx>
#include <xsde/cxx/serializer/validating/inheritance-map.hxx>

static
const ::xsde::cxx::serializer::substitution_map_init
_xsde_substitution_map_init_;

static
const ::xsde::cxx::serializer::validating::inheritance_map_init
_xsde_inheritance_map_init_;

namespace resource_lists
{
  // display_nameType_sskel
  //

  bool display_nameType_sskel::
  lang_present ()
  {
    return this->display_nameType_impl_ ? this->display_nameType_impl_->lang_present () : false;
  }

  void display_nameType_sskel::
  _reset ()
  {
    typedef ::xml_schema::string_sskel base;
    base::_reset ();

    if (this->lang_serializer_)
      this->lang_serializer_->_reset ();
  }

  const char* display_nameType_sskel::
  _static_type ()
  {
    return "display-nameType urn:ietf:params:xml:ns:resource-lists";
  }

  const char* display_nameType_sskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  static
  const ::xsde::cxx::serializer::validating::inheritance_map_entry
  _xsde_display_nameType_sskel_inheritance_map_entry_ (
    display_nameType_sskel::_static_type (),
    ::xml_schema::string_sskel::_static_type ());

  void display_nameType_sskel::
  pre (const ::std::string& x)
  {
    assert (this->string_impl_);
    this->string_impl_->pre (x);
  }

  // display_name_sskel
  //

  const char* display_name_sskel::
  _static_type ()
  {
    return "display-name urn:ietf:params:xml:ns:resource-lists";
  }

  const char* display_name_sskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  void display_name_sskel::
  pre (const ::resource_lists::display_nameType& x)
  {
    assert (this->display_nameType_impl_);
    this->display_nameType_impl_->pre (x);
  }

  const ::namespace_::lang& display_name_sskel::
  lang ()
  {
    assert (this->display_nameType_impl_);
    return this->display_nameType_impl_->lang ();
  }

  // entryType_sskel
  //

  bool entryType_sskel::
  any_attribute_next ()
  {
    return this->entryType_impl_ ? this->entryType_impl_->any_attribute_next () : false;
  }

  void entryType_sskel::
  any_attribute (::std::string& ns, ::std::string& n)
  {
    if (this->entryType_impl_)
      this->entryType_impl_->any_attribute (ns, n);
  }

  void entryType_sskel::
  serialize_any_attribute ()
  {
    if (this->entryType_impl_)
      this->entryType_impl_->serialize_any_attribute ();
  }

  bool entryType_sskel::
  display_name_present ()
  {
    return this->entryType_impl_ ? this->entryType_impl_->display_name_present () : false;
  }

  bool entryType_sskel::
  any_next ()
  {
    return this->entryType_impl_ ? this->entryType_impl_->any_next () : false;
  }

  void entryType_sskel::
  any (::std::string& ns, ::std::string& n)
  {
    if (this->entryType_impl_)
      this->entryType_impl_->any (ns, n);
  }

  void entryType_sskel::
  serialize_any ()
  {
    if (this->entryType_impl_)
      this->entryType_impl_->serialize_any ();
  }

  void entryType_sskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::serializer::validating::complex_content base;
    base::_reset ();

    if (this->uri_serializer_)
      this->uri_serializer_->_reset ();

    this->resetting_ = true;

    if (this->display_name_serializer_)
      this->display_name_serializer_->_reset ();

    this->resetting_ = false;
  }

  const char* entryType_sskel::
  _static_type ()
  {
    return "entryType urn:ietf:params:xml:ns:resource-lists";
  }

  const char* entryType_sskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  // entry_refType_sskel
  //

  bool entry_refType_sskel::
  any_attribute_next ()
  {
    return this->entry_refType_impl_ ? this->entry_refType_impl_->any_attribute_next () : false;
  }

  void entry_refType_sskel::
  any_attribute (::std::string& ns, ::std::string& n)
  {
    if (this->entry_refType_impl_)
      this->entry_refType_impl_->any_attribute (ns, n);
  }

  void entry_refType_sskel::
  serialize_any_attribute ()
  {
    if (this->entry_refType_impl_)
      this->entry_refType_impl_->serialize_any_attribute ();
  }

  bool entry_refType_sskel::
  display_name_present ()
  {
    return this->entry_refType_impl_ ? this->entry_refType_impl_->display_name_present () : false;
  }

  bool entry_refType_sskel::
  any_next ()
  {
    return this->entry_refType_impl_ ? this->entry_refType_impl_->any_next () : false;
  }

  void entry_refType_sskel::
  any (::std::string& ns, ::std::string& n)
  {
    if (this->entry_refType_impl_)
      this->entry_refType_impl_->any (ns, n);
  }

  void entry_refType_sskel::
  serialize_any ()
  {
    if (this->entry_refType_impl_)
      this->entry_refType_impl_->serialize_any ();
  }

  void entry_refType_sskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::serializer::validating::complex_content base;
    base::_reset ();

    if (this->ref_serializer_)
      this->ref_serializer_->_reset ();

    this->resetting_ = true;

    if (this->display_name_serializer_)
      this->display_name_serializer_->_reset ();

    if (this->display_name_serializer_map_)
      this->display_name_serializer_map_->reset ();

    this->resetting_ = false;
  }

  const char* entry_refType_sskel::
  _static_type ()
  {
    return "entry-refType urn:ietf:params:xml:ns:resource-lists";
  }

  const char* entry_refType_sskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  // externalType_sskel
  //

  bool externalType_sskel::
  anchor_present ()
  {
    return this->externalType_impl_ ? this->externalType_impl_->anchor_present () : false;
  }

  bool externalType_sskel::
  any_attribute_next ()
  {
    return this->externalType_impl_ ? this->externalType_impl_->any_attribute_next () : false;
  }

  void externalType_sskel::
  any_attribute (::std::string& ns, ::std::string& n)
  {
    if (this->externalType_impl_)
      this->externalType_impl_->any_attribute (ns, n);
  }

  void externalType_sskel::
  serialize_any_attribute ()
  {
    if (this->externalType_impl_)
      this->externalType_impl_->serialize_any_attribute ();
  }

  bool externalType_sskel::
  display_name_present ()
  {
    return this->externalType_impl_ ? this->externalType_impl_->display_name_present () : false;
  }

  bool externalType_sskel::
  any_next ()
  {
    return this->externalType_impl_ ? this->externalType_impl_->any_next () : false;
  }

  void externalType_sskel::
  any (::std::string& ns, ::std::string& n)
  {
    if (this->externalType_impl_)
      this->externalType_impl_->any (ns, n);
  }

  void externalType_sskel::
  serialize_any ()
  {
    if (this->externalType_impl_)
      this->externalType_impl_->serialize_any ();
  }

  void externalType_sskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::serializer::validating::complex_content base;
    base::_reset ();

    if (this->anchor_serializer_)
      this->anchor_serializer_->_reset ();

    this->resetting_ = true;

    if (this->display_name_serializer_)
      this->display_name_serializer_->_reset ();

    if (this->display_name_serializer_map_)
      this->display_name_serializer_map_->reset ();

    this->resetting_ = false;
  }

  const char* externalType_sskel::
  _static_type ()
  {
    return "externalType urn:ietf:params:xml:ns:resource-lists";
  }

  const char* externalType_sskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  // listType_sskel
  //

  bool listType_sskel::
  name_present ()
  {
    return this->listType_impl_ ? this->listType_impl_->name_present () : false;
  }

  bool listType_sskel::
  any_attribute_next ()
  {
    return this->listType_impl_ ? this->listType_impl_->any_attribute_next () : false;
  }

  void listType_sskel::
  any_attribute (::std::string& ns, ::std::string& n)
  {
    if (this->listType_impl_)
      this->listType_impl_->any_attribute (ns, n);
  }

  void listType_sskel::
  serialize_any_attribute ()
  {
    if (this->listType_impl_)
      this->listType_impl_->serialize_any_attribute ();
  }

  bool listType_sskel::
  display_name_present ()
  {
    return this->listType_impl_ ? this->listType_impl_->display_name_present () : false;
  }

  bool listType_sskel::
  sequence_next ()
  {
    return this->listType_impl_ ? this->listType_impl_->sequence_next () : false;
  }

  bool listType_sskel::
  any_next ()
  {
    return this->listType_impl_ ? this->listType_impl_->any_next () : false;
  }

  void listType_sskel::
  any (::std::string& ns, ::std::string& n)
  {
    if (this->listType_impl_)
      this->listType_impl_->any (ns, n);
  }

  void listType_sskel::
  serialize_any ()
  {
    if (this->listType_impl_)
      this->listType_impl_->serialize_any ();
  }

  void listType_sskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::serializer::validating::complex_content base;
    base::_reset ();

    if (this->name_serializer_)
      this->name_serializer_->_reset ();

    this->resetting_ = true;

    if (this->display_name_serializer_)
      this->display_name_serializer_->_reset ();

    if (this->display_name_serializer_map_)
      this->display_name_serializer_map_->reset ();

    if (this->list_serializer_)
      this->list_serializer_->_reset ();

    if (this->external_serializer_)
      this->external_serializer_->_reset ();

    if (this->external_serializer_map_)
      this->external_serializer_map_->reset ();

    if (this->entry_serializer_)
      this->entry_serializer_->_reset ();

    if (this->entry_serializer_map_)
      this->entry_serializer_map_->reset ();

    if (this->entry_ref_serializer_)
      this->entry_ref_serializer_->_reset ();

    if (this->entry_ref_serializer_map_)
      this->entry_ref_serializer_map_->reset ();

    this->resetting_ = false;
  }

  const char* listType_sskel::
  _static_type ()
  {
    return "listType urn:ietf:params:xml:ns:resource-lists";
  }

  const char* listType_sskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  // list_sskel
  //

  const char* list_sskel::
  _static_type ()
  {
    return "list urn:ietf:params:xml:ns:resource-lists";
  }

  const char* list_sskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  void list_sskel::
  pre (const ::resource_lists::listType& x)
  {
    assert (this->listType_impl_);
    this->listType_impl_->pre (x);
  }

  ::std::string list_sskel::
  name ()
  {
    assert (this->listType_impl_);
    return this->listType_impl_->name ();
  }

  const ::resource_lists::display_nameType& list_sskel::
  display_name ()
  {
    assert (this->listType_impl_);
    return this->listType_impl_->display_name ();
  }

  ::resource_lists::listType_sskel::choice_arm_tag list_sskel::
  choice_arm ()
  {
    assert (this->listType_impl_);
    return this->listType_impl_->choice_arm ();
  }

  const ::resource_lists::list& list_sskel::
  list ()
  {
    assert (this->listType_impl_);
    return this->listType_impl_->list ();
  }

  const ::resource_lists::externalType& list_sskel::
  external ()
  {
    assert (this->listType_impl_);
    return this->listType_impl_->external ();
  }

  const ::resource_lists::entryType& list_sskel::
  entry ()
  {
    assert (this->listType_impl_);
    return this->listType_impl_->entry ();
  }

  const ::resource_lists::entry_refType& list_sskel::
  entry_ref ()
  {
    assert (this->listType_impl_);
    return this->listType_impl_->entry_ref ();
  }

  // resource_lists_sskel
  //

  bool resource_lists_sskel::
  sequence_next ()
  {
    return this->resource_lists_impl_ ? this->resource_lists_impl_->sequence_next () : false;
  }

  void resource_lists_sskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::serializer::validating::complex_content base;
    base::_reset ();

    this->resetting_ = true;

    if (this->list_serializer_)
      this->list_serializer_->_reset ();

    if (this->list_serializer_map_)
      this->list_serializer_map_->reset ();

    this->resetting_ = false;
  }

  const char* resource_lists_sskel::
  _static_type ()
  {
    return "resource-lists urn:ietf:params:xml:ns:resource-lists";
  }

  const char* resource_lists_sskel::
  _dynamic_type () const
  {
    return _static_type ();
  }
}

namespace resource_lists
{
  // Element validation and serialization for entryType_sskel.
  //
  void entryType_sskel::
  _serialize_content ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    // display_name
    //
    if (this->display_name_present ())
    {
      const ::resource_lists::display_name& r = this->display_name ();

      if (this->display_name_serializer_)
      {
        this->display_name_serializer_->pre (r);
        this->_start_element ("urn:ietf:params:xml:ns:resource-lists", "display-name");
        this->display_name_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->display_name_serializer_->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        this->display_name_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->display_name_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        this->display_name_serializer_->post ();
      }
    }

    while (this->any_next ())
    {
      ::std::string ns, name;
      this->any (ns, name);

      if ((!ns.empty () && ns != "urn:ietf:params:xml:ns:resource-lists"))
      {
        if (ns.empty ())
        {
          this->_start_element (name.c_str ());
        }
        else
        {
          this->_start_element (ns.c_str (), name.c_str ());
        }

        this->serialize_any ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
      }
      else
      {
        this->_schema_error (::xsde::cxx::schema_error::unexpected_element);
        return;
      }
    }
  }

  // Element validation and serialization for entry_refType_sskel.
  //
  void entry_refType_sskel::
  _serialize_content ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    // display_name
    //
    if (this->display_name_present ())
    {
      ctx.type_id (0);
      const ::resource_lists::display_nameType& r = this->display_name ();

      const void* t = ctx.type_id ();
      const char* dt = 0;
      ::resource_lists::display_nameType_sskel* s = 0;

      if (t == 0 && this->display_name_serializer_ != 0)
        s = this->display_name_serializer_;
      else if (this->display_name_serializer_map_ != 0)
      {
        ::xml_schema::serializer_base* b = this->display_name_serializer_map_->find (t);

        if (b != 0)
        {
          dt = b->_dynamic_type ();
          const char* st = ::resource_lists::display_nameType_sskel::_static_type ();

          if (strcmp (dt, st) == 0)
            dt = 0;

          if (dt != 0 && !::xsde::cxx::serializer::validating::inheritance_map_instance ().check (dt, st))
          {
            ctx.schema_error (::xsde::cxx::schema_error::not_derived);
            return;
          }

          s = static_cast< ::resource_lists::display_nameType_sskel* > (b);
        }
      }

      if (s)
      {
        s->pre (r);
        this->_start_element ("urn:ietf:params:xml:ns:resource-lists", "display-name");
        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        s->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        s->_serialize_content ();

        if (ctx.error_type ())
          return;

        s->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        s->post ();
      }
    }

    while (this->any_next ())
    {
      ::std::string ns, name;
      this->any (ns, name);

      if ((!ns.empty () && ns != "urn:ietf:params:xml:ns:resource-lists"))
      {
        if (ns.empty ())
        {
          this->_start_element (name.c_str ());
        }
        else
        {
          this->_start_element (ns.c_str (), name.c_str ());
        }

        this->serialize_any ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
      }
      else
      {
        this->_schema_error (::xsde::cxx::schema_error::unexpected_element);
        return;
      }
    }
  }

  // Element validation and serialization for externalType_sskel.
  //
  void externalType_sskel::
  _serialize_content ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    // display_name
    //
    if (this->display_name_present ())
    {
      ctx.type_id (0);
      const ::resource_lists::display_nameType& r = this->display_name ();

      const void* t = ctx.type_id ();
      const char* dt = 0;
      ::resource_lists::display_nameType_sskel* s = 0;

      if (t == 0 && this->display_name_serializer_ != 0)
        s = this->display_name_serializer_;
      else if (this->display_name_serializer_map_ != 0)
      {
        ::xml_schema::serializer_base* b = this->display_name_serializer_map_->find (t);

        if (b != 0)
        {
          dt = b->_dynamic_type ();
          const char* st = ::resource_lists::display_nameType_sskel::_static_type ();

          if (strcmp (dt, st) == 0)
            dt = 0;

          if (dt != 0 && !::xsde::cxx::serializer::validating::inheritance_map_instance ().check (dt, st))
          {
            ctx.schema_error (::xsde::cxx::schema_error::not_derived);
            return;
          }

          s = static_cast< ::resource_lists::display_nameType_sskel* > (b);
        }
      }

      if (s)
      {
        s->pre (r);
        this->_start_element ("urn:ietf:params:xml:ns:resource-lists", "display-name");
        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        s->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        s->_serialize_content ();

        if (ctx.error_type ())
          return;

        s->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        s->post ();
      }
    }

    while (this->any_next ())
    {
      ::std::string ns, name;
      this->any (ns, name);

      if ((!ns.empty () && ns != "urn:ietf:params:xml:ns:resource-lists"))
      {
        if (ns.empty ())
        {
          this->_start_element (name.c_str ());
        }
        else
        {
          this->_start_element (ns.c_str (), name.c_str ());
        }

        this->serialize_any ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
      }
      else
      {
        this->_schema_error (::xsde::cxx::schema_error::unexpected_element);
        return;
      }
    }
  }

  // Element validation and serialization for listType_sskel.
  //
  void listType_sskel::
  _serialize_content ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    // display_name
    //
    if (this->display_name_present ())
    {
      ctx.type_id (0);
      const ::resource_lists::display_nameType& r = this->display_name ();

      const void* t = ctx.type_id ();
      const char* dt = 0;
      ::resource_lists::display_nameType_sskel* s = 0;

      if (t == 0 && this->display_name_serializer_ != 0)
        s = this->display_name_serializer_;
      else if (this->display_name_serializer_map_ != 0)
      {
        ::xml_schema::serializer_base* b = this->display_name_serializer_map_->find (t);

        if (b != 0)
        {
          dt = b->_dynamic_type ();
          const char* st = ::resource_lists::display_nameType_sskel::_static_type ();

          if (strcmp (dt, st) == 0)
            dt = 0;

          if (dt != 0 && !::xsde::cxx::serializer::validating::inheritance_map_instance ().check (dt, st))
          {
            ctx.schema_error (::xsde::cxx::schema_error::not_derived);
            return;
          }

          s = static_cast< ::resource_lists::display_nameType_sskel* > (b);
        }
      }

      if (s)
      {
        s->pre (r);
        this->_start_element ("urn:ietf:params:xml:ns:resource-lists", "display-name");
        if (dt != 0)
          this->_set_type (dt);

        s->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        s->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        s->_serialize_content ();

        if (ctx.error_type ())
          return;

        s->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        s->post ();
      }
    }

    while (this->sequence_next ())
    {
      switch (this->choice_arm ())
      {
        case list_tag:
        {
          // list
          //
          {
            const ::resource_lists::list& r = this->list ();

            if (this->list_serializer_)
            {
              this->list_serializer_->pre (r);
              this->_start_element ("urn:ietf:params:xml:ns:resource-lists", "list");
              this->list_serializer_->_pre_impl (ctx);

              if (ctx.error_type ())
                return;

              this->list_serializer_->_serialize_attributes ();

              if (ctx.error_type ())
                return;

              this->list_serializer_->_serialize_content ();

              if (ctx.error_type ())
                return;

              this->list_serializer_->_post_impl ();

              if (ctx.error_type ())
                return;

              this->_end_element ();
              this->list_serializer_->post ();
            }
            else
            {
              this->_schema_error (::xsde::cxx::schema_error::expected_element);
              return;
            }
          }

          break;
        }
        case external_tag:
        {
          // external
          //
          {
            ctx.type_id (0);
            const ::resource_lists::externalType& r = this->external ();

            const void* t = ctx.type_id ();
            const char* dt = 0;
            ::resource_lists::externalType_sskel* s = 0;

            if (t == 0 && this->external_serializer_ != 0)
              s = this->external_serializer_;
            else if (this->external_serializer_map_ != 0)
            {
              ::xml_schema::serializer_base* b = this->external_serializer_map_->find (t);

              if (b != 0)
              {
                dt = b->_dynamic_type ();
                const char* st = ::resource_lists::externalType_sskel::_static_type ();

                if (strcmp (dt, st) == 0)
                  dt = 0;

                if (dt != 0 && !::xsde::cxx::serializer::validating::inheritance_map_instance ().check (dt, st))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                s = static_cast< ::resource_lists::externalType_sskel* > (b);
              }
            }

            if (s)
            {
              s->pre (r);
              this->_start_element ("urn:ietf:params:xml:ns:resource-lists", "external");
              if (dt != 0)
                this->_set_type (dt);

              s->_pre_impl (ctx);

              if (ctx.error_type ())
                return;

              s->_serialize_attributes ();

              if (ctx.error_type ())
                return;

              s->_serialize_content ();

              if (ctx.error_type ())
                return;

              s->_post_impl ();

              if (ctx.error_type ())
                return;

              this->_end_element ();
              s->post ();
            }
            else
            {
              this->_schema_error (::xsde::cxx::schema_error::expected_element);
              return;
            }
          }

          break;
        }
        case entry_tag:
        {
          // entry
          //
          {
            ctx.type_id (0);
            const ::resource_lists::entryType& r = this->entry ();

            const void* t = ctx.type_id ();
            const char* dt = 0;
            ::resource_lists::entryType_sskel* s = 0;

            if (t == 0 && this->entry_serializer_ != 0)
              s = this->entry_serializer_;
            else if (this->entry_serializer_map_ != 0)
            {
              ::xml_schema::serializer_base* b = this->entry_serializer_map_->find (t);

              if (b != 0)
              {
                dt = b->_dynamic_type ();
                const char* st = ::resource_lists::entryType_sskel::_static_type ();

                if (strcmp (dt, st) == 0)
                  dt = 0;

                if (dt != 0 && !::xsde::cxx::serializer::validating::inheritance_map_instance ().check (dt, st))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                s = static_cast< ::resource_lists::entryType_sskel* > (b);
              }
            }

            if (s)
            {
              s->pre (r);
              this->_start_element ("urn:ietf:params:xml:ns:resource-lists", "entry");
              if (dt != 0)
                this->_set_type (dt);

              s->_pre_impl (ctx);

              if (ctx.error_type ())
                return;

              s->_serialize_attributes ();

              if (ctx.error_type ())
                return;

              s->_serialize_content ();

              if (ctx.error_type ())
                return;

              s->_post_impl ();

              if (ctx.error_type ())
                return;

              this->_end_element ();
              s->post ();
            }
            else
            {
              this->_schema_error (::xsde::cxx::schema_error::expected_element);
              return;
            }
          }

          break;
        }
        case entry_ref_tag:
        {
          // entry_ref
          //
          {
            ctx.type_id (0);
            const ::resource_lists::entry_refType& r = this->entry_ref ();

            const void* t = ctx.type_id ();
            const char* dt = 0;
            ::resource_lists::entry_refType_sskel* s = 0;

            if (t == 0 && this->entry_ref_serializer_ != 0)
              s = this->entry_ref_serializer_;
            else if (this->entry_ref_serializer_map_ != 0)
            {
              ::xml_schema::serializer_base* b = this->entry_ref_serializer_map_->find (t);

              if (b != 0)
              {
                dt = b->_dynamic_type ();
                const char* st = ::resource_lists::entry_refType_sskel::_static_type ();

                if (strcmp (dt, st) == 0)
                  dt = 0;

                if (dt != 0 && !::xsde::cxx::serializer::validating::inheritance_map_instance ().check (dt, st))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                s = static_cast< ::resource_lists::entry_refType_sskel* > (b);
              }
            }

            if (s)
            {
              s->pre (r);
              this->_start_element ("urn:ietf:params:xml:ns:resource-lists", "entry-ref");
              if (dt != 0)
                this->_set_type (dt);

              s->_pre_impl (ctx);

              if (ctx.error_type ())
                return;

              s->_serialize_attributes ();

              if (ctx.error_type ())
                return;

              s->_serialize_content ();

              if (ctx.error_type ())
                return;

              s->_post_impl ();

              if (ctx.error_type ())
                return;

              this->_end_element ();
              s->post ();
            }
            else
            {
              this->_schema_error (::xsde::cxx::schema_error::expected_element);
              return;
            }
          }

          break;
        }
        default:
        {
          this->_schema_error (::xsde::cxx::schema_error::unexpected_element);
          return;
        }
      }
    }

    while (this->any_next ())
    {
      ::std::string ns, name;
      this->any (ns, name);

      if ((!ns.empty () && ns != "urn:ietf:params:xml:ns:resource-lists"))
      {
        if (ns.empty ())
        {
          this->_start_element (name.c_str ());
        }
        else
        {
          this->_start_element (ns.c_str (), name.c_str ());
        }

        this->serialize_any ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
      }
      else
      {
        this->_schema_error (::xsde::cxx::schema_error::unexpected_element);
        return;
      }
    }
  }

  // Element validation and serialization for resource_lists_sskel.
  //
  void resource_lists_sskel::
  _serialize_content ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    while (this->sequence_next ())
    {
      // list
      //
      {
        ctx.type_id (0);
        const ::resource_lists::listType& r = this->list ();

        const void* t = ctx.type_id ();
        const char* dt = 0;
        ::resource_lists::listType_sskel* s = 0;

        if (t == 0 && this->list_serializer_ != 0)
          s = this->list_serializer_;
        else if (this->list_serializer_map_ != 0)
        {
          ::xml_schema::serializer_base* b = this->list_serializer_map_->find (t);

          if (b != 0)
          {
            dt = b->_dynamic_type ();
            const char* st = ::resource_lists::listType_sskel::_static_type ();

            if (strcmp (dt, st) == 0)
              dt = 0;

            if (dt != 0 && !::xsde::cxx::serializer::validating::inheritance_map_instance ().check (dt, st))
            {
              ctx.schema_error (::xsde::cxx::schema_error::not_derived);
              return;
            }

            s = static_cast< ::resource_lists::listType_sskel* > (b);
          }
        }

        if (s)
        {
          s->pre (r);
          this->_start_element ("urn:ietf:params:xml:ns:resource-lists", "list");
          if (dt != 0)
            this->_set_type (dt);

          s->_pre_impl (ctx);

          if (ctx.error_type ())
            return;

          s->_serialize_attributes ();

          if (ctx.error_type ())
            return;

          s->_serialize_content ();

          if (ctx.error_type ())
            return;

          s->_post_impl ();

          if (ctx.error_type ())
            return;

          this->_end_element ();
          s->post ();
        }
        else
        {
          this->_schema_error (::xsde::cxx::schema_error::expected_element);
          return;
        }
      }
    }
  }
}

namespace resource_lists
{
  // Attribute validation and serialization for display_nameType_sskel.
  //
  void display_nameType_sskel::
  _serialize_attributes ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    typedef ::xml_schema::string_sskel base;
    base::_serialize_attributes ();

    if (ctx.error_type ())
      return;

    // lang
    //
    if (this->lang_present ())
    {
      const ::namespace_::lang& r = this->lang ();

      if (this->lang_serializer_)
      {
        this->lang_serializer_->pre (r);
        this->_start_attribute ("http://www.w3.org/XML/1998/namespace", "lang");
        this->lang_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->lang_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->lang_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->lang_serializer_->post ();
      }
    }
  }

  // Attribute validation and serialization for entryType_sskel.
  //
  void entryType_sskel::
  _serialize_attributes ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    // uri
    //
    {
      const ::std::string& r = this->uri ();

      if (this->uri_serializer_)
      {
        this->uri_serializer_->pre (r);
        this->_start_attribute ("uri");
        this->uri_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->uri_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->uri_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->uri_serializer_->post ();
      }
      else
      {
        this->_schema_error (::xsde::cxx::schema_error::expected_attribute);
        return;
      }
    }

    while (this->any_attribute_next ())
    {
      ::std::string ns, name;
      this->any_attribute (ns, name);

      if ((!ns.empty () && ns != "urn:ietf:params:xml:ns:resource-lists"))
      {
        if (ns.empty ())
        {
          this->_start_attribute (name.c_str ());
        }
        else
        {
          this->_start_attribute (ns.c_str (), name.c_str ());
        }

        this->serialize_any_attribute ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
      }
      else
      {
        this->_schema_error (::xsde::cxx::schema_error::unexpected_attribute);
        return;
      }
    }
  }

  // Attribute validation and serialization for entry_refType_sskel.
  //
  void entry_refType_sskel::
  _serialize_attributes ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    // ref
    //
    {
      const ::std::string& r = this->ref ();

      if (this->ref_serializer_)
      {
        this->ref_serializer_->pre (r);
        this->_start_attribute ("ref");
        this->ref_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->ref_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->ref_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->ref_serializer_->post ();
      }
      else
      {
        this->_schema_error (::xsde::cxx::schema_error::expected_attribute);
        return;
      }
    }

    while (this->any_attribute_next ())
    {
      ::std::string ns, name;
      this->any_attribute (ns, name);

      if ((!ns.empty () && ns != "urn:ietf:params:xml:ns:resource-lists"))
      {
        if (ns.empty ())
        {
          this->_start_attribute (name.c_str ());
        }
        else
        {
          this->_start_attribute (ns.c_str (), name.c_str ());
        }

        this->serialize_any_attribute ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
      }
      else
      {
        this->_schema_error (::xsde::cxx::schema_error::unexpected_attribute);
        return;
      }
    }
  }

  // Attribute validation and serialization for externalType_sskel.
  //
  void externalType_sskel::
  _serialize_attributes ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    // anchor
    //
    if (this->anchor_present ())
    {
      const ::std::string& r = this->anchor ();

      if (this->anchor_serializer_)
      {
        this->anchor_serializer_->pre (r);
        this->_start_attribute ("anchor");
        this->anchor_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->anchor_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->anchor_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->anchor_serializer_->post ();
      }
    }

    while (this->any_attribute_next ())
    {
      ::std::string ns, name;
      this->any_attribute (ns, name);

      if ((!ns.empty () && ns != "urn:ietf:params:xml:ns:resource-lists"))
      {
        if (ns.empty ())
        {
          this->_start_attribute (name.c_str ());
        }
        else
        {
          this->_start_attribute (ns.c_str (), name.c_str ());
        }

        this->serialize_any_attribute ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
      }
      else
      {
        this->_schema_error (::xsde::cxx::schema_error::unexpected_attribute);
        return;
      }
    }
  }

  // Attribute validation and serialization for listType_sskel.
  //
  void listType_sskel::
  _serialize_attributes ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    // name
    //
    if (this->name_present ())
    {
      const ::std::string& r = this->name ();

      if (this->name_serializer_)
      {
        this->name_serializer_->pre (r);
        this->_start_attribute ("name");
        this->name_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->name_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->name_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->name_serializer_->post ();
      }
    }

    while (this->any_attribute_next ())
    {
      ::std::string ns, name;
      this->any_attribute (ns, name);

      if ((!ns.empty () && ns != "urn:ietf:params:xml:ns:resource-lists"))
      {
        if (ns.empty ())
        {
          this->_start_attribute (name.c_str ());
        }
        else
        {
          this->_start_attribute (ns.c_str (), name.c_str ());
        }

        this->serialize_any_attribute ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
      }
      else
      {
        this->_schema_error (::xsde::cxx::schema_error::unexpected_attribute);
        return;
      }
    }
  }
}

// Begin epilogue.
//
//
// End epilogue.

