// Copyright (c) 2005-2011 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

// Begin prologue.
//
//
// End prologue.

#include "resource-lists-pimpl.hxx"

#include <xsde/cxx/parser/validating/string-common.hxx>

namespace resource_lists
{
  // display_nameType_pimpl
  //

  display_nameType_pimpl::
  display_nameType_pimpl ()
  : display_nameType_pskel (&base_impl_)
  {
  }

  void display_nameType_pimpl::
  pre ()
  {
    this->base_impl_.pre ();
    this->display_nameType_pimpl_state_.display_nameType_ = ::resource_lists::display_nameType ();
  }

  void display_nameType_pimpl::
  lang (const ::namespace_::lang& x)
  {
    this->display_nameType_pimpl_state_.display_nameType_.lang (x);
  }

  ::resource_lists::display_nameType display_nameType_pimpl::
  post_display_nameType ()
  {
    static_cast< ::std::string& > (this->display_nameType_pimpl_state_.display_nameType_) = 
    this->base_impl_.post_string ();
    return this->display_nameType_pimpl_state_.display_nameType_;
  }

  // display_name_pimpl
  //

  display_name_pimpl::
  display_name_pimpl ()
  : display_name_pskel (&base_impl_)
  {
  }

  void display_name_pimpl::
  pre ()
  {
    this->base_impl_.pre ();
    this->display_name_pimpl_state_.display_name_ = ::resource_lists::display_name ();
  }

  ::resource_lists::display_name display_name_pimpl::
  post_display_name ()
  {
    static_cast< ::resource_lists::display_nameType& > (this->display_name_pimpl_state_.display_name_) = 
    this->base_impl_.post_display_nameType ();
    return this->display_name_pimpl_state_.display_name_;
  }

  // entryType_pimpl
  //

  void entryType_pimpl::
  pre ()
  {
    this->entryType_pimpl_state_.entryType_ = ::resource_lists::entryType ();
  }

  void entryType_pimpl::
  uri (const ::std::string& x)
  {
    this->entryType_pimpl_state_.entryType_.uri (x);
  }

  void entryType_pimpl::
  display_name (const ::resource_lists::display_name& x)
  {
    this->entryType_pimpl_state_.entryType_.display_name (x);
  }

  ::resource_lists::entryType entryType_pimpl::
  post_entryType ()
  {
    return this->entryType_pimpl_state_.entryType_;
  }

  // entry_refType_pimpl
  //

  void entry_refType_pimpl::
  pre ()
  {
    this->entry_refType_pimpl_state_.entry_refType_ = ::resource_lists::entry_refType ();
  }

  void entry_refType_pimpl::
  ref (const ::std::string& x)
  {
    this->entry_refType_pimpl_state_.entry_refType_.ref (x);
  }

  void entry_refType_pimpl::
  display_name (const ::resource_lists::display_nameType& x)
  {
    this->entry_refType_pimpl_state_.entry_refType_.display_name (x);
  }

  ::resource_lists::entry_refType entry_refType_pimpl::
  post_entry_refType ()
  {
    return this->entry_refType_pimpl_state_.entry_refType_;
  }

  // externalType_pimpl
  //

  void externalType_pimpl::
  pre ()
  {
    this->externalType_pimpl_state_.externalType_ = ::resource_lists::externalType ();
  }

  void externalType_pimpl::
  anchor (const ::std::string& x)
  {
    this->externalType_pimpl_state_.externalType_.anchor (x);
  }

  void externalType_pimpl::
  display_name (const ::resource_lists::display_nameType& x)
  {
    this->externalType_pimpl_state_.externalType_.display_name (x);
  }

  ::resource_lists::externalType externalType_pimpl::
  post_externalType ()
  {
    return this->externalType_pimpl_state_.externalType_;
  }

  // listType_pimpl
  //

  listType_pimpl::
  listType_pimpl (bool b)
  : listType_pimpl_state_ (sizeof (listType_pimpl_state ), &listType_pimpl_state_first_)
  {
    this->listType_pimpl_base_ = b;
  }

  listType_pimpl::
  ~listType_pimpl ()
  {
    for (; !this->listType_pimpl_state_.empty (); this->listType_pimpl_state_.pop ())
    {
      if (!this->listType_pimpl_base_ && static_cast< listType_pimpl_state* > (this->listType_pimpl_state_.top ())->listType_)
        delete static_cast< listType_pimpl_state* > (this->listType_pimpl_state_.top ())->listType_;
    }
  }

  void listType_pimpl::
  _reset ()
  {
    listType_pskel::_reset ();

    for (; !this->listType_pimpl_state_.empty (); this->listType_pimpl_state_.pop ())
    {
      if (!this->listType_pimpl_base_ && static_cast< listType_pimpl_state* > (this->listType_pimpl_state_.top ())->listType_)
        delete static_cast< listType_pimpl_state* > (this->listType_pimpl_state_.top ())->listType_;
    }
  }

  void listType_pimpl::
  pre_impl (::resource_lists::listType* x)
  {
    this->listType_pimpl_state_.push ();
    static_cast< listType_pimpl_state* > (this->listType_pimpl_state_.top ())->listType_ = x;
  }

  void listType_pimpl::
  pre ()
  {
    ::resource_lists::listType* x = new ::resource_lists::listType;
    this->pre_impl (x);
  }

  void listType_pimpl::
  name (const ::std::string& x)
  {
    static_cast< listType_pimpl_state* > (this->listType_pimpl_state_.top ())->listType_->name (x);
  }

  void listType_pimpl::
  display_name (const ::resource_lists::display_nameType& x)
  {
    static_cast< listType_pimpl_state* > (this->listType_pimpl_state_.top ())->listType_->display_name (x);
  }

  void listType_pimpl::
  sequence_next ()
  {
    static_cast< listType_pimpl_state* > (this->listType_pimpl_state_.top ())->sequence_ = new ::resource_lists::listType::sequence_type;
    static_cast< listType_pimpl_state* > (this->listType_pimpl_state_.top ())->listType_->sequence ().push_back (static_cast< listType_pimpl_state* > (this->listType_pimpl_state_.top ())->sequence_);
  }

  void listType_pimpl::
  choice_arm (choice_arm_tag t)
  {
    static_cast< listType_pimpl_state* > (this->listType_pimpl_state_.top ())->sequence_->choice_arm (
      static_cast< listType::sequence_type::choice_arm_tag > (t));
  }

  void listType_pimpl::
  list (::resource_lists::list* x)
  {
    static_cast< listType_pimpl_state* > (this->listType_pimpl_state_.top ())->sequence_->list (x);
  }

  void listType_pimpl::
  external (const ::resource_lists::externalType& x)
  {
    static_cast< listType_pimpl_state* > (this->listType_pimpl_state_.top ())->sequence_->external (x);
  }

  void listType_pimpl::
  entry (const ::resource_lists::entryType& x)
  {
    static_cast< listType_pimpl_state* > (this->listType_pimpl_state_.top ())->sequence_->entry (x);
  }

  void listType_pimpl::
  entry_ref (const ::resource_lists::entry_refType& x)
  {
    static_cast< listType_pimpl_state* > (this->listType_pimpl_state_.top ())->sequence_->entry_ref (x);
  }

  ::resource_lists::listType* listType_pimpl::
  post_listType ()
  {
    ::resource_lists::listType* r = static_cast< listType_pimpl_state* > (this->listType_pimpl_state_.top ())->listType_;
    this->listType_pimpl_state_.pop ();
    return r;
  }

  // list_pimpl
  //

  list_pimpl::
  list_pimpl (bool b)
  : list_pskel (&base_impl_),
    base_impl_ (true),
    list_pimpl_state_ (sizeof (list_pimpl_state ), &list_pimpl_state_first_)
  {
    this->list_pimpl_base_ = b;
  }

  list_pimpl::
  ~list_pimpl ()
  {
    for (; !this->list_pimpl_state_.empty (); this->list_pimpl_state_.pop ())
    {
      if (!this->list_pimpl_base_ && static_cast< list_pimpl_state* > (this->list_pimpl_state_.top ())->list_)
        delete static_cast< list_pimpl_state* > (this->list_pimpl_state_.top ())->list_;
    }
  }

  void list_pimpl::
  _reset ()
  {
    list_pskel::_reset ();

    for (; !this->list_pimpl_state_.empty (); this->list_pimpl_state_.pop ())
    {
      if (!this->list_pimpl_base_ && static_cast< list_pimpl_state* > (this->list_pimpl_state_.top ())->list_)
        delete static_cast< list_pimpl_state* > (this->list_pimpl_state_.top ())->list_;
    }
  }

  void list_pimpl::
  pre_impl (::resource_lists::list* x)
  {
    this->list_pimpl_state_.push ();
    static_cast< list_pimpl_state* > (this->list_pimpl_state_.top ())->list_ = x;
    this->base_impl_.pre_impl (x);
  }

  void list_pimpl::
  pre ()
  {
    ::resource_lists::list* x = new ::resource_lists::list;
    this->pre_impl (x);
  }

  ::resource_lists::list* list_pimpl::
  post_list ()
  {
    this->base_impl_.post_listType ();
    ::resource_lists::list* r = static_cast< list_pimpl_state* > (this->list_pimpl_state_.top ())->list_;
    this->list_pimpl_state_.pop ();
    return r;
  }

  // resource_lists_pimpl
  //

  resource_lists_pimpl::
  resource_lists_pimpl (bool b)
  {
    this->resource_lists_pimpl_base_ = b;
    this->resource_lists_pimpl_state_.resource_lists_ = 0;
  }

  resource_lists_pimpl::
  ~resource_lists_pimpl ()
  {
    if (!this->resource_lists_pimpl_base_ && this->resource_lists_pimpl_state_.resource_lists_)
      delete this->resource_lists_pimpl_state_.resource_lists_;
  }

  void resource_lists_pimpl::
  _reset ()
  {
    resource_lists_pskel::_reset ();

    if (!this->resource_lists_pimpl_base_ && this->resource_lists_pimpl_state_.resource_lists_)
    {
      delete this->resource_lists_pimpl_state_.resource_lists_;
      this->resource_lists_pimpl_state_.resource_lists_ = 0;
    }
  }

  void resource_lists_pimpl::
  pre_impl (::resource_lists::resource_lists* x)
  {
    this->resource_lists_pimpl_state_.resource_lists_ = x;
  }

  void resource_lists_pimpl::
  pre ()
  {
    ::resource_lists::resource_lists* x = new ::resource_lists::resource_lists;
    this->pre_impl (x);
  }

  void resource_lists_pimpl::
  sequence_next ()
  {
    this->resource_lists_pimpl_state_.sequence_ = new ::resource_lists::resource_lists::sequence_type;
    this->resource_lists_pimpl_state_.resource_lists_->sequence ().push_back (this->resource_lists_pimpl_state_.sequence_);
  }

  void resource_lists_pimpl::
  list (::resource_lists::listType* x)
  {
    this->resource_lists_pimpl_state_.sequence_->list (x);
  }

  ::resource_lists::resource_lists* resource_lists_pimpl::
  post_resource_lists ()
  {
    ::resource_lists::resource_lists* r = this->resource_lists_pimpl_state_.resource_lists_;
    this->resource_lists_pimpl_state_.resource_lists_ = 0;
    return r;
  }
}

namespace resource_lists
{
  // resource_lists_paggr
  //

  resource_lists_paggr::
  resource_lists_paggr ()
  {
    this->list_p_.parsers (this->string_p_,
                           this->display_nameType_p_,
                           this->list_p_,
                           this->externalType_p_,
                           this->entryType_p_,
                           this->entry_refType_p_);

    this->listType_p_.parsers (this->string_p_,
                               this->display_nameType_p_,
                               this->list_p_,
                               this->externalType_p_,
                               this->entryType_p_,
                               this->entry_refType_p_);

    this->entryType_p_.parsers (this->uri_p_,
                                this->display_name_p_);

    this->display_name_p_.parsers (this->lang_p_);

    this->entry_refType_p_.parsers (this->uri_p_,
                                    this->display_nameType_p_);

    this->externalType_p_.parsers (this->uri_p_,
                                   this->display_nameType_p_);

    this->resource_lists_p_.parsers (this->listType_p_);

    this->display_nameType_p_.parsers (this->lang_p_);
  }

  const char* resource_lists_paggr::
  root_name ()
  {
    return "resource-lists";
  }

  const char* resource_lists_paggr::
  root_namespace ()
  {
    return "urn:ietf:params:xml:ns:resource-lists";
  }
}

// Begin epilogue.
//
//
// End epilogue.

