// Copyright (c) 2005-2011 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

#ifndef RESOURCE_LISTS_SIMPL_HXX
#define RESOURCE_LISTS_SIMPL_HXX

#include <xsde/cxx/pre.hxx>

// Begin prologue.
//
//
// End prologue.

#ifndef XSDE_OMIT_SAGGR
#  define XSDE_OMIT_SAGGR
#  define RESOURCE_LISTS_SIMPL_HXX_CLEAR_OMIT_SAGGR
#endif

#include "resource-lists-sskel.hxx"

#include <xsde/cxx/stack.hxx>

#include "../xml/xml-simpl.hxx"

namespace resource_lists
{
  class display_nameType_simpl: public display_nameType_sskel
  {
    public:
    display_nameType_simpl ();

    virtual void
    pre (const ::resource_lists::display_nameType&);

    // Attributes.
    //
    virtual bool
    lang_present ();

    virtual const ::namespace_::lang&
    lang ();

    public:
    ::xml_schema::string_simpl base_impl_;

    public:
    struct display_nameType_simpl_state
    {
      const ::resource_lists::display_nameType* display_nameType_;
    };

    display_nameType_simpl_state display_nameType_simpl_state_;
  };

  class display_name_simpl: public display_name_sskel
  {
    public:
    display_name_simpl ();

    virtual void
    pre (const ::resource_lists::display_name&);

    public:
    ::resource_lists::display_nameType_simpl base_impl_;

    public:
    struct display_name_simpl_state
    {
      const ::resource_lists::display_name* display_name_;
    };

    display_name_simpl_state display_name_simpl_state_;
  };

  class entryType_simpl: public entryType_sskel
  {
    public:
    virtual void
    pre (const ::resource_lists::entryType&);

    // Attributes.
    //
    virtual ::std::string
    uri ();

    // Elements.
    //
    virtual bool
    display_name_present ();

    virtual const ::resource_lists::display_name&
    display_name ();

    public:
    struct entryType_simpl_state
    {
      const ::resource_lists::entryType* entryType_;
    };

    entryType_simpl_state entryType_simpl_state_;
  };

  class entry_refType_simpl: public entry_refType_sskel
  {
    public:
    virtual void
    pre (const ::resource_lists::entry_refType&);

    // Attributes.
    //
    virtual ::std::string
    ref ();

    // Elements.
    //
    virtual bool
    display_name_present ();

    virtual const ::resource_lists::display_nameType&
    display_name ();

    public:
    struct entry_refType_simpl_state
    {
      const ::resource_lists::entry_refType* entry_refType_;
    };

    entry_refType_simpl_state entry_refType_simpl_state_;
  };

  class externalType_simpl: public externalType_sskel
  {
    public:
    virtual void
    pre (const ::resource_lists::externalType&);

    // Attributes.
    //
    virtual bool
    anchor_present ();

    virtual ::std::string
    anchor ();

    // Elements.
    //
    virtual bool
    display_name_present ();

    virtual const ::resource_lists::display_nameType&
    display_name ();

    public:
    struct externalType_simpl_state
    {
      const ::resource_lists::externalType* externalType_;
    };

    externalType_simpl_state externalType_simpl_state_;
  };

  class listType_simpl: public listType_sskel
  {
    public:
    listType_simpl ();

    virtual void
    pre (const ::resource_lists::listType&);

    // Attributes.
    //
    virtual bool
    name_present ();

    virtual ::std::string
    name ();

    // Elements.
    //
    virtual bool
    display_name_present ();

    virtual const ::resource_lists::display_nameType&
    display_name ();

    virtual bool
    sequence_next ();

    virtual choice_arm_tag
    choice_arm ();

    virtual const ::resource_lists::list&
    list ();

    virtual const ::resource_lists::externalType&
    external ();

    virtual const ::resource_lists::entryType&
    entry ();

    virtual const ::resource_lists::entry_refType&
    entry_ref ();

    virtual void
    post ();

    virtual void
    _reset ();

    public:
    struct listType_simpl_state
    {
      const ::resource_lists::listType* listType_;
      ::resource_lists::listType::sequence_const_iterator sequence_;
      ::resource_lists::listType::sequence_const_iterator sequence_end_;
    };

    listType_simpl_state listType_simpl_state_first_;
    ::xsde::cxx::stack listType_simpl_state_;
  };

  class list_simpl: public list_sskel
  {
    public:
    list_simpl ();

    virtual void
    pre (const ::resource_lists::list&);

    virtual void
    post ();

    virtual void
    _reset ();

    public:
    ::resource_lists::listType_simpl base_impl_;

    public:
    struct list_simpl_state
    {
      const ::resource_lists::list* list_;
    };

    list_simpl_state list_simpl_state_first_;
    ::xsde::cxx::stack list_simpl_state_;
  };

  class resource_lists_simpl: public resource_lists_sskel
  {
    public:
    virtual void
    pre (const ::resource_lists::resource_lists&);

    // Elements.
    //
    virtual bool
    sequence_next ();

    virtual const ::resource_lists::listType&
    list ();

    public:
    struct resource_lists_simpl_state
    {
      const ::resource_lists::resource_lists* resource_lists_;
      ::resource_lists::resource_lists::sequence_const_iterator sequence_;
      ::resource_lists::resource_lists::sequence_const_iterator sequence_end_;
    };

    resource_lists_simpl_state resource_lists_simpl_state_;
  };
}

#ifdef RESOURCE_LISTS_SIMPL_HXX_CLEAR_OMIT_SAGGR
#  undef XSDE_OMIT_SAGGR
#endif

#ifndef XSDE_OMIT_SAGGR

#include <xsde/cxx/hybrid/serializer-map.hxx>

namespace resource_lists
{
  // Serializer aggregate for the resource-lists element.
  //
  class resource_lists_saggr
  {
    public:
    resource_lists_saggr ();

    void
    pre (const ::resource_lists::resource_lists& x)
    {
      this->resource_lists_s_.pre (x);
    }

    void
    post ()
    {
      this->resource_lists_s_.post ();
    }

    ::resource_lists::resource_lists_simpl&
    root_serializer ()
    {
      return this->resource_lists_s_;
    }

    static const char*
    root_name ();

    static const char*
    root_namespace ();

    void
    reset ()
    {
      this->resource_lists_s_._reset ();
    }

    static bool
    polymorphic ()
    {
      return false;
    }

    public:
    ::xml_schema::string_simpl string_s_;
    ::xml_schema::uri_simpl uri_s_;
    ::namespace_::lang_simpl lang_s_;
    ::resource_lists::listType_simpl listType_s_;
    ::resource_lists::entryType_simpl entryType_s_;
    ::resource_lists::list_simpl list_s_;
    ::resource_lists::entry_refType_simpl entry_refType_s_;
    ::resource_lists::display_name_simpl display_name_s_;
    ::resource_lists::externalType_simpl externalType_s_;
    ::resource_lists::resource_lists_simpl resource_lists_s_;
    ::resource_lists::display_nameType_simpl display_nameType_s_;
  };
}

#endif // XSDE_OMIT_SAGGR

// Begin epilogue.
//
//
// End epilogue.

#include <xsde/cxx/post.hxx>

#endif // RESOURCE_LISTS_SIMPL_HXX
