// Copyright (c) 2005-2011 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

// Begin prologue.
//
//
// End prologue.

#include "pidf+xml-pskel.hxx"

namespace pidf
{
  // note_pskel
  //

  void note_pskel::
  lang_parser (::namespace_::lang_pskel& p)
  {
    this->lang_parser_ = &p;
  }

  void note_pskel::
  parsers (::namespace_::lang_pskel& lang)
  {
    this->lang_parser_ = &lang;
  }

  note_pskel::
  note_pskel (::xml_schema::string_pskel* tiein)
  : ::xml_schema::string_pskel (tiein, 0),
    note_impl_ (0),
    lang_parser_ (0)
  {
  }

  note_pskel::
  note_pskel (note_pskel* impl, void*)
  : ::xml_schema::string_pskel (impl, 0),
    note_impl_ (impl),
    lang_parser_ (0)
  {
  }

  // presence_pskel
  //

  void presence_pskel::
  entity_parser (::xml_schema::uri_pskel& p)
  {
    this->entity_parser_ = &p;
  }

  void presence_pskel::
  tuple_parser (::pidf::tuple_pskel& p)
  {
    this->tuple_parser_ = &p;
  }

  void presence_pskel::
  tuple_parser (::xml_schema::parser_map& m)
  {
    this->tuple_parser_map_ = &m;
  }

  void presence_pskel::
  note_parser (::pidf::note_pskel& p)
  {
    this->note_parser_ = &p;
  }

  void presence_pskel::
  note_parser (::xml_schema::parser_map& m)
  {
    this->note_parser_map_ = &m;
  }

  void presence_pskel::
  parsers (::xml_schema::uri_pskel& entity,
           ::pidf::tuple_pskel& tuple,
           ::pidf::note_pskel& note)
  {
    this->entity_parser_ = &entity;
    this->tuple_parser_ = &tuple;
    this->note_parser_ = &note;
  }

  void presence_pskel::
  parser_maps (::xml_schema::parser_map& tuple,
               ::xml_schema::parser_map& note)
  {
    this->tuple_parser_map_ = &tuple;
    this->note_parser_map_ = &note;
  }

  presence_pskel::
  presence_pskel ()
  : presence_impl_ (0),
    entity_parser_ (0),
    tuple_parser_ (0),
    tuple_parser_map_ (0),
    note_parser_ (0),
    note_parser_map_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_),
    v_state_attr_stack_ (sizeof (v_state_attr_), &v_state_attr_first_)
  {
  }

  presence_pskel::
  presence_pskel (presence_pskel* impl, void*)
  : ::xsde::cxx::parser::validating::complex_content (impl, 0),
    presence_impl_ (impl),
    entity_parser_ (0),
    tuple_parser_ (0),
    tuple_parser_map_ (0),
    note_parser_ (0),
    note_parser_map_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_),
    v_state_attr_stack_ (sizeof (v_state_attr_), &v_state_attr_first_)
  {
  }

  // basic_pskel
  //

  basic_pskel::
  basic_pskel (::xml_schema::string_pskel* tiein)
  : ::xml_schema::string_pskel (tiein, 0),
    basic_impl_ (0)
  {
    this->_enumeration_facet (_xsde_basic_pskel_enums_, 2UL);
  }

  basic_pskel::
  basic_pskel (basic_pskel* impl, void*)
  : ::xml_schema::string_pskel (impl, 0),
    basic_impl_ (impl)
  {
    this->_enumeration_facet (_xsde_basic_pskel_enums_, 2UL);
  }

  // status_pskel
  //

  void status_pskel::
  basic_parser (::pidf::basic_pskel& p)
  {
    this->basic_parser_ = &p;
  }

  void status_pskel::
  basic_parser (::xml_schema::parser_map& m)
  {
    this->basic_parser_map_ = &m;
  }

  void status_pskel::
  parsers (::pidf::basic_pskel& basic)
  {
    this->basic_parser_ = &basic;
  }

  void status_pskel::
  parser_maps (::xml_schema::parser_map& basic)
  {
    this->basic_parser_map_ = &basic;
  }

  status_pskel::
  status_pskel ()
  : status_impl_ (0),
    basic_parser_ (0),
    basic_parser_map_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  status_pskel::
  status_pskel (status_pskel* impl, void*)
  : ::xsde::cxx::parser::validating::complex_content (impl, 0),
    status_impl_ (impl),
    basic_parser_ (0),
    basic_parser_map_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // qvalue_pskel
  //

  qvalue_pskel::
  qvalue_pskel (::xml_schema::decimal_pskel* tiein)
  : ::xml_schema::decimal_pskel (tiein, 0),
    qvalue_impl_ (0)
  {
  }

  qvalue_pskel::
  qvalue_pskel (qvalue_pskel* impl, void*)
  : ::xml_schema::decimal_pskel (impl, 0),
    qvalue_impl_ (impl)
  {
  }

  // contact_pskel
  //

  void contact_pskel::
  priority_parser (::pidf::qvalue_pskel& p)
  {
    this->priority_parser_ = &p;
  }

  void contact_pskel::
  parsers (::pidf::qvalue_pskel& priority)
  {
    this->priority_parser_ = &priority;
  }

  contact_pskel::
  contact_pskel (::xml_schema::uri_pskel* tiein)
  : ::xml_schema::uri_pskel (tiein, 0),
    contact_impl_ (0),
    priority_parser_ (0)
  {
  }

  contact_pskel::
  contact_pskel (contact_pskel* impl, void*)
  : ::xml_schema::uri_pskel (impl, 0),
    contact_impl_ (impl),
    priority_parser_ (0)
  {
  }

  // tuple_pskel
  //

  void tuple_pskel::
  id_parser (::xml_schema::id_pskel& p)
  {
    this->id_parser_ = &p;
  }

  void tuple_pskel::
  status_parser (::pidf::status_pskel& p)
  {
    this->status_parser_ = &p;
  }

  void tuple_pskel::
  status_parser (::xml_schema::parser_map& m)
  {
    this->status_parser_map_ = &m;
  }

  void tuple_pskel::
  contact_parser (::pidf::contact_pskel& p)
  {
    this->contact_parser_ = &p;
  }

  void tuple_pskel::
  contact_parser (::xml_schema::parser_map& m)
  {
    this->contact_parser_map_ = &m;
  }

  void tuple_pskel::
  note_parser (::pidf::note_pskel& p)
  {
    this->note_parser_ = &p;
  }

  void tuple_pskel::
  note_parser (::xml_schema::parser_map& m)
  {
    this->note_parser_map_ = &m;
  }

  void tuple_pskel::
  timestamp_parser (::xml_schema::date_time_pskel& p)
  {
    this->timestamp_parser_ = &p;
  }

  void tuple_pskel::
  timestamp_parser (::xml_schema::parser_map& m)
  {
    this->timestamp_parser_map_ = &m;
  }

  void tuple_pskel::
  parsers (::xml_schema::id_pskel& id,
           ::pidf::status_pskel& status,
           ::pidf::contact_pskel& contact,
           ::pidf::note_pskel& note,
           ::xml_schema::date_time_pskel& timestamp)
  {
    this->id_parser_ = &id;
    this->status_parser_ = &status;
    this->contact_parser_ = &contact;
    this->note_parser_ = &note;
    this->timestamp_parser_ = &timestamp;
  }

  void tuple_pskel::
  parser_maps (::xml_schema::parser_map& status,
               ::xml_schema::parser_map& contact,
               ::xml_schema::parser_map& note,
               ::xml_schema::parser_map& timestamp)
  {
    this->status_parser_map_ = &status;
    this->contact_parser_map_ = &contact;
    this->note_parser_map_ = &note;
    this->timestamp_parser_map_ = &timestamp;
  }

  tuple_pskel::
  tuple_pskel ()
  : tuple_impl_ (0),
    id_parser_ (0),
    status_parser_ (0),
    status_parser_map_ (0),
    contact_parser_ (0),
    contact_parser_map_ (0),
    note_parser_ (0),
    note_parser_map_ (0),
    timestamp_parser_ (0),
    timestamp_parser_map_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_),
    v_state_attr_stack_ (sizeof (v_state_attr_), &v_state_attr_first_)
  {
  }

  tuple_pskel::
  tuple_pskel (tuple_pskel* impl, void*)
  : ::xsde::cxx::parser::validating::complex_content (impl, 0),
    tuple_impl_ (impl),
    id_parser_ (0),
    status_parser_ (0),
    status_parser_map_ (0),
    contact_parser_ (0),
    contact_parser_map_ (0),
    note_parser_ (0),
    note_parser_map_ (0),
    timestamp_parser_ (0),
    timestamp_parser_map_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_),
    v_state_attr_stack_ (sizeof (v_state_attr_), &v_state_attr_first_)
  {
  }
}

#include <assert.h>

#include <string.h>
#include <xsde/cxx/parser/substitution-map.hxx>
#include <xsde/cxx/parser/validating/inheritance-map.hxx>

static
const ::xsde::cxx::parser::substitution_map_init
_xsde_substitution_map_init_;

static
const ::xsde::cxx::parser::validating::inheritance_map_init
_xsde_inheritance_map_init_;

namespace pidf
{
  // note_pskel
  //

  void note_pskel::
  lang (const ::namespace_::lang& x)
  {
    if (this->note_impl_)
      this->note_impl_->lang (x);
  }

  void note_pskel::
  _reset ()
  {
    typedef ::xml_schema::string_pskel base;
    base::_reset ();

    if (this->lang_parser_)
      this->lang_parser_->_reset ();
  }

  const char* note_pskel::
  _static_type ()
  {
    return "note urn:ietf:params:xml:ns:pidf";
  }

  const char* note_pskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  static
  const ::xsde::cxx::parser::validating::inheritance_map_entry
  _xsde_note_pskel_inheritance_map_entry_ (
    note_pskel::_static_type (),
    ::xml_schema::string_pskel::_static_type ());

  ::std::string note_pskel::
  post_string ()
  {
    assert (this->string_impl_);
    return this->string_impl_->post_string ();
  }

  // presence_pskel
  //

  void presence_pskel::
  entity (const ::std::string& x)
  {
    if (this->presence_impl_)
      this->presence_impl_->entity (x);
  }

  void presence_pskel::
  tuple (::pidf::tuple* x)
  {
    if (this->presence_impl_)
      this->presence_impl_->tuple (x);
  }

  void presence_pskel::
  note (const ::pidf::note& x)
  {
    if (this->presence_impl_)
      this->presence_impl_->note (x);
  }

  void presence_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::parser::validating::complex_content base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->v_state_attr_stack_.clear ();

    if (this->entity_parser_)
      this->entity_parser_->_reset ();

    this->resetting_ = true;

    if (this->tuple_parser_)
      this->tuple_parser_->_reset ();

    if (this->tuple_parser_map_)
      this->tuple_parser_map_->reset ();

    if (this->note_parser_)
      this->note_parser_->_reset ();

    if (this->note_parser_map_)
      this->note_parser_map_->reset ();

    this->resetting_ = false;
  }

  const char* presence_pskel::
  _static_type ()
  {
    return "presence urn:ietf:params:xml:ns:pidf";
  }

  const char* presence_pskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  // basic_pskel
  //

  const char* basic_pskel::
  _static_type ()
  {
    return "basic urn:ietf:params:xml:ns:pidf";
  }

  const char* basic_pskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  static
  const ::xsde::cxx::parser::validating::inheritance_map_entry
  _xsde_basic_pskel_inheritance_map_entry_ (
    basic_pskel::_static_type (),
    ::xml_schema::string_pskel::_static_type ());

  ::std::string basic_pskel::
  post_string ()
  {
    assert (this->string_impl_);
    return this->string_impl_->post_string ();
  }

  const char* const basic_pskel::_xsde_basic_pskel_enums_[2UL] = 
  {
    "closed",
    "open"
  };

  // status_pskel
  //

  void status_pskel::
  basic (const ::pidf::basic& x)
  {
    if (this->status_impl_)
      this->status_impl_->basic (x);
  }

  void status_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::parser::validating::complex_content base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->basic_parser_)
      this->basic_parser_->_reset ();

    if (this->basic_parser_map_)
      this->basic_parser_map_->reset ();

    this->resetting_ = false;
  }

  const char* status_pskel::
  _static_type ()
  {
    return "status urn:ietf:params:xml:ns:pidf";
  }

  const char* status_pskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  // qvalue_pskel
  //

  const char* qvalue_pskel::
  _static_type ()
  {
    return "qvalue urn:ietf:params:xml:ns:pidf";
  }

  const char* qvalue_pskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  static
  const ::xsde::cxx::parser::validating::inheritance_map_entry
  _xsde_qvalue_pskel_inheritance_map_entry_ (
    qvalue_pskel::_static_type (),
    ::xml_schema::decimal_pskel::_static_type ());

  double qvalue_pskel::
  post_decimal ()
  {
    assert (this->decimal_impl_);
    return this->decimal_impl_->post_decimal ();
  }

  // contact_pskel
  //

  void contact_pskel::
  priority (const ::pidf::qvalue& x)
  {
    if (this->contact_impl_)
      this->contact_impl_->priority (x);
  }

  void contact_pskel::
  _reset ()
  {
    typedef ::xml_schema::uri_pskel base;
    base::_reset ();

    if (this->priority_parser_)
      this->priority_parser_->_reset ();
  }

  const char* contact_pskel::
  _static_type ()
  {
    return "contact urn:ietf:params:xml:ns:pidf";
  }

  const char* contact_pskel::
  _dynamic_type () const
  {
    return _static_type ();
  }

  static
  const ::xsde::cxx::parser::validating::inheritance_map_entry
  _xsde_contact_pskel_inheritance_map_entry_ (
    contact_pskel::_static_type (),
    ::xml_schema::uri_pskel::_static_type ());

  ::std::string contact_pskel::
  post_uri ()
  {
    assert (this->uri_impl_);
    return this->uri_impl_->post_uri ();
  }

  // tuple_pskel
  //

  void tuple_pskel::
  id (const ::std::string& x)
  {
    if (this->tuple_impl_)
      this->tuple_impl_->id (x);
  }

  void tuple_pskel::
  status (const ::pidf::status& x)
  {
    if (this->tuple_impl_)
      this->tuple_impl_->status (x);
  }

  void tuple_pskel::
  contact (const ::pidf::contact& x)
  {
    if (this->tuple_impl_)
      this->tuple_impl_->contact (x);
  }

  void tuple_pskel::
  note (const ::pidf::note& x)
  {
    if (this->tuple_impl_)
      this->tuple_impl_->note (x);
  }

  void tuple_pskel::
  timestamp (const ::xml_schema::date_time& x)
  {
    if (this->tuple_impl_)
      this->tuple_impl_->timestamp (x);
  }

  void tuple_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::parser::validating::complex_content base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->v_state_attr_stack_.clear ();

    if (this->id_parser_)
      this->id_parser_->_reset ();

    this->resetting_ = true;

    if (this->status_parser_)
      this->status_parser_->_reset ();

    if (this->status_parser_map_)
      this->status_parser_map_->reset ();

    if (this->contact_parser_)
      this->contact_parser_->_reset ();

    if (this->contact_parser_map_)
      this->contact_parser_map_->reset ();

    if (this->note_parser_)
      this->note_parser_->_reset ();

    if (this->note_parser_map_)
      this->note_parser_map_->reset ();

    if (this->timestamp_parser_)
      this->timestamp_parser_->_reset ();

    if (this->timestamp_parser_map_)
      this->timestamp_parser_map_->reset ();

    this->resetting_ = false;
  }

  const char* tuple_pskel::
  _static_type ()
  {
    return "tuple urn:ietf:params:xml:ns:pidf";
  }

  const char* tuple_pskel::
  _dynamic_type () const
  {
    return _static_type ();
  }
}

#include <assert.h>

namespace pidf
{
  // Element validation and dispatch functions for presence_pskel.
  //
  bool presence_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n,
                       const char* t)
  {
    XSDE_UNUSED (t);

    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (base::_start_element_impl (ns, n, t))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "tuple" &&
            ns == "urn:ietf:params:xml:ns:pidf")
          s = 0UL;
        else if (n == "note" &&
                 ns == "urn:ietf:params:xml:ns:pidf")
          s = 1UL;
        else if ((!ns.empty () && ns != "urn:ietf:params:xml:ns:pidf"))
          s = 2UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &presence_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, t, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool presence_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void presence_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void presence_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void presence_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              const char* t,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (t);
    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "tuple" &&
            ns == "urn:ietf:params:xml:ns:pidf")
        {
          if (start)
          {
            ::pidf::tuple_pskel* p = 0;

            if (t == 0 && this->tuple_parser_ != 0)
              p = this->tuple_parser_;
            else
            {
              const char* ts = ::pidf::tuple_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->tuple_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->tuple_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->tuple_parser_map_ != 0)
                  p = static_cast< ::pidf::tuple_pskel* > (
                    this->tuple_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::pidf::tuple_pskel* p =
            static_cast< ::pidf::tuple_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              ::pidf::tuple* tmp = p->post_tuple ();
              this->tuple (tmp);
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "note" &&
            ns == "urn:ietf:params:xml:ns:pidf")
        {
          if (start)
          {
            ::pidf::note_pskel* p = 0;

            if (t == 0 && this->note_parser_ != 0)
              p = this->note_parser_;
            else
            {
              const char* ts = ::pidf::note_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->note_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->note_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->note_parser_map_ != 0)
                  p = static_cast< ::pidf::note_pskel* > (
                    this->note_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::pidf::note_pskel* p =
            static_cast< ::pidf::note_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              const ::pidf::note& tmp = p->post_note ();
              this->note (tmp);
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if ((!ns.empty () && ns != "urn:ietf:params:xml:ns:pidf"))
        {
          if (start)
          {
            ctx.start_wildcard_content ();
            this->_start_any_element (ns, n, t);
          }
          else
          {
            this->_end_any_element (ns, n);
            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for status_pskel.
  //
  bool status_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n,
                       const char* t)
  {
    XSDE_UNUSED (t);

    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (base::_start_element_impl (ns, n, t))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "basic" &&
            ns == "urn:ietf:params:xml:ns:pidf")
          s = 0UL;
        else if ((!ns.empty () && ns != "urn:ietf:params:xml:ns:pidf"))
          s = 1UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &status_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, t, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool status_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void status_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void status_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void status_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              const char* t,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (t);
    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "basic" &&
            ns == "urn:ietf:params:xml:ns:pidf")
        {
          if (start)
          {
            ::pidf::basic_pskel* p = 0;

            if (t == 0 && this->basic_parser_ != 0)
              p = this->basic_parser_;
            else
            {
              const char* ts = ::pidf::basic_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->basic_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->basic_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->basic_parser_map_ != 0)
                  p = static_cast< ::pidf::basic_pskel* > (
                    this->basic_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::pidf::basic_pskel* p =
            static_cast< ::pidf::basic_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              const ::pidf::basic& tmp = p->post_basic ();
              this->basic (tmp);
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if ((!ns.empty () && ns != "urn:ietf:params:xml:ns:pidf"))
        {
          if (start)
          {
            ctx.start_wildcard_content ();
            this->_start_any_element (ns, n, t);
          }
          else
          {
            this->_end_any_element (ns, n);
            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for tuple_pskel.
  //
  bool tuple_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n,
                       const char* t)
  {
    XSDE_UNUSED (t);

    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (base::_start_element_impl (ns, n, t))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "status" &&
            ns == "urn:ietf:params:xml:ns:pidf")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &tuple_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, t, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool tuple_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void tuple_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void tuple_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void tuple_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              const char* t,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (t);
    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "status" &&
            ns == "urn:ietf:params:xml:ns:pidf")
        {
          if (start)
          {
            ::pidf::status_pskel* p = 0;

            if (t == 0 && this->status_parser_ != 0)
              p = this->status_parser_;
            else
            {
              const char* ts = ::pidf::status_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->status_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->status_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->status_parser_map_ != 0)
                  p = static_cast< ::pidf::status_pskel* > (
                    this->status_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::pidf::status_pskel* p =
            static_cast< ::pidf::status_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              const ::pidf::status& tmp = p->post_status ();
              this->status (tmp);
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if ((!ns.empty () && ns != "urn:ietf:params:xml:ns:pidf"))
        {
          if (start)
          {
            ctx.start_wildcard_content ();
            this->_start_any_element (ns, n, t);
          }
          else
          {
            this->_end_any_element (ns, n);
            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "contact" &&
            ns == "urn:ietf:params:xml:ns:pidf")
        {
          if (start)
          {
            ::pidf::contact_pskel* p = 0;

            if (t == 0 && this->contact_parser_ != 0)
              p = this->contact_parser_;
            else
            {
              const char* ts = ::pidf::contact_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->contact_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->contact_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->contact_parser_map_ != 0)
                  p = static_cast< ::pidf::contact_pskel* > (
                    this->contact_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::pidf::contact_pskel* p =
            static_cast< ::pidf::contact_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              const ::pidf::contact& tmp = p->post_contact ();
              this->contact (tmp);
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "note" &&
            ns == "urn:ietf:params:xml:ns:pidf")
        {
          if (start)
          {
            ::pidf::note_pskel* p = 0;

            if (t == 0 && this->note_parser_ != 0)
              p = this->note_parser_;
            else
            {
              const char* ts = ::pidf::note_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->note_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->note_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->note_parser_map_ != 0)
                  p = static_cast< ::pidf::note_pskel* > (
                    this->note_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::pidf::note_pskel* p =
            static_cast< ::pidf::note_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              const ::pidf::note& tmp = p->post_note ();
              this->note (tmp);
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "timestamp" &&
            ns == "urn:ietf:params:xml:ns:pidf")
        {
          if (start)
          {
            ::xml_schema::date_time_pskel* p = 0;

            if (t == 0 && this->timestamp_parser_ != 0)
              p = this->timestamp_parser_;
            else
            {
              const char* ts = ::xml_schema::date_time_pskel::_static_type ();

              if (t == 0)
                t = ts;

              if (this->timestamp_parser_ != 0 && strcmp (t, ts) == 0)
                p = this->timestamp_parser_;
              else
              {
                if (t != ts &&
                    !::xsde::cxx::parser::validating::inheritance_map_instance ().check (t, ts))
                {
                  ctx.schema_error (::xsde::cxx::schema_error::not_derived);
                  return;
                }

                if (this->timestamp_parser_map_ != 0)
                  p = static_cast< ::xml_schema::date_time_pskel* > (
                    this->timestamp_parser_map_->find (t));
              }
            }

            if (p)
            {
              p->pre ();
              ctx.nested_parser (p);
            }
          }
          else
          {
            ::xml_schema::date_time_pskel* p =
            static_cast< ::xml_schema::date_time_pskel* > (ctx.nested_parser ());

            if (p != 0)
            {
              const ::xml_schema::date_time& tmp = p->post_date_time ();
              this->timestamp (tmp);
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }
}

namespace pidf
{
  // Attribute validation and dispatch functions for note_pskel.
  //
  bool note_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "lang" &&
        ns == "http://www.w3.org/XML/1998/namespace")
    {
      if (this->lang_parser_)
      {
        this->lang_parser_->pre ();

        this->lang_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->lang_parser_->_characters (s);

        if (!ctx.error_type ())
          this->lang_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          const ::namespace_::lang& tmp = this->lang_parser_->post_lang ();

          this->lang (tmp);
        }
      }

      return true;
    }

    typedef ::xml_schema::string_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }

  // Attribute validation and dispatch functions for presence_pskel.
  //
  bool presence_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "entity" && ns.empty ())
    {
      if (this->entity_parser_)
      {
        this->entity_parser_->pre ();

        this->entity_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->entity_parser_->_characters (s);

        if (!ctx.error_type ())
          this->entity_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          const ::std::string& tmp = this->entity_parser_->post_uri ();

          this->entity (tmp);
        }
      }

      static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->entity = true;
      return true;
    }

    return false;
  }

  void presence_pskel::
  _pre_a_validate ()
  {
    this->v_state_attr_stack_.push ();
    v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

    as.entity = false;
  }

  void presence_pskel::
  _post_a_validate ()
  {
    v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

    if (!as.entity)
    {
      this->_schema_error (::xsde::cxx::schema_error::expected_attribute);
      return;
    }


    this->v_state_attr_stack_.pop ();
  }

  // Attribute validation and dispatch functions for contact_pskel.
  //
  bool contact_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "priority" && ns.empty ())
    {
      if (this->priority_parser_)
      {
        this->priority_parser_->pre ();

        this->priority_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->priority_parser_->_characters (s);

        if (!ctx.error_type ())
          this->priority_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          const ::pidf::qvalue& tmp = this->priority_parser_->post_qvalue ();

          this->priority (tmp);
        }
      }

      return true;
    }

    typedef ::xml_schema::uri_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }

  // Attribute validation and dispatch functions for tuple_pskel.
  //
  bool tuple_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "id" && ns.empty ())
    {
      if (this->id_parser_)
      {
        this->id_parser_->pre ();

        this->id_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->id_parser_->_characters (s);

        if (!ctx.error_type ())
          this->id_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          const ::std::string& tmp = this->id_parser_->post_id ();

          this->id (tmp);
        }
      }

      static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->id = true;
      return true;
    }

    return false;
  }

  void tuple_pskel::
  _pre_a_validate ()
  {
    this->v_state_attr_stack_.push ();
    v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

    as.id = false;
  }

  void tuple_pskel::
  _post_a_validate ()
  {
    v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

    if (!as.id)
    {
      this->_schema_error (::xsde::cxx::schema_error::expected_attribute);
      return;
    }


    this->v_state_attr_stack_.pop ();
  }
}

namespace pidf
{
}

// Begin epilogue.
//
//
// End epilogue.

