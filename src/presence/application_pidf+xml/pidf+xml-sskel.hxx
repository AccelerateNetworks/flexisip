// Copyright (c) 2005-2011 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

#ifndef PIDF_XML_SSKEL_HXX
#define PIDF_XML_SSKEL_HXX

#include <xsde/cxx/version.hxx>

#if (XSDE_INT_VERSION != 3020000L)
#error XSD/e runtime version mismatch
#endif

#include <xsde/cxx/config.hxx>

#ifndef XSDE_ENCODING_UTF8
#error the generated code uses the UTF-8 encodingwhile the XSD/e runtime does not (reconfigure the runtime or change the --char-encoding value)
#endif

#ifndef XSDE_STL
#error the generated code uses STL while the XSD/e runtime does not (reconfigure the runtime or add --no-stl)
#endif

#ifndef XSDE_IOSTREAM
#error the generated code uses iostream while the XSD/e runtime does not (reconfigure the runtime or add --no-iostream)
#endif

#ifndef XSDE_EXCEPTIONS
#error the generated code uses exceptions while the XSD/e runtime does not (reconfigure the runtime or add --no-exceptions)
#endif

#ifndef XSDE_LONGLONG
#error the generated code uses long long while the XSD/e runtime does not (reconfigure the runtime or add --no-long-long)
#endif

#ifndef XSDE_SERIALIZER_VALIDATION
#error the generated code uses validation while the XSD/e runtime does not (reconfigure the runtime or add --suppress-validation)
#endif

#ifndef XSDE_POLYMORPHIC
#error the generated code expects XSD/e runtime with polymorphism support (reconfigure the runtime or remove --generate-polymorphic/--runtime-polymorphic)
#endif

#ifndef XSDE_REUSE_STYLE_TIEIN
#error the generated code uses the tiein reuse style while the XSD/e runtime does not (reconfigure the runtime or add --reuse-style-mixin or --reuse-style-none)
#endif

#ifdef XSDE_CUSTOM_ALLOCATOR
#error the XSD/e runtime uses custom allocator while the generated code does not (reconfigure the runtime or add --custom-allocator)
#endif

#include <xsde/cxx/pre.hxx>

// Begin prologue.
//

#include <xsde/cxx/hybrid/any-type.hxx>
#include <xsde/cxx/hybrid/any-type-sskel.hxx>
#include <xsde/cxx/hybrid/any-type-simpl.hxx>

namespace xml_schema
{
  using ::xsde::cxx::hybrid::any_type;

  using ::xsde::cxx::hybrid::any_type_sskel;
  using ::xsde::cxx::hybrid::any_type_simpl;
}


//
// End prologue.

// Forward declarations
//
namespace pidf
{
  class note_sskel;
  class presence_sskel;
  class basic_sskel;
  class status_sskel;
  class qvalue_sskel;
  class contact_sskel;
  class tuple_sskel;
}


#include <string>

#include <xsde/cxx/serializer/xml-schema.hxx>

#include <xsde/cxx/serializer/exceptions.hxx>

#include <xsde/cxx/serializer/map.hxx>
#include <xsde/cxx/serializer/substitution-map-callback.hxx>
#include <xsde/cxx/serializer/substitution-map-load.hxx>
#include <xsde/cxx/serializer/validating/inheritance-map-load.hxx>

#include <xsde/cxx/serializer/validating/serializer.hxx>
#include <xsde/cxx/serializer/validating/xml-schema-sskel.hxx>
#include <xsde/cxx/serializer/validating/xml-schema-simpl.hxx>

#include <xsde/cxx/serializer/genx/document.hxx>

#include "pidf+xml.hxx"

namespace xml_schema
{
  // Built-in XML Schema types mapping.
  //
  using ::xsde::cxx::string_sequence;
  using ::xsde::cxx::qname;
  using ::xsde::cxx::buffer;
  using ::xsde::cxx::time_zone;
  using ::xsde::cxx::gday;
  using ::xsde::cxx::gmonth;
  using ::xsde::cxx::gyear;
  using ::xsde::cxx::gmonth_day;
  using ::xsde::cxx::gyear_month;
  using ::xsde::cxx::date;
  using ::xsde::cxx::time;
  using ::xsde::cxx::date_time;
  using ::xsde::cxx::duration;

  // Base serializer skeletons.
  //
  using ::xsde::cxx::serializer::serializer_base;
  typedef ::xsde::cxx::serializer::validating::empty_content serializer_empty_content;
  typedef ::xsde::cxx::serializer::validating::simple_content serializer_simple_content;
  typedef ::xsde::cxx::serializer::validating::complex_content serializer_complex_content;

  // Serializer map interface and default implementation.
  //
  using ::xsde::cxx::serializer::serializer_map;
  using ::xsde::cxx::serializer::serializer_map_impl;

  // Serializer substitution map callack.
  //
  using ::xsde::cxx::serializer::serializer_smap_callback;

  // Substitution and inheritance hashmaps load querying.
  //
  using ::xsde::cxx::serializer::serializer_smap_buckets;
  using ::xsde::cxx::serializer::serializer_smap_elements;
  using ::xsde::cxx::serializer::serializer_smap_bucket_buckets;
  using ::xsde::cxx::serializer::serializer_smap_bucket_elements;
  using ::xsde::cxx::serializer::validating::serializer_imap_buckets;
  using ::xsde::cxx::serializer::validating::serializer_imap_elements;

  // Serializer skeletons and implementations for the
  // XML Schema built-in types.
  //
  using ::xsde::cxx::serializer::validating::any_simple_type_sskel;
  using ::xsde::cxx::serializer::validating::any_simple_type_simpl;

  using ::xsde::cxx::serializer::validating::byte_sskel;
  using ::xsde::cxx::serializer::validating::byte_simpl;

  using ::xsde::cxx::serializer::validating::unsigned_byte_sskel;
  using ::xsde::cxx::serializer::validating::unsigned_byte_simpl;

  using ::xsde::cxx::serializer::validating::short_sskel;
  using ::xsde::cxx::serializer::validating::short_simpl;

  using ::xsde::cxx::serializer::validating::unsigned_short_sskel;
  using ::xsde::cxx::serializer::validating::unsigned_short_simpl;

  using ::xsde::cxx::serializer::validating::int_sskel;
  using ::xsde::cxx::serializer::validating::int_simpl;

  using ::xsde::cxx::serializer::validating::unsigned_int_sskel;
  using ::xsde::cxx::serializer::validating::unsigned_int_simpl;

  using ::xsde::cxx::serializer::validating::long_sskel;
  using ::xsde::cxx::serializer::validating::long_simpl;

  using ::xsde::cxx::serializer::validating::unsigned_long_sskel;
  using ::xsde::cxx::serializer::validating::unsigned_long_simpl;

  using ::xsde::cxx::serializer::validating::integer_sskel;
  using ::xsde::cxx::serializer::validating::integer_simpl;

  using ::xsde::cxx::serializer::validating::non_positive_integer_sskel;
  using ::xsde::cxx::serializer::validating::non_positive_integer_simpl;

  using ::xsde::cxx::serializer::validating::non_negative_integer_sskel;
  using ::xsde::cxx::serializer::validating::non_negative_integer_simpl;

  using ::xsde::cxx::serializer::validating::positive_integer_sskel;
  using ::xsde::cxx::serializer::validating::positive_integer_simpl;

  using ::xsde::cxx::serializer::validating::negative_integer_sskel;
  using ::xsde::cxx::serializer::validating::negative_integer_simpl;

  using ::xsde::cxx::serializer::validating::boolean_sskel;
  using ::xsde::cxx::serializer::validating::boolean_simpl;

  using ::xsde::cxx::serializer::validating::float_sskel;
  using ::xsde::cxx::serializer::validating::float_simpl;

  using ::xsde::cxx::serializer::validating::double_sskel;
  using ::xsde::cxx::serializer::validating::double_simpl;

  using ::xsde::cxx::serializer::validating::decimal_sskel;
  using ::xsde::cxx::serializer::validating::decimal_simpl;

  using ::xsde::cxx::serializer::validating::string_sskel;
  using ::xsde::cxx::serializer::validating::string_simpl;

  using ::xsde::cxx::serializer::validating::normalized_string_sskel;
  using ::xsde::cxx::serializer::validating::normalized_string_simpl;

  using ::xsde::cxx::serializer::validating::token_sskel;
  using ::xsde::cxx::serializer::validating::token_simpl;

  using ::xsde::cxx::serializer::validating::name_sskel;
  using ::xsde::cxx::serializer::validating::name_simpl;

  using ::xsde::cxx::serializer::validating::nmtoken_sskel;
  using ::xsde::cxx::serializer::validating::nmtoken_simpl;

  using ::xsde::cxx::serializer::validating::nmtokens_sskel;
  using ::xsde::cxx::serializer::validating::nmtokens_simpl;

  using ::xsde::cxx::serializer::validating::ncname_sskel;
  using ::xsde::cxx::serializer::validating::ncname_simpl;

  using ::xsde::cxx::serializer::validating::language_sskel;
  using ::xsde::cxx::serializer::validating::language_simpl;

  using ::xsde::cxx::serializer::validating::id_sskel;
  using ::xsde::cxx::serializer::validating::id_simpl;

  using ::xsde::cxx::serializer::validating::idref_sskel;
  using ::xsde::cxx::serializer::validating::idref_simpl;

  using ::xsde::cxx::serializer::validating::idrefs_sskel;
  using ::xsde::cxx::serializer::validating::idrefs_simpl;

  using ::xsde::cxx::serializer::validating::uri_sskel;
  using ::xsde::cxx::serializer::validating::uri_simpl;

  using ::xsde::cxx::serializer::validating::qname_sskel;
  using ::xsde::cxx::serializer::validating::qname_simpl;

  using ::xsde::cxx::serializer::validating::base64_binary_sskel;
  using ::xsde::cxx::serializer::validating::base64_binary_simpl;

  using ::xsde::cxx::serializer::validating::hex_binary_sskel;
  using ::xsde::cxx::serializer::validating::hex_binary_simpl;

  using ::xsde::cxx::serializer::validating::date_sskel;
  using ::xsde::cxx::serializer::validating::date_simpl;

  using ::xsde::cxx::serializer::validating::date_time_sskel;
  using ::xsde::cxx::serializer::validating::date_time_simpl;

  using ::xsde::cxx::serializer::validating::duration_sskel;
  using ::xsde::cxx::serializer::validating::duration_simpl;

  using ::xsde::cxx::serializer::validating::gday_sskel;
  using ::xsde::cxx::serializer::validating::gday_simpl;

  using ::xsde::cxx::serializer::validating::gmonth_sskel;
  using ::xsde::cxx::serializer::validating::gmonth_simpl;

  using ::xsde::cxx::serializer::validating::gmonth_day_sskel;
  using ::xsde::cxx::serializer::validating::gmonth_day_simpl;

  using ::xsde::cxx::serializer::validating::gyear_sskel;
  using ::xsde::cxx::serializer::validating::gyear_simpl;

  using ::xsde::cxx::serializer::validating::gyear_month_sskel;
  using ::xsde::cxx::serializer::validating::gyear_month_simpl;

  using ::xsde::cxx::serializer::validating::time_sskel;
  using ::xsde::cxx::serializer::validating::time_simpl;

  // Error codes.
  //
  typedef xsde::cxx::serializer::genx::xml_error serializer_xml_error;
  typedef xsde::cxx::schema_error serializer_schema_error;

  // Exceptions.
  //
  typedef xsde::cxx::serializer::exception serializer_exception;
  typedef xsde::cxx::serializer::xml serializer_xml;
  typedef xsde::cxx::serializer::schema serializer_schema;

  // Document serializer.
  //
  using xsde::cxx::serializer::genx::writer;
  using xsde::cxx::serializer::genx::document_simpl;

  // Serializer context.
  //
  typedef xsde::cxx::serializer::context serializer_context;
}

#include "../xml/xml-sskel.hxx"

namespace pidf
{
  class note_sskel: public ::xml_schema::string_sskel
  {
    public:
    // Serializer callbacks. Override them in your implementation.
    //

    virtual void
    pre (const ::pidf::note&) = 0;

    // Attributes.
    //
    virtual bool
    lang_present ();

    virtual const ::namespace_::lang&
    lang () = 0;

    // virtual void
    // post ();

    // Serializer construction API.
    //
    void
    serializers (::namespace_::lang_sskel& /* lang */);

    // Individual attribute serializers.
    //
    void
    lang_serializer (::namespace_::lang_sskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    note_sskel (::xml_schema::string_sskel* tiein);

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation.
    //
    public:
    virtual void
    pre (const ::std::string&);

    virtual void
    _serialize_attributes ();

    protected:
    note_sskel* note_impl_;
    note_sskel (note_sskel*, void*);

    protected:
    ::namespace_::lang_sskel* lang_serializer_;
  };

  class presence_sskel: public ::xsde::cxx::serializer::validating::complex_content
  {
    public:
    // Serializer callbacks. Override them in your implementation.
    //

    virtual void
    pre (const ::pidf::presence&) = 0;

    // Attributes.
    //
    virtual ::std::string
    entity () = 0;

    // Elements.
    //
    virtual bool
    tuple_next ();

    virtual const ::pidf::tuple&
    tuple () = 0;

    virtual bool
    note_next ();

    virtual const ::pidf::note&
    note () = 0;

    virtual bool
    any_next ();

    virtual void
    any (::std::string& ns, ::std::string& name);

    virtual void
    serialize_any ();

    // virtual void
    // post ();

    // Serializer construction API.
    //
    void
    serializers (::xml_schema::uri_sskel& /* entity */,
                 ::pidf::tuple_sskel& /* tuple */,
                 ::pidf::note_sskel& /* note */);

    void
    serializer_maps (::xml_schema::serializer_map& /* tuple */,
                     ::xml_schema::serializer_map& /* note */);

    // Individual attribute serializers.
    //
    void
    entity_serializer (::xml_schema::uri_sskel&);

    // Individual element serializers.
    //
    void
    tuple_serializer (::pidf::tuple_sskel&);

    void
    tuple_serializer (::xml_schema::serializer_map&);

    void
    note_serializer (::pidf::note_sskel&);

    void
    note_serializer (::xml_schema::serializer_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    presence_sskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation.
    //
    public:
    virtual void
    _serialize_attributes ();

    virtual void
    _serialize_content ();

    protected:
    presence_sskel* presence_impl_;
    presence_sskel (presence_sskel*, void*);

    protected:
    ::xml_schema::uri_sskel* entity_serializer_;
    ::pidf::tuple_sskel* tuple_serializer_;
    ::xml_schema::serializer_map* tuple_serializer_map_;

    ::pidf::note_sskel* note_serializer_;
    ::xml_schema::serializer_map* note_serializer_map_;
  };

  class basic_sskel: public ::xml_schema::string_sskel
  {
    public:
    // Serializer callbacks. Override them in your implementation.
    //

    virtual void
    pre (const ::pidf::basic&) = 0;

    // virtual void
    // post ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Constructor.
    //
    basic_sskel (::xml_schema::string_sskel* tiein);

    // Implementation details.
    //
    virtual void
    pre (const ::std::string&);

    protected:
    basic_sskel* basic_impl_;
    basic_sskel (basic_sskel*, void*);

    protected:
    static const char* const _xsde_basic_sskel_enums_[2UL];
  };

  class status_sskel: public ::xsde::cxx::serializer::validating::complex_content
  {
    public:
    // Serializer callbacks. Override them in your implementation.
    //

    virtual void
    pre (const ::pidf::status&) = 0;

    // Elements.
    //
    virtual bool
    basic_present ();

    virtual const ::pidf::basic&
    basic () = 0;

    virtual bool
    any_next ();

    virtual void
    any (::std::string& ns, ::std::string& name);

    virtual void
    serialize_any ();

    // virtual void
    // post ();

    // Serializer construction API.
    //
    void
    serializers (::pidf::basic_sskel& /* basic */);

    void
    serializer_maps (::xml_schema::serializer_map& /* basic */);

    // Individual element serializers.
    //
    void
    basic_serializer (::pidf::basic_sskel&);

    void
    basic_serializer (::xml_schema::serializer_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    status_sskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation.
    //
    public:
    virtual void
    _serialize_content ();

    protected:
    status_sskel* status_impl_;
    status_sskel (status_sskel*, void*);

    protected:
    ::pidf::basic_sskel* basic_serializer_;
    ::xml_schema::serializer_map* basic_serializer_map_;
  };

  class qvalue_sskel: public ::xml_schema::decimal_sskel
  {
    public:
    // Serializer callbacks. Override them in your implementation.
    //

    virtual void
    pre (const ::pidf::qvalue&) = 0;

    // virtual void
    // post ();

    // Constructor.
    //
    qvalue_sskel (::xml_schema::decimal_sskel* tiein);

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation.
    //
    public:
    virtual void
    pre (double);

    protected:
    qvalue_sskel* qvalue_impl_;
    qvalue_sskel (qvalue_sskel*, void*);
  };

  class contact_sskel: public ::xml_schema::uri_sskel
  {
    public:
    // Serializer callbacks. Override them in your implementation.
    //

    virtual void
    pre (const ::pidf::contact&) = 0;

    // Attributes.
    //
    virtual bool
    priority_present ();

    virtual const ::pidf::qvalue&
    priority () = 0;

    // virtual void
    // post ();

    // Serializer construction API.
    //
    void
    serializers (::pidf::qvalue_sskel& /* priority */);

    // Individual attribute serializers.
    //
    void
    priority_serializer (::pidf::qvalue_sskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    contact_sskel (::xml_schema::uri_sskel* tiein);

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation.
    //
    public:
    virtual void
    pre (const ::std::string&);

    virtual void
    _serialize_attributes ();

    protected:
    contact_sskel* contact_impl_;
    contact_sskel (contact_sskel*, void*);

    protected:
    ::pidf::qvalue_sskel* priority_serializer_;
  };

  class tuple_sskel: public ::xsde::cxx::serializer::validating::complex_content
  {
    public:
    // Serializer callbacks. Override them in your implementation.
    //

    virtual void
    pre (const ::pidf::tuple&) = 0;

    // Attributes.
    //
    virtual ::std::string
    id () = 0;

    // Elements.
    //
    virtual const ::pidf::status&
    status () = 0;

    virtual bool
    any_next ();

    virtual void
    any (::std::string& ns, ::std::string& name);

    virtual void
    serialize_any ();

    virtual bool
    contact_present ();

    virtual const ::pidf::contact&
    contact () = 0;

    virtual bool
    note_next ();

    virtual const ::pidf::note&
    note () = 0;

    virtual bool
    timestamp_present ();

    virtual ::xml_schema::date_time
    timestamp () = 0;

    // virtual void
    // post ();

    // Serializer construction API.
    //
    void
    serializers (::xml_schema::id_sskel& /* id */,
                 ::pidf::status_sskel& /* status */,
                 ::pidf::contact_sskel& /* contact */,
                 ::pidf::note_sskel& /* note */,
                 ::xml_schema::date_time_sskel& /* timestamp */);

    void
    serializer_maps (::xml_schema::serializer_map& /* status */,
                     ::xml_schema::serializer_map& /* contact */,
                     ::xml_schema::serializer_map& /* note */,
                     ::xml_schema::serializer_map& /* timestamp */);

    // Individual attribute serializers.
    //
    void
    id_serializer (::xml_schema::id_sskel&);

    // Individual element serializers.
    //
    void
    status_serializer (::pidf::status_sskel&);

    void
    status_serializer (::xml_schema::serializer_map&);

    void
    contact_serializer (::pidf::contact_sskel&);

    void
    contact_serializer (::xml_schema::serializer_map&);

    void
    note_serializer (::pidf::note_sskel&);

    void
    note_serializer (::xml_schema::serializer_map&);

    void
    timestamp_serializer (::xml_schema::date_time_sskel&);

    void
    timestamp_serializer (::xml_schema::serializer_map&);

    virtual void
    _reset ();

    // Constructor.
    //
    tuple_sskel ();

    public:
    static const char*
    _static_type ();

    virtual const char*
    _dynamic_type () const;

    // Implementation.
    //
    public:
    virtual void
    _serialize_attributes ();

    virtual void
    _serialize_content ();

    protected:
    tuple_sskel* tuple_impl_;
    tuple_sskel (tuple_sskel*, void*);

    protected:
    ::xml_schema::id_sskel* id_serializer_;
    ::pidf::status_sskel* status_serializer_;
    ::xml_schema::serializer_map* status_serializer_map_;

    ::pidf::contact_sskel* contact_serializer_;
    ::xml_schema::serializer_map* contact_serializer_map_;

    ::pidf::note_sskel* note_serializer_;
    ::xml_schema::serializer_map* note_serializer_map_;

    ::xml_schema::date_time_sskel* timestamp_serializer_;
    ::xml_schema::serializer_map* timestamp_serializer_map_;
  };
}

// Begin epilogue.
//
//
// End epilogue.

#include <xsde/cxx/post.hxx>

#endif // PIDF_XML_SSKEL_HXX
