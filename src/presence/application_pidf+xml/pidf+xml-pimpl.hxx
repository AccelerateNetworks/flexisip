// Copyright (c) 2005-2011 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

#ifndef PIDF_XML_PIMPL_HXX
#define PIDF_XML_PIMPL_HXX

#include <xsde/cxx/pre.hxx>

// Begin prologue.
//
//
// End prologue.

#ifndef XSDE_OMIT_PAGGR
#  define XSDE_OMIT_PAGGR
#  define PIDF_XML_PIMPL_HXX_CLEAR_OMIT_PAGGR
#endif

#include "pidf+xml-pskel.hxx"

#include <xsde/cxx/stack.hxx>

#include "../xml/xml-pimpl.hxx"

namespace pidf
{
  class note_pimpl: public note_pskel
  {
    public:
    note_pimpl ();

    virtual void
    pre ();

    // Attributes.
    //
    virtual void
    lang (const ::namespace_::lang&);

    virtual ::pidf::note
    post_note ();

    public:
    ::xml_schema::string_pimpl base_impl_;

    public:
    struct note_pimpl_state
    {
      ::pidf::note note_;
    };

    note_pimpl_state note_pimpl_state_;
  };

  class presence_pimpl: public presence_pskel
  {
    public:
    presence_pimpl (bool = false);

    ~presence_pimpl ();

    virtual void
    _reset ();

    virtual void
    pre ();

    // Attributes.
    //
    virtual void
    entity (const ::std::string&);

    // Elements.
    //
    virtual void
    tuple (::pidf::tuple*);

    virtual void
    note (const ::pidf::note&);

    virtual ::pidf::presence*
    post_presence ();

    public:
    void
    pre_impl (::pidf::presence*);

    public:
    struct presence_pimpl_state
    {
      ::pidf::presence* presence_;
    };

    presence_pimpl_state presence_pimpl_state_;
    bool presence_pimpl_base_;
  };

  class basic_pimpl: public basic_pskel
  {
    public:
    basic_pimpl ();

    virtual void
    pre ();

    virtual void
    _characters (const ::xsde::cxx::ro_string&);

    virtual void
    _post ();

    virtual ::pidf::basic
    post_basic ();

    public:
    struct basic_pimpl_state
    {
      ::std::string str_;
    };

    basic_pimpl_state basic_pimpl_state_;
  };

  class status_pimpl: public status_pskel
  {
    public:
    virtual void
    pre ();

    // Elements.
    //
    virtual void
    basic (const ::pidf::basic&);

    virtual ::pidf::status
    post_status ();

    public:
    struct status_pimpl_state
    {
      ::pidf::status status_;
    };

    status_pimpl_state status_pimpl_state_;
  };

  class qvalue_pimpl: public qvalue_pskel
  {
    public:
    qvalue_pimpl ();

    virtual void
    pre ();

    virtual ::pidf::qvalue
    post_qvalue ();

    public:
    ::xml_schema::decimal_pimpl base_impl_;

    public:
    struct qvalue_pimpl_state
    {
      ::pidf::qvalue qvalue_;
    };

    qvalue_pimpl_state qvalue_pimpl_state_;
  };

  class contact_pimpl: public contact_pskel
  {
    public:
    contact_pimpl ();

    virtual void
    pre ();

    // Attributes.
    //
    virtual void
    priority (const ::pidf::qvalue&);

    virtual ::pidf::contact
    post_contact ();

    public:
    ::xml_schema::uri_pimpl base_impl_;

    public:
    struct contact_pimpl_state
    {
      ::pidf::contact contact_;
    };

    contact_pimpl_state contact_pimpl_state_;
  };

  class tuple_pimpl: public tuple_pskel
  {
    public:
    tuple_pimpl (bool = false);

    ~tuple_pimpl ();

    virtual void
    _reset ();

    virtual void
    pre ();

    // Attributes.
    //
    virtual void
    id (const ::std::string&);

    // Elements.
    //
    virtual void
    status (const ::pidf::status&);

    virtual void
    contact (const ::pidf::contact&);

    virtual void
    note (const ::pidf::note&);

    virtual void
    timestamp (const ::xml_schema::date_time&);

    virtual ::pidf::tuple*
    post_tuple ();

    public:
    void
    pre_impl (::pidf::tuple*);

    public:
    struct tuple_pimpl_state
    {
      ::pidf::tuple* tuple_;
    };

    tuple_pimpl_state tuple_pimpl_state_;
    bool tuple_pimpl_base_;
  };
}

#ifdef PIDF_XML_PIMPL_HXX_CLEAR_OMIT_PAGGR
#  undef XSDE_OMIT_PAGGR
#endif

#ifndef XSDE_OMIT_PAGGR

#include <xsde/cxx/hybrid/parser-map.hxx>

namespace pidf
{
  // Parser aggregate for the presence element.
  //
  class presence_paggr
  {
    public:
    presence_paggr ();

    void
    pre ()
    {
      this->presence_p_.pre ();
    }

    ::pidf::presence*
    post ()
    {
      return this->presence_p_.post_presence ();
    }

    ::pidf::presence_pimpl&
    root_parser ()
    {
      return this->presence_p_;
    }

    static const char*
    root_name ();

    static const char*
    root_namespace ();

    void
    reset ()
    {
      this->presence_p_._reset ();
    }

    static bool
    polymorphic ()
    {
      return false;
    }

    public:
    ::xml_schema::id_pimpl id_p_;
    ::xml_schema::uri_pimpl uri_p_;
    ::xml_schema::date_time_pimpl date_time_p_;
    ::pidf::status_pimpl status_p_;
    ::pidf::contact_pimpl contact_p_;
    ::pidf::basic_pimpl basic_p_;
    ::pidf::qvalue_pimpl qvalue_p_;
    ::pidf::note_pimpl note_p_;
    ::pidf::presence_pimpl presence_p_;
    ::pidf::tuple_pimpl tuple_p_;
    ::namespace_::lang_pimpl lang_p_;
  };
}

#endif // XSDE_OMIT_PAGGR

// Begin epilogue.
//
//
// End epilogue.

#include <xsde/cxx/post.hxx>

#endif // PIDF_XML_PIMPL_HXX
