// Copyright (c) 2005-2011 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

#ifndef PIDF_XML_SIMPL_HXX
#define PIDF_XML_SIMPL_HXX

#include <xsde/cxx/pre.hxx>

// Begin prologue.
//
//
// End prologue.

#ifndef XSDE_OMIT_SAGGR
#  define XSDE_OMIT_SAGGR
#  define PIDF_XML_SIMPL_HXX_CLEAR_OMIT_SAGGR
#endif

#include "pidf+xml-sskel.hxx"

#include <xsde/cxx/stack.hxx>

#include "../xml/xml-simpl.hxx"

namespace pidf
{
  class note_simpl: public note_sskel
  {
    public:
    note_simpl ();

    virtual void
    pre (const ::pidf::note&);

    // Attributes.
    //
    virtual bool
    lang_present ();

    virtual const ::namespace_::lang&
    lang ();

    public:
    ::xml_schema::string_simpl base_impl_;

    public:
    struct note_simpl_state
    {
      const ::pidf::note* note_;
    };

    note_simpl_state note_simpl_state_;
  };

  class presence_simpl: public presence_sskel
  {
    public:
    virtual void
    pre (const ::pidf::presence&);

    // Attributes.
    //
    virtual ::std::string
    entity ();

    // Elements.
    //
    virtual bool
    tuple_next ();

    virtual const ::pidf::tuple&
    tuple ();

    virtual bool
    note_next ();

    virtual const ::pidf::note&
    note ();

    public:
    struct presence_simpl_state
    {
      const ::pidf::presence* presence_;
      ::pidf::presence::tuple_const_iterator tuple_;
      ::pidf::presence::tuple_const_iterator tuple_end_;
      ::pidf::presence::note_const_iterator note_;
      ::pidf::presence::note_const_iterator note_end_;
    };

    presence_simpl_state presence_simpl_state_;
  };

  class basic_simpl: public basic_sskel
  {
    public:
    basic_simpl ();

    virtual void
    pre (const ::pidf::basic&);

    virtual void
    _serialize_content ();

    public:
    const ::pidf::basic* basic_simpl_state_;
  };

  class status_simpl: public status_sskel
  {
    public:
    virtual void
    pre (const ::pidf::status&);

    // Elements.
    //
    virtual bool
    basic_present ();

    virtual const ::pidf::basic&
    basic ();

    public:
    struct status_simpl_state
    {
      const ::pidf::status* status_;
    };

    status_simpl_state status_simpl_state_;
  };

  class qvalue_simpl: public qvalue_sskel
  {
    public:
    qvalue_simpl ();

    virtual void
    pre (const ::pidf::qvalue&);

    public:
    ::xml_schema::decimal_simpl base_impl_;
  };

  class contact_simpl: public contact_sskel
  {
    public:
    contact_simpl ();

    virtual void
    pre (const ::pidf::contact&);

    // Attributes.
    //
    virtual bool
    priority_present ();

    virtual const ::pidf::qvalue&
    priority ();

    public:
    ::xml_schema::uri_simpl base_impl_;

    public:
    struct contact_simpl_state
    {
      const ::pidf::contact* contact_;
    };

    contact_simpl_state contact_simpl_state_;
  };

  class tuple_simpl: public tuple_sskel
  {
    public:
    virtual void
    pre (const ::pidf::tuple&);

    // Attributes.
    //
    virtual ::std::string
    id ();

    // Elements.
    //
    virtual const ::pidf::status&
    status ();

    virtual bool
    contact_present ();

    virtual const ::pidf::contact&
    contact ();

    virtual bool
    note_next ();

    virtual const ::pidf::note&
    note ();

    virtual bool
    timestamp_present ();

    virtual ::xml_schema::date_time
    timestamp ();

    public:
    struct tuple_simpl_state
    {
      const ::pidf::tuple* tuple_;
      ::pidf::tuple::note_const_iterator note_;
      ::pidf::tuple::note_const_iterator note_end_;
    };

    tuple_simpl_state tuple_simpl_state_;
  };
}

#ifdef PIDF_XML_SIMPL_HXX_CLEAR_OMIT_SAGGR
#  undef XSDE_OMIT_SAGGR
#endif

#ifndef XSDE_OMIT_SAGGR

#include <xsde/cxx/hybrid/serializer-map.hxx>

namespace pidf
{
  // Serializer aggregate for the presence element.
  //
  class presence_saggr
  {
    public:
    presence_saggr ();

    void
    pre (const ::pidf::presence& x)
    {
      this->presence_s_.pre (x);
    }

    void
    post ()
    {
      this->presence_s_.post ();
    }

    ::pidf::presence_simpl&
    root_serializer ()
    {
      return this->presence_s_;
    }

    static const char*
    root_name ();

    static const char*
    root_namespace ();

    void
    reset ()
    {
      this->presence_s_._reset ();
    }

    static bool
    polymorphic ()
    {
      return false;
    }

    public:
    ::xml_schema::id_simpl id_s_;
    ::xml_schema::uri_simpl uri_s_;
    ::xml_schema::date_time_simpl date_time_s_;
    ::pidf::status_simpl status_s_;
    ::pidf::contact_simpl contact_s_;
    ::pidf::basic_simpl basic_s_;
    ::pidf::qvalue_simpl qvalue_s_;
    ::pidf::note_simpl note_s_;
    ::pidf::presence_simpl presence_s_;
    ::pidf::tuple_simpl tuple_s_;
    ::namespace_::lang_simpl lang_s_;
  };
}

#endif // XSDE_OMIT_SAGGR

// Begin epilogue.
//
//
// End epilogue.

#include <xsde/cxx/post.hxx>

#endif // PIDF_XML_SIMPL_HXX
